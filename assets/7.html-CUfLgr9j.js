import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,w as t,d as i,e as p}from"./app-CvlAI_tu.js";const u={},d={class:"hint-container details"},k=n("summary",null,"目录",-1),r={class:"table-of-contents"},m=i(`<p>由于 Java 提供了新旧两套日期和时间的 API，除非涉及到遗留代码，否则我们应该坚持使用新的 API。</p><p>如果需要与遗留代码打交道，如何在新旧 API 之间互相转换呢？</p><h2 id="🍀-旧-api-转新-api" tabindex="-1"><a class="header-anchor" href="#🍀-旧-api-转新-api" aria-hidden="true">#</a> 🍀 旧 API 转新 API</h2><p>如果要把旧式的 <code>Date</code> 或 <code>Calendar</code> 转换为新 API 对象，可以通过 <code>toInstant()</code> 方法转换为 <code>Instant</code> 对象，再继续转换为 <code>ZonedDateTime</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Date -&gt; Instant:</span>
<span class="token class-name">Instant</span> ins1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Calendar -&gt; Instant -&gt; ZonedDateTime:</span>
<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> ins2 <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ZonedDateTime</span> zdt <span class="token operator">=</span> ins2<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码还可以看到，旧的 <code>TimeZone</code> 提供了一个 <code>toZoneId()</code>，可以把自己变成新的 <code>ZoneId</code> 。</p><h2 id="🍀-新-api-转旧-api" tabindex="-1"><a class="header-anchor" href="#🍀-新-api-转旧-api" aria-hidden="true">#</a> 🍀 新 API 转旧 API</h2><p>如果要把新的 <code>ZonedDateTime</code> 转换为旧的 API 对象，只能借助 <code>long</code> 型时间戳做一个 “中转”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ZonedDateTime -&gt; long:</span>
<span class="token class-name">ZonedDateTime</span> zdt <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> ts <span class="token operator">=</span> zdt<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token comment">// long -&gt; Date:</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// long -&gt; Calendar:</span>
<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span>zdt<span class="token punctuation">.</span><span class="token function">getZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">setTimeInMillis</span><span class="token punctuation">(</span>zdt<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码还可以看到，新的 <code>ZoneId</code> 转换为旧的 <code>TimeZone</code>，需要借助 <code>ZoneId.getId()</code> 返回的 <code>String</code> 完成。</p><h2 id="🍀-在数据库中存储日期和时间" tabindex="-1"><a class="header-anchor" href="#🍀-在数据库中存储日期和时间" aria-hidden="true">#</a> 🍀 在数据库中存储日期和时间</h2><p>除了旧式的 java.util.Date ，我们还可以找到另一个 java.sql.Date ，它继承自 java.util.Date ，但会自动忽略所有时间相关信息。这个奇葩的设计原因要追溯到数据库的日期与时间类型。</p><p>在数据库中，也存在几种日期和时间类型：</p><ul><li><code>DATETIME</code> ：表示日期和时间；</li><li><code>DATE</code> ：仅表示日期；</li><li><code>TIME</code> ：仅表示时间；</li><li><code>TIMESTAMP</code> ：和 <code>DATETIME</code> 类似，但是数据库会在创建或者更新记录的时候同时修改 <code>TIMESTAMP</code> 。</li></ul><p>在使用 Java 程序操作数据库时，我们需要把数据库类型与 Java 类型映射起来。下表是数据库类型与 Java 新旧 API 的映射关系：</p><table><thead><tr><th>数据库</th><th>对应 Java 类（旧）</th><th>对应 Java 类（新）</th></tr></thead><tbody><tr><td>DATETIME</td><td>java.util.Date</td><td>LocalDateTime</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>LocalDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>LocalTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>LocalDateTime</td></tr></tbody></table><p>实际上，在数据库中，我们需要存储的最常用的是时刻（ <code>Instant</code> ），因为有了时刻信息，就可以根据用户自己选择的时区，显示出正确的本地时间。所以，最好的方法是直接用长整数 <code>long</code> 表示，在数据库中存储为 <code>BIGINT</code> 类型。</p><p>通过存储一个 <code>long</code> 型时间戳，我们可以编写一个 <code>timestampToString()</code> 的方法，非常简单地为不同用户以不同的偏好来显示不同的本地时间：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> ts <span class="token operator">=</span> <span class="token number">1574208900000L</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">timestampToString</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">,</span> <span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">timestampToString</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">,</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">timestampToString</span><span class="token punctuation">(</span><span class="token keyword">long</span> epochMilli<span class="token punctuation">,</span> <span class="token class-name">Locale</span> lo<span class="token punctuation">,</span> <span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Instant</span> ins <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>epochMilli<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DateTimeFormatter</span> f <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">,</span> <span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>ins<span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上述方法进行调用，结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2019 年 11 月 20 日 上午 8:15
Nov 19, 2019, 7:15 PM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>处理日期和时间时，尽量使用新的 java.time 包；</p><p>在数据库中存储时间戳时，尽量使用 <code>long</code> 型时间戳，它具有省空间，效率高，不依赖数据库的优点。</p>`,24);function v(b,f){const a=o("router-link");return c(),l("div",null,[n("details",d,[k,n("nav",r,[n("ul",null,[n("li",null,[s(a,{to:"#🍀-旧-api-转新-api"},{default:t(()=>[p("🍀 旧 API 转新 API")]),_:1})]),n("li",null,[s(a,{to:"#🍀-新-api-转旧-api"},{default:t(()=>[p("🍀 新 API 转旧 API")]),_:1})]),n("li",null,[s(a,{to:"#🍀-在数据库中存储日期和时间"},{default:t(()=>[p("🍀 在数据库中存储日期和时间")]),_:1})]),n("li",null,[s(a,{to:"#🍀-小结"},{default:t(()=>[p("🍀 小结")]),_:1})])])])]),m])}const I=e(u,[["render",v],["__file","7.html.vue"]]);export{I as default};
