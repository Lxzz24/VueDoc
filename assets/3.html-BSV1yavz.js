import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as u,a as n,b as a,w as t,d as l,e}from"./app-CvlAI_tu.js";const i={},d={class:"hint-container details"},k=n("summary",null,"目录",-1),r={class:"table-of-contents"},m=l(`<p>数据库操作总结起来就四个字：<strong>增删改查</strong>，行话叫 <strong>CRUD</strong>：Create，Retrieve，Update 和 Delete。</p><p>查就是查询，我们已经讲过了，就是使用 <code>PreparedStatement</code> 进行各种 <code>SELECT</code>，然后处理结果集。现在我们来看看如何使用 JDBC 进行增删改。</p><h2 id="🍀-插入" tabindex="-1"><a class="header-anchor" href="#🍀-插入" aria-hidden="true">#</a> 🍀 插入</h2><p>插入操作是 <code>INSERT</code>，即插入一条新记录。通过 JDBC 进行插入，本质上也是用 <code>PreparedStatement</code> 执行一条 SQL 语句，不过最后执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>。示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">JDBC_URL</span><span class="token punctuation">,</span> <span class="token constant">JDBC_USER</span><span class="token punctuation">,</span> <span class="token constant">JDBC_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>
            <span class="token string">&quot;INSERT INTO students (id, grade, name, gender) VALUES (?,?,?,?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从 1 开始</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// grade</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gender</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置参数与查询是一样的，有几个 <code>?</code> 占位符就必须设置对应的参数。虽然 <code>Statement</code> 也可以执行插入操作，但我们仍然要严格遵循 <em>绝不能手动拼 SQL 字符串</em> 的原则，以避免安全漏洞。</p><p>当成功执行 <code>executeUpdate()</code> 后，返回值是 <code>int</code>，表示插入的记录数量。此处总是 <code>1</code>，因为只插入了一条记录。</p><h2 id="🍀-插入并获取主键" tabindex="-1"><a class="header-anchor" href="#🍀-插入并获取主键" aria-hidden="true">#</a> 🍀 插入并获取主键</h2><p>如果数据库的表设置了自增主键，那么在执行 <code>INSERT</code> 语句时，并不需要指定主键，数据库会自动分配主键。对于使用自增主键的程序，有个额外的步骤，就是如何获取插入后的自增主键的值。</p><p>要获取自增主键，不能先插入，再查询。因为两条 SQL 执行期间可能有别的程序也插入了同一个表。获取自增主键的正确写法是在创建 <code>PreparedStatement</code> 的时候，指定一个 <code>RETURN_GENERATED_KEYS</code> 标志位，表示 JDBC 驱动必须返回插入的自增主键。示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">JDBC_URL</span><span class="token punctuation">,</span> <span class="token constant">JDBC_USER</span><span class="token punctuation">,</span> <span class="token constant">JDBC_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>
            <span class="token string">&quot;INSERT INTO students (grade, name, gender) VALUES (?,?,?)&quot;</span><span class="token punctuation">,</span>
            <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token constant">RETURN_GENERATED_KEYS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// grade</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gender</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从 1 开始</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述代码，有两点注意事项：</p><p>一是调用 <code>prepareStatement()</code> 时，第二个参数必须传入常量 <code>Statement.RETURN_GENERATED_KEYS</code>，否则 JDBC 驱动不会返回自增主键；</p><p>二是执行 <code>executeUpdate()</code> 方法后，必须调用 <code>getGeneratedKeys()</code> 获取一个 <code>ResultSet</code> 对象，这个对象包含了数据库自动生成的主键的值，读取该对象的每一行来获取自增主键的值。如果一次插入多条记录，那么这个 <code>ResultSet</code> 对象就会有多行返回值。如果插入时有多列自增，那么 <code>ResultSet</code> 对象的每一行都会对应多个自增值（自增列不一定必须是主键）。</p><h2 id="🍀-更新" tabindex="-1"><a class="header-anchor" href="#🍀-更新" aria-hidden="true">#</a> 🍀 更新</h2><p>更新操作是 <code>UPDATE</code> 语句，它可以一次更新若干列的记录。更新操作和插入操作在 JDBC 代码的层面上实际上没有区别，除了 SQL 语句不同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">JDBC_URL</span><span class="token punctuation">,</span> <span class="token constant">JDBC_USER</span><span class="token punctuation">,</span> <span class="token constant">JDBC_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE students SET name=? WHERE id=?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从 1 开始</span>
        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回更新的行数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>executeUpdate()</code> 返回数据库实际更新的行数。返回结果可能是正数，也可能是 0（表示没有任何记录更新）。</p><h2 id="🍀-删除" tabindex="-1"><a class="header-anchor" href="#🍀-删除" aria-hidden="true">#</a> 🍀 删除</h2><p>删除操作是 <code>DELETE</code> 语句，它可以一次删除若干行。和更新一样，除了 SQL 语句不同外，JDBC 代码都是相同的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {
    try (PreparedStatement ps = conn.prepareStatement(&quot;DELETE FROM students WHERE id=?&quot;)) {
        ps.setObject(1, 999); // 注意：索引从 1 开始
        int n = ps.executeUpdate(); // 删除的行数
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 JDBC 更新数据库</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用 JDBC 执行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 都可视为更新操作；</p><p>更新操作使用 <code>PreparedStatement</code> 的 <code>executeUpdate()</code> 进行，返回受影响的行数。</p>`,26);function v(b,S){const s=c("router-link");return o(),u("div",null,[n("details",d,[k,n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-插入"},{default:t(()=>[e("🍀 插入")]),_:1})]),n("li",null,[a(s,{to:"#🍀-插入并获取主键"},{default:t(()=>[e("🍀 插入并获取主键")]),_:1})]),n("li",null,[a(s,{to:"#🍀-更新"},{default:t(()=>[e("🍀 更新")]),_:1})]),n("li",null,[a(s,{to:"#🍀-删除"},{default:t(()=>[e("🍀 删除")]),_:1})]),n("li",null,[a(s,{to:"#🍀-练习"},{default:t(()=>[e("🍀 练习")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),m])}const _=p(i,[["render",v],["__file","3.html.vue"]]);export{_ as default};
