import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a,b as e,w as s,d,e as t}from"./app-CvlAI_tu.js";const p="/VueDoc/assets/20221121212626-Ai17NdkT.png",u={},r={class:"hint-container details"},v=a("summary",null,"目录",-1),m={class:"table-of-contents"},k=d(`<h2 id="🍀-什么是集合-collection" tabindex="-1"><a class="header-anchor" href="#🍀-什么是集合-collection" aria-hidden="true">#</a> 🍀 什么是集合（Collection）？</h2><p>集合就是 “由若干个确定的元素所构成的整体”。</p><p>例如，5 只小兔构成的集合：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
│   (\\_(\\     (\\_/)     (\\_/)     (\\_/)      (\\(\\   │
|   ( -.-)    (•.•)     (&gt;.&lt;)     (^.^)     (=&#39;.&#39;)  |
│  C(&quot;)_(&quot;)  (&quot;)_(&quot;)   (&quot;)_(&quot;)   (&quot;)_(&quot;)   O(_&quot;)&quot;)  │
└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在数学中，我们经常遇到集合的概念。例如：</p><ul><li>有限集合： <ul><li>一个班所有的同学构成的集合；</li><li>一个网站所有的商品构成的集合；</li><li>...</li></ul></li><li>无限集合： <ul><li>全体自然数集合：1，2，3，……</li><li>有理数集合；</li><li>实数集合；</li><li>...</li></ul></li></ul><p>为什么要在计算机中引入集合呢？这是为了便于处理一组类似的数据，例如：</p><ul><li>计算所有同学的总成绩和平均成绩；</li><li>列举所有的商品名称和价格；</li><li>...</li></ul><p>在 Java 中，如果一个 Java 对象可以在内部持有若干其他 Java 对象，并对外提供访问接口，我们把这种 Java 对象称为集合。很显然，Java 的数组可以看作是一种集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 可以持有 10 个 String 对象</span>
ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 可以放入 String 对象</span>
<span class="token class-name">String</span> first <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 可以获取 String 对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然 Java 提供了数组这种数据类型，可以充当集合，那么，我们为什么还需要其他集合类？</p><p>这是因为 <em>数组有如下限制</em>：</p><ul><li>数组初始化后大小不可变；</li><li>数组只能按索引顺序存取。</li></ul><p>因此，我们需要各种不同类型的集合类来处理不同的数据，例如：</p><ul><li>可变大小的顺序链表；</li><li>保证无重复元素的集合；</li><li>...</li></ul><h2 id="🍀-collection" tabindex="-1"><a class="header-anchor" href="#🍀-collection" aria-hidden="true">#</a> 🍀 Collection</h2><p>Java 标准库自带的 <code>java.util</code> 包提供了集合类：<code>Collection</code>，它是除 <code>Map</code> 外所有其他集合类的根接口。Java 的 <code>java.util</code> 包主要提供了以下三种类型的集合：</p><ul><li><code>List</code> ：一种有序列表的集合，例如，按索引排列的 <code>Student</code> 的 <code>List</code>；</li><li><code>Set</code> ：一种保证没有重复元素的集合，例如，所有无重复名称的 <code>Student</code> 的 <code>Set</code>；</li><li><code>Map</code> ：一种通过键值对（key-value）查找的映射表集合，例如，根据 <code>Student</code> 的 <code>name</code> 查找对应 <code>Student</code> 的 <code>Map</code>。</li></ul><p>Java 集合的设计有几个特点：</p><ol><li>实现了接口和实现类相分离，例如，有序表的接口是 <code>List</code>，具体的实现类有 <code>ArrayList</code>，<code>LinkedList</code> 等</li><li>支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只能放入 String 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，Java 访问集合总是通过统一的方式 —— <strong>迭代器</strong>（Iterator）来实现，它最明显的好处在于 <em>无需知道集合内部元素是按什么方式存储的</em>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于 Java 的集合设计非常久远，中间经历过大规模改进，我们要注意到有一小部分集合类是遗留类，<s>不应该继续使用</s>：</p><ul><li><code>Hashtable</code> ：一种线程安全的 <code>Map</code> 实现；</li><li><code>Vector</code> ：一种线程安全的 <code>List</code> 实现；</li><li><code>Stack</code> ：基于 <code>Vector</code> 实现的 <code>LIFO</code> 的栈。</li></ul><p>还有一小部分接口是遗留接口，也不应该继续使用：</p><ul><li><code>Enumeration&lt;E&gt;</code> ：已被 <code>Iterator&lt;E&gt;</code> 取代。</li></ul></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li>Java 的集合类定义在 <code>java.util</code> 包中，支持泛型，主要提供了 3 种集合类，包括 <code>List</code>，<code>Set</code> 和 <code>Map</code>。</li><li>Java 集合使用统一的 <code>Iterator</code> 遍历，尽量不要使用遗留接口。</li></ul>`,26);function g(_,h){const n=o("router-link");return c(),i("div",null,[a("details",r,[v,a("nav",m,[a("ul",null,[a("li",null,[e(n,{to:"#🍀-什么是集合-collection"},{default:s(()=>[t("🍀 什么是集合（Collection）？")]),_:1})]),a("li",null,[e(n,{to:"#🍀-collection"},{default:s(()=>[t("🍀 Collection")]),_:1})]),a("li",null,[e(n,{to:"#🍀-小结"},{default:s(()=>[t("🍀 小结")]),_:1})])])])]),k])}const S=l(u,[["render",g],["__file","1.html.vue"]]);export{S as default};
