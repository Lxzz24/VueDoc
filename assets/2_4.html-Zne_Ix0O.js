import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,e as s,b as c,w as l,d as i}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/image-20231220100158844-DAmQrE5O.png",d={},r=n("blockquote",null,[n("p",null,"动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。")],-1),k=n("p",null,"装饰器（Decorator）模式，是一种在运行期动态给某个对象的实例增加功能的方法。",-1),m=n("code",null,"InputStream",-1),v=n("code",null,"FileInputStream",-1),b=n("code",null,"ServletInputStream",-1),g=n("code",null,"Socket.getInputStream()",-1),w=n("code",null,"InputStream",-1),x=i(`<p>现在，如果要给不同的最终数据源增加缓冲功能、计算签名功能、加密解密功能，那么，3 个最终数据源、3 种功能一共需要 9 个子类。如果继续增加最终数据源，或者增加新功能，子类会爆炸式增长，这种设计方式显然是不可取的。</p><p>Decorator 模式的目的就是把一个一个的附加功能，用 Decorator 的方式给一层一层地累加到原始数据源上，最终，通过组合获得我们想要的功能。</p><p>例如：给 <code>FileInputStream</code> 增加缓冲和解压缩功能，用 Decorator 模式写出来如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建原始的数据源:</span>
<span class="token class-name">InputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.gz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 增加缓冲功能:</span>
<span class="token class-name">InputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 增加解压缩功能:</span>
<span class="token class-name">InputStream</span> gis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者一次性写成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPInputStream</span><span class="token punctuation">(</span> <span class="token comment">// 第二层装饰</span>
                        <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span> <span class="token comment">// 第一层装饰</span>
                            <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.gz&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 核心功能</span>
                        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察 <code>BufferedInputStream</code> 和 <code>GZIPInputStream</code>，它们实际上都是从 <code>FilterInputStream</code> 继承的，这个 <code>FilterInputStream</code> 就是一个抽象的 Decorator。我们用图把 Decorator 模式画出来如下：</p><figure><img src="`+u+`" alt="image-20231220100158844" tabindex="0" loading="lazy"><figcaption>image-20231220100158844</figcaption></figure><p>最顶层的 Component 是接口，对应到 IO 的就是 <code>InputStream</code> 这个抽象类。ComponentA、ComponentB 是实际的子类，对应到 IO 的就是 <code>FileInputStream</code>、<code>ServletInputStream</code> 这些数据源。Decorator 是用于实现各个附加功能的抽象装饰器，对应到 IO 的就是 <code>FilterInputStream</code>。而从 Decorator 派生的就是一个一个的装饰器，它们每个都有独立的功能，对应到 IO 的就是 <code>BufferedInputStream</code>、<code>GZIPInputStream</code> 等。</p><p>Decorator 模式有什么好处？它实际上把核心功能和附加功能给分开了。核心功能指 <code>FileInputStream</code> 这些真正读数据的源头，附加功能指加缓冲、压缩、解密这些功能。如果我们要新增核心功能，就增加 Component 的子类，例如 <code>ByteInputStream</code>。如果我们要增加附加功能，就增加 Decorator 的子类，例如 <code>CipherInputStream</code>。两部分都可以独立地扩展，而具体如何附加功能，由调用方自由组合，从而极大地增强了灵活性。</p><p>如果我们要自己设计完整的 Decorator 模式，应该如何设计？</p><p>我们还是举个栗子：假设我们需要渲染一个 HTML 的文本，但是文本还可以附加一些效果，比如加粗、变斜体、加下划线等。为了实现动态附加效果，可以采用 Decorator 模式。</p><p>首先，仍然需要定义顶层接口 <code>TextNode</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TextNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置 text:</span>
    <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 text:</span>
    <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于核心节点，例如 <code>&lt;span&gt;</code>，它需要从 <code>TextNode</code> 直接继承：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpanNode</span> <span class="token keyword">implements</span> <span class="token class-name">TextNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&lt;span&gt;&quot;</span> <span class="token operator">+</span> text <span class="token operator">+</span> <span class="token string">&quot;&lt;/span&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着，为了实现 Decorator 模式，需要有一个抽象的 Decorator 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NodeDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">TextNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TextNode</span> target<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">NodeDecorator</span><span class="token punctuation">(</span><span class="token class-name">TextNode</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>NodeDecorator</code> 类的核心是持有一个 <code>TextNode</code>，即将要把功能附加到的 <code>TextNode</code> 实例。接下来就可以写一个加粗功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoldDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">NodeDecorator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">BoldDecorator</span><span class="token punctuation">(</span><span class="token class-name">TextNode</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&lt;b&gt;&quot;</span> <span class="token operator">+</span> target<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/b&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的，可以继续加 <code>ItalicDecorator</code>、<code>UnderlineDecorator</code> 等。客户端可以自由组合这些 Decorator：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextNode</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpanNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TextNode</span> n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoldDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnderlineDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpanNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TextNode</span> n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItalicDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoldDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpanNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Decorated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 &lt;span&gt;Hello&lt;/span&gt;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 &lt;b&gt;&lt;u&gt;&lt;span&gt;Decorated&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n3<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 &lt;i&gt;&lt;b&gt;&lt;span&gt;World&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Decorator 添加一个 <code>&lt;del&gt;</code> 标签表示删除。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用 Decorator 模式，可以独立增加核心功能，也可以独立增加附加功能，二者互不影响；</p><p>可以在运行期动态地给核心功能增加任意个附加功能。</p>`,27);function y(S,f){const a=t("RouterLink");return p(),o("div",null,[r,k,n("p",null,[s("我们在 IO 的 "),c(a,{to:"/1-Java/8_IO/4.html"},{default:l(()=>[s("Filter 模式")]),_:1}),s(" 一节中其实已经讲过装饰器模式了。在 Java 标准库中，"),m,s(" 是抽象类，"),v,s("、"),b,s("、"),g,s(" 这些 "),w,s(" 都是最终数据源。")]),x])}const h=e(d,[["render",y],["__file","2_4.html.vue"]]);export{h as default};
