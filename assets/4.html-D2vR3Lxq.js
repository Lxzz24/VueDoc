import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,b as s,w as t,d as i,e}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/20221123213034-Cf2zR8ik.png",r="/VueDoc/assets/20221123213203-DCAb7HV5.png",k="/VueDoc/assets/20221123213231-B8WnwJlP.png",d="/VueDoc/assets/20221123213259-DSXqB3HC.png",m={},v={class:"hint-container details"},b=n("summary",null,"目录",-1),S={class:"table-of-contents"},I=i(`<p>Java 的 IO 标准库提供的 InputStream 根据来源可以包括：</p><ul><li>FileInputStream：从文件读取数据，是最终数据源；</li><li>ServletInputStream：从 HTTP 请求读取数据，是最终数据源；</li><li>Socket.getInputStream()：从 TCP 连接读取数据，是最终数据源；</li><li>...</li></ul><p>如果我们要给 FileInputStream 添加缓冲功能，则可以从 FileInputStream 派生一个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BufferedFileInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要给 FileInputStream 添加计算签名的功能，类似的，也可以从 FileInputStream 派生一个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DigestFileInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要给 FileInputStream 添加加密 / 解密功能，还是可以从 FileInputStream 派生一个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CipherFileInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要给 FileInputStream 添加缓冲和签名的功能，那么我们还需要派生 BufferedDigestFileInputStream。如果要给 FileInputStream 添加缓冲和加解密的功能，则需要派生 BufferedCipherFileInputStream。</p><p>我们发现，给 FileInputStream 添加 3 种功能，至少需要 3 个子类。这 3 种功能的组合，又需要更多的子类：</p><figure><img src="`+u+`" alt="20221123213034" tabindex="0" loading="lazy"><figcaption>20221123213034</figcaption></figure><p>这还只是针对 FileInputStream 设计，如果针对另一种 InputStream 设计，很快会出现子类爆炸的情况。</p><p>因此，直接使用继承，为各种 InputStream 附加更多的功能，根本无法控制代码的复杂度，很快就会失控。</p><p>为了解决依赖继承会导致子类数量失控的问题，JDK 首先将 InputStream 分为两大类：</p><p>一类是直接提供数据的基础 InputStream ，例如：</p><ul><li>FileInputStream</li><li>ByteArrayInputStream</li><li>ServletInputStream</li><li>...</li></ul><p>一类是提供额外附加功能的 InputStream，例如：</p><ul><li>BufferedInputStream</li><li>DigestInputStream</li><li>CipherInputStream</li><li>...</li></ul><p>当我们需要给一个 “基础”InputStream 附加各种功能时，我们先确定这个能提供数据源的 InputStream，因为我们需要的数据总得来自某个地方，例如，FileInputStream，数据来源自文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.gz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>紧接着，我们希望 FileInputStream 能提供缓冲的功能来提高读取的效率，因此我们用 BufferedInputStream 包装这个 InputStream，得到的包装类型是 BufferedInputStream，但它仍然被视为一个 InputStream：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> buffered <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，假设该文件已经用 gzip 压缩了，我们希望直接读取解压缩的内容，就可以再包装一个 GZIPInputStream：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> gzip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPInputStream</span><span class="token punctuation">(</span>buffered<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>无论我们包装多少次，得到的对象始终是 InputStream，我们直接用 InputStream 来引用它，就可以正常读取：</p><figure><img src="`+r+'" alt="20221123213203" tabindex="0" loading="lazy"><figcaption>20221123213203</figcaption></figure><p>上述这种通过一个 “基础” 组件再叠加各种 “附加” 功能组件的模式，称之为 Filter 模式（或者装饰器模式：Decorator）。它可以让我们通过少量的类来实现各种功能的组合：</p><figure><img src="'+k+'" alt="20221123213231" tabindex="0" loading="lazy"><figcaption>20221123213231</figcaption></figure><p>类似的，OutputStream 也是以这种模式来提供各种功能：</p><figure><img src="'+d+`" alt="20221123213259" tabindex="0" loading="lazy"><figcaption>20221123213259</figcaption></figure><h2 id="🍀-编写-filterinputstream" tabindex="-1"><a class="header-anchor" href="#🍀-编写-filterinputstream" aria-hidden="true">#</a> 🍀 编写 FilterInputStream</h2><p>我们也可以自己编写 FilterInputStream，以便可以把自己的 FilterInputStream“叠加” 到任何一个 InputStream 中。</p><p>下面的例子演示了如何编写一个 CountInputStream，它的作用是对输入的字节进行计数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">&quot;hello, world!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">CountInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Total read &quot;</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getBytesRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CountInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token class-name">CountInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBytesRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到在叠加多个 FilterInputStream，我们只需要持有最外层的 InputStream，并且，当最外层的 InputStream 关闭时（在 try(resource) 块的结束处自动关闭），内层的 InputStream 的 close() 方法也会被自动调用，并最终调用到最核心的 “基础”InputStream，因此不存在资源泄露。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Java 的 IO 标准库使用 Filter 模式为 InputStream 和 OutputStream 增加功能：</p><ul><li>可以把一个 InputStream 和任意个 FilterInputStream 组合；</li><li>可以把一个 OutputStream 和任意个 FilterOutputStream 组合。</li></ul><p>Filter 模式可以在运行期动态增加功能（又称 Decorator 模式）。</p>`,39);function g(f,y){const a=o("router-link");return l(),c("div",null,[n("details",v,[b,n("nav",S,[n("ul",null,[n("li",null,[s(a,{to:"#🍀-编写-filterinputstream"},{default:t(()=>[e("🍀 编写 FilterInputStream")]),_:1})]),n("li",null,[s(a,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),I])}const F=p(m,[["render",g],["__file","4.html.vue"]]);export{F as default};
