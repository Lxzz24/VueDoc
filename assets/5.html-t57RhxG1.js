import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as u,a as n,b as a,w as t,d as l,e as p}from"./app-CvlAI_tu.js";const i={},k={class:"hint-container details"},r=n("summary",null,"目录",-1),d={class:"table-of-contents"},m=l(`<p>使用 JDBC 操作数据库的时候，经常会执行一些批量操作。</p><p>例如，一次性给会员增加可用优惠券若干，我们可以执行以下 SQL 代码：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> coupons <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> expires<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;DISCOUNT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2030-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> coupons <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> expires<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token string">&#39;DISCOUNT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2030-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> coupons <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> expires<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">,</span> <span class="token string">&#39;DISCOUNT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2030-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> coupons <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> expires<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token string">&#39;DISCOUNT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2030-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上执行 JDBC 时，因为只有占位符参数不同，所以 SQL 实际上是一样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> params <span class="token operator">:</span> paramsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO coupons (user_id, type, expires) VALUES (?,?,?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的还有，给每个员工薪水增加 10%～30%：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary <span class="token operator">*</span> ? <span class="token keyword">WHERE</span> id <span class="token operator">=</span> ?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过一个循环来执行每个 <code>PreparedStatement</code> 虽然可行，但是性能很低。SQL 数据库对 SQL 语句相同，但只有参数不同的若干语句可以作为 batch 执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个 SQL。</p><p>在 JDBC 代码中，我们可以利用 SQL 数据库的这一特性，把同一个 SQL 但参数不同的若干次操作合并为一个 batch 执行。我们以批量插入为例，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对同一个 PreparedStatement 反复设置参数并调用 addBatch():</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> s <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到 batch</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 执行 batch:</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">&quot;inserted.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// batch 中每个 SQL 执行的结果数量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 batch 和执行一个 SQL 不同点在于，需要对同一个 <code>PreparedStatement</code> 反复设置参数并调用 <code>addBatch()</code>，这样就相当于给一个 SQL 加上了多组参数，相当于变成了 “多行”SQL。</p><p>第二个不同点是调用的不是 <code>executeUpdate()</code>，而是 <code>executeBatch()</code>，因为我们设置了多组参数，相应地，返回结果也是多个 <code>int</code> 值，因此返回类型是 <code>int[]</code>，循环 <code>int[]</code> 数组即可获取每组参数执行后影响的结果数量。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Batch 操作</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用 JDBC 的 batch 操作会大大提高执行效率，对内容相同，参数不同的 SQL，要优先考虑 batch 操作。</p>`,16);function v(b,S){const s=o("router-link");return c(),u("div",null,[n("details",k,[r,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-练习"},{default:t(()=>[p("🍀 练习")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[p("🍀 小结")]),_:1})])])])]),m])}const y=e(i,[["render",v],["__file","5.html.vue"]]);export{y as default};
