import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,a as s,b as a,w as e,d as i,e as c}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/20220628101926-DwT28766.png",d="/VueDoc/assets/20220628102009-KVribHUv.png",k={},r={class:"hint-container details"},m=s("summary",null,"目录",-1),v={class:"table-of-contents"},g=i(`<p>除了 <code>int</code> 等基本类型外，Java 的其他类型全部都是 <code>class</code> （包括 <code>interface</code> ）。例如：</p><ul><li>String</li><li>Object</li><li>Runnable</li><li>Exception</li><li>...</li></ul><p>仔细思考，我们可以得出结论： <code>class</code> （包括 <code>interface</code> ）的本质是数据类型（ <code>Type</code> ）。<em>无继承关系的数据类型无法赋值</em>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Number</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// compile error!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>class</code> 是由 JVM 在执行过程中动态加载的。JVM 在第一次读取到一种 <code>class</code> 类型时，将其加载进内存。</p><p>每加载一种 <code>class</code>，JVM 就为其创建一个 <code>Class</code> 类型的实例，并关联起来。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：这里的 <code>Class</code> 类型是一个名叫 <code>Class</code> 的 <code>class</code> 。它长这样：</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 <code>String</code> 类为例，当 JVM 加载 <code>String</code> 类时，它首先读取 <code>String.class</code> 文件到内存，然后，为 <code>String</code> 类创建一个 <code>Class</code> 实例并关联起来：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 <code>Class</code> 实例是 JVM 内部创建的，如果我们查看 JDK 源码，可以发现 <code>Class</code> 类的构造方法是 <code>private</code>，<em>只有 JVM 能创建 <code>Class</code> 实例</em>，我们自己的 Java 程序是无法创建 <code>Class</code> 实例的。</p><p>所以，JVM 持有的每个 <code>Class</code> 实例都指向一个数据类型（ <code>class</code> 或 <code>interface</code> ）：</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 <code>Class</code> 实例包含了该 class 的所有完整信息：</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于 JVM 为每个加载的 <code>class</code> 创建了对应的 <code>Class</code> 实例，并在实例中保存了该 <code>class</code> 的所有信息，包括 <em>类名</em>、<em>包名</em>、<em>父类</em>、<em>实现的接口</em>、<em>所有方法</em>、<em>字段</em> 等，因此，如果获取了某个 <code>Class</code> 实例，我们就可以通过这个 <code>Class</code> 实例获取到该实例对应的 <code>class</code> 的所有信息。</p><blockquote><p>[!important] &gt; <em>这种通过 <code>Class</code> 实例获取 <code>class</code> 信息的方法称为反射（ Reflection ）</em>。</p></blockquote><h2 id="🍀-如何获取一个-class-的-class-实例" tabindex="-1"><a class="header-anchor" href="#🍀-如何获取一个-class-的-class-实例" aria-hidden="true">#</a> 🍀 如何获取一个 <code>class</code> 的 <code>Class</code> 实例？</h2><p>有三个方法：</p><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一：</h3><p>直接通过一个 <code>class</code> 的静态变量 <code>class</code> 获取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="🌸-方法二" tabindex="-1"><a class="header-anchor" href="#🌸-方法二" aria-hidden="true">#</a> 🌸 方法二：</h3><p>如果我们有一个实例变量，可以通过该实例变量提供的 <code>getClass()</code> 方法获取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三：</h3><p>如果知道一个 <code>class</code> 的完整类名，可以通过静态方法 <code>Class.forName()</code> 获取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 <code>Class</code> 实例在 JVM 中是唯一的，所以，上述方法获取的 <code>Class</code> 实例是同一个实例。可以用 <code>==</code> 比较两个 <code>Class</code> 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> cls1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cls2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> sameClass <span class="token operator">=</span> cls1 <span class="token operator">==</span> cls2<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意一下 <code>Class</code> 实例比较和 <code>instanceof</code> 的差别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> b1 <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 n 是 Integer 类型</span>
<span class="token keyword">boolean</span> b2 <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 n 是 Number 类型的子类</span>

<span class="token keyword">boolean</span> b3 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 n.getClass() 返回 Integer.class</span>
<span class="token keyword">boolean</span> b4 <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">// false，因为 Integer.class!=Number.class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>用 <code>instanceof</code> 不但匹配指定类型，还匹配指定类型的子类。</em></strong> 而用 <code>==</code> 判断 <code>class</code> 实例可以精确地判断数据类型，但不能作子类型比较。</p><p><u>通常情况下，我们应该用 <code>instanceof</code> 判断数据类型</u>，因为面向抽象编程的时候，我们不关心具体的子类型。只有在需要精确判断一个类型是不是某个 <code>class</code> 的时候，我们才使用 <code>==</code> 判断 <code>class</code> 实例。</p><p>因为反射的目的是为了获得某个实例的信息。因此，当我们拿到某个 <code>Object</code> 实例时，我们可以通过反射获取该 <code>Object</code> 的 <code>class</code> 信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printObjectInfo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span> cls <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要从 <code>Class</code> 实例获取的基本信息，参考下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>Month</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printClassInfo</span><span class="token punctuation">(</span><span class="token class-name">Class</span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Class name:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Simple name:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Package name:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;is interface:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;is enum:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;is array:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;is primitive:&quot;</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到数组（例如 <code>String[]</code> ）也是一种类，而且不同于 <code>String.class</code>，它的类名是 <code>[Ljava.lang.String;</code> 。此外，JVM 为每一种基本类型如 <code>int</code> 也创建了 <code>Class</code> 实例，通过 <code>int.class</code> 访问。</p><p>如果获取到了一个 <code>Class</code> 实例，我们就可以通过该 <code>Class</code> 实例来创建对应类型的实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取 String 的 Class 实例:</span>
<span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个 String 实例:</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码相当于 <code>new String()</code> 。</p><blockquote><p>通过 <code>Class.newInstance()</code> 可以创建类实例，它的局限是：只能调用 <code>public</code> 的无参数构造方法。带参数的构造方法，或者非 <code>public</code> 的构造方法都无法通过 <code>Class.newInstance()</code> 被调用。</p></blockquote><h2 id="🍀-动态加载" tabindex="-1"><a class="header-anchor" href="#🍀-动态加载" aria-hidden="true">#</a> 🍀 动态加载</h2><p>JVM 在执行 Java 程序的时候，并不是一次性把所有用到的 class 全部加载到内存，而是第一次需要用到 class 时才加载。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">create</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当执行 <code>Main.java</code> 时，由于用到了 <code>Main</code>，因此，JVM 首先会把 <code>Main.class</code> 加载到内存。然而，并不会加载 <code>Person.class</code>，除非程序执行到 <code>create()</code> 方法，JVM 发现需要加载 <code>Person</code> 类时，才会首次加载 <code>Person.class</code> 。如果没有执行 <code>create()</code> 方法，那么 <code>Person.class</code> 根本就不会被加载。</p></div><p>这就是 JVM 动态加载 <code>class</code> 的特性。</p><p>动态加载 <code>class</code> 的特性对于 Java 程序非常重要。利用 JVM 动态加载 <code>class</code> 的特性，我们才能 <strong><em>在运行期根据条件加载不同的实现类</em></strong> 。</p><blockquote><p>例如，Commons Logging 总是优先使用 Log4j ，只有当 Log4j 不存在时，才使用 JDK 的 logging 。</p></blockquote><p>利用 JVM 动态加载特性，大致的实现代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Commons Logging 优先使用 Log4j:</span>
<span class="token class-name">LogFactory</span> factory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClassPresent</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.logging.log4j.Logger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    factory <span class="token operator">=</span> <span class="token function">createLog4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    factory <span class="token operator">=</span> <span class="token function">createJdkLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isClassPresent</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是为什么我们只需要把 Log4j 的 jar 包放到 classpath 中，Commons Logging 就会自动使用 Log4j 的原因。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li>JVM 为每个加载的 <code>class</code> 及 <code>interface</code> 创建了对应的 <code>Class</code> 实例来保存 <code>class</code> 及 <code>interface</code> 的所有信息；</li><li>获取一个 <code>class</code> 对应的 <code>Class</code> 实例后，就可以获取该 <code>class</code> 的所有信息；</li><li>通过 <code>Class</code> 实例获取 <code>class</code> 信息的方法称为反射（ Reflection ）；</li><li>JVM 总是动态加载 <code>class</code>，可以在运行期根据条件来控制加载 <code>class</code> 。</li></ul>`,55);function b(f,y){const n=p("router-link");return o(),l("div",null,[s("details",r,[m,s("nav",v,[s("ul",null,[s("li",null,[a(n,{to:"#🍀-如何获取一个-class-的-class-实例"},{default:e(()=>[c("🍀 如何获取一个 class 的 Class 实例？")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#方法一"},{default:e(()=>[c("方法一：")]),_:1})]),s("li",null,[a(n,{to:"#🌸-方法二"},{default:e(()=>[c("🌸 方法二：")]),_:1})]),s("li",null,[a(n,{to:"#方法三"},{default:e(()=>[c("方法三：")]),_:1})])])]),s("li",null,[a(n,{to:"#🍀-动态加载"},{default:e(()=>[c("🍀 动态加载")]),_:1})]),s("li",null,[a(n,{to:"#🍀-小结"},{default:e(()=>[c("🍀 小结")]),_:1})])])])]),g])}const w=t(k,[["render",b],["__file","1.html.vue"]]);export{w as default};
