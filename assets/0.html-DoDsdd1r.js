import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as n,a as e,b as t,w as l,d as c,e as i}from"./app-CvlAI_tu.js";const h={},s={class:"hint-container details"},u=e("summary",null,"目录",-1),p={class:"table-of-contents"},_=c('<blockquote><p>第 2 章 有意义的命名</p></blockquote><h2 id="🍀-1-介绍" tabindex="-1"><a class="header-anchor" href="#🍀-1-介绍" aria-hidden="true">#</a> 🍀 1. 介绍</h2><p>软件中随处可见命名。我们给变量、函数、参数、类和包命名。</p><p>我们给源代码及源代码所在目录命名。</p><p>这么多命名要做，不妨做好它。</p><p>下文列出了取个好名字的几条简单规则。</p><h2 id="🍀-2-名副其实-见名知意" tabindex="-1"><a class="header-anchor" href="#🍀-2-名副其实-见名知意" aria-hidden="true">#</a> 🍀 2. 名副其实, 见名知意</h2><p>变量名<u>太随意</u>，haha、list1、ok、theList 这些都没啥意义</p><h2 id="🍀-3-避免误导" tabindex="-1"><a class="header-anchor" href="#🍀-3-避免误导" aria-hidden="true">#</a> 🍀 3. 避免误导</h2><p>包含 List、import、java 等类名、关键字或特殊字；</p><p>字母 o 与数字 0，字母 l 与数字 1 等提防使用<u>不同之处较小</u>的名称。</p><p>比如：</p><ul><li><code>XYZControllerForEfficientHandlingOfStrings</code></li><li><code>XYZControllerForEfficientStorageOfStrings</code></li></ul><h2 id="🍀-4-做有意义的区分" tabindex="-1"><a class="header-anchor" href="#🍀-4-做有意义的区分" aria-hidden="true">#</a> 🍀 4. 做有意义的区分</h2><p>反面教材，变量名：a1、a2、a3</p><ul><li><p>避免冗余，不要出现 Variable、表字段中避免出现 table、字符串</p></li><li><p>避免出现 nameString，直接 name 就行，知道是字符串类型</p></li></ul><p>再比如：</p><ul><li><p>定义了两个类：Customer 类和 CustomerObject 类，如何区分？</p></li><li><p>定义了三个方法： <code>getActiveAccount()</code> 、<code>getActiveAccounts()</code> 、 <code>getActiveAccountInfo()</code> ，如何区分？</p></li></ul><h2 id="🍀-5-使用读得出来的名称" tabindex="-1"><a class="header-anchor" href="#🍀-5-使用读得出来的名称" aria-hidden="true">#</a> 🍀 5. 使用读得出来的名称</h2><p>不要使用<u>自己拼凑出来的单词</u>，比如： xsxm (学生姓名)；genymdhms (生成日期，年、月、日、时、分、秒)</p><p>所谓的 <strong>驼峰命名法</strong>，尽量使用完整的单词</p><h2 id="🍀-6-使用可搜索的名称" tabindex="-1"><a class="header-anchor" href="#🍀-6-使用可搜索的名称" aria-hidden="true">#</a> 🍀 6. 使用可搜索的名称</h2><p>一些常量，最好<u>不直接使用数字</u>，而指定一个变量名，这个变量名可以便于搜索到.</p><p>比如：找 MAX_CLASSES_PER_STUDENT 很容易，但想找数字 7 就麻烦了。</p><h2 id="🍀-7-避免使用编码" tabindex="-1"><a class="header-anchor" href="#🍀-7-避免使用编码" aria-hidden="true">#</a> 🍀 7. 避免使用编码</h2><h3 id="_7-1-匈牙利语标记法" tabindex="-1"><a class="header-anchor" href="#_7-1-匈牙利语标记法" aria-hidden="true">#</a> 7.1 匈牙利语标记法</h3><p>即变量名表明该变量数据类型的小写字母开始。</p><p>例如， szCmdLine 的前缀 sz 表示 “以零结束的字符串”。</p><h3 id="_7-2-成员前缀" tabindex="-1"><a class="header-anchor" href="#_7-2-成员前缀" aria-hidden="true">#</a> 7.2 成员前缀</h3><p>避免使用前缀，但是 Android 中一个比较好的喜欢用 m 表示私有等，个人感觉比较好</p><h3 id="_7-3-接口和实现" tabindex="-1"><a class="header-anchor" href="#_7-3-接口和实现" aria-hidden="true">#</a> 7.3 接口和实现</h3><p>作者不喜欢把接口使用 <code>I</code> 来开头，实现也希望只是在后面添加 <code>Imp</code></p>',32);function f(m,b){const a=o("router-link");return r(),n("div",null,[e("details",s,[u,e("nav",p,[e("ul",null,[e("li",null,[t(a,{to:"#🍀-1-介绍"},{default:l(()=>[i("🍀 1. 介绍")]),_:1})]),e("li",null,[t(a,{to:"#🍀-2-名副其实-见名知意"},{default:l(()=>[i("🍀 2. 名副其实, 见名知意")]),_:1})]),e("li",null,[t(a,{to:"#🍀-3-避免误导"},{default:l(()=>[i("🍀 3. 避免误导")]),_:1})]),e("li",null,[t(a,{to:"#🍀-4-做有意义的区分"},{default:l(()=>[i("🍀 4. 做有意义的区分")]),_:1})]),e("li",null,[t(a,{to:"#🍀-5-使用读得出来的名称"},{default:l(()=>[i("🍀 5. 使用读得出来的名称")]),_:1})]),e("li",null,[t(a,{to:"#🍀-6-使用可搜索的名称"},{default:l(()=>[i("🍀 6. 使用可搜索的名称")]),_:1})]),e("li",null,[t(a,{to:"#🍀-7-避免使用编码"},{default:l(()=>[i("🍀 7. 避免使用编码")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#_7-1-匈牙利语标记法"},{default:l(()=>[i("7.1 匈牙利语标记法")]),_:1})]),e("li",null,[t(a,{to:"#_7-2-成员前缀"},{default:l(()=>[i("7.2 成员前缀")]),_:1})]),e("li",null,[t(a,{to:"#_7-3-接口和实现"},{default:l(()=>[i("7.3 接口和实现")]),_:1})])])])])])]),_])}const A=d(h,[["render",f],["__file","0.html.vue"]]);export{A as default};
