import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as o,a,b as s,w as t,d as c,e}from"./app-CvlAI_tu.js";const l={},u={class:"hint-container details"},d=a("summary",null,"目录",-1),k={class:"table-of-contents"},m=c(`<p>Reader 是带编码转换器的 InputStream，它把 byte 转换为 char，而 Writer 就是带编码转换器的 OutputStream，它把 char 转换为 byte 并输出。</p><p>Writer 和 OutputStream 的区别如下：</p><table><thead><tr><th>OutputStream</th><th>Writer</th></tr></thead><tbody><tr><td>字节流，以 byte 为单位</td><td>字符流，以 char 为单位</td></tr><tr><td>写入字节（0~255）：void write(int b)</td><td>写入字符（0~65535）：void write(int c)</td></tr><tr><td>写入字节数组：void write(byte[] b)</td><td>写入字符数组：void write(char[] c)</td></tr><tr><td>无对应方法</td><td>写入 String：void write(String s)</td></tr></tbody></table><p>Writer 是所有字符输出流的超类，它提供的方法主要有：</p><ul><li>写入一个字符（0~65535）：void write(int c)；</li><li>写入字符数组的所有字符：void write(char[] c)；</li><li>写入 String 表示的所有字符：void write(String s)。</li></ul><h2 id="🍀-filewriter" tabindex="-1"><a class="header-anchor" href="#🍀-filewriter" aria-hidden="true">#</a> 🍀 FileWriter</h2><p>FileWriter 就是向文件中写入字符流的 Writer。它的使用方法和 FileReader 类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;readme.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入单个字符</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入 char[]</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入 String</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-chararraywriter" tabindex="-1"><a class="header-anchor" href="#🍀-chararraywriter" aria-hidden="true">#</a> 🍀 CharArrayWriter</h2><p>CharArrayWriter 可以在内存中创建一个 Writer，它的作用实际上是构造一个缓冲区，可以写入 char，最后得到写入的 char[] 数组，这和 ByteArrayOutputStream 非常类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">CharArrayWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;A&#39;, &#39;B&#39;, &#39;C&#39; }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-stringwriter" tabindex="-1"><a class="header-anchor" href="#🍀-stringwriter" aria-hidden="true">#</a> 🍀 StringWriter</h2><p>StringWriter 也是一个基于内存的 Writer，它和 CharArrayWriter 类似。实际上，StringWriter 在内部维护了一个 StringBuffer，并对外提供了 Writer 接口。</p><h2 id="🍀-outputstreamwriter" tabindex="-1"><a class="header-anchor" href="#🍀-outputstreamwriter" aria-hidden="true">#</a> 🍀 OutputStreamWriter</h2><p>除了 CharArrayWriter 和 StringWriter 外，普通的 Writer 实际上是基于 OutputStream 构造的，它接收 char，然后在内部自动转换成一个或多个 byte，并写入 OutputStream。因此，OutputStreamWriter 就是一个将任意的 OutputStream 转换为 Writer 的转换器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO:</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码实际上就是 FileWriter 的一种实现方式。这和上一节的 InputStreamReader 是一样的。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Writer 定义了所有字符输出流的超类：</p><ul><li>FileWriter 实现了文件字符流输出；</li><li>CharArrayWriter 和 StringWriter 在内存中模拟一个字符流输出。</li></ul><p>使用 try (resource) 保证 Writer 正确关闭。</p><p>Writer 是基于 OutputStream 构造的，可以通过 OutputStreamWriter 将 OutputStream 转换为 Writer，转换时需要指定编码。</p>`,22);function h(v,w){const n=p("router-link");return i(),o("div",null,[a("details",u,[d,a("nav",k,[a("ul",null,[a("li",null,[s(n,{to:"#🍀-filewriter"},{default:t(()=>[e("🍀 FileWriter")]),_:1})]),a("li",null,[s(n,{to:"#🍀-chararraywriter"},{default:t(()=>[e("🍀 CharArrayWriter")]),_:1})]),a("li",null,[s(n,{to:"#🍀-stringwriter"},{default:t(()=>[e("🍀 StringWriter")]),_:1})]),a("li",null,[s(n,{to:"#🍀-outputstreamwriter"},{default:t(()=>[e("🍀 OutputStreamWriter")]),_:1})]),a("li",null,[s(n,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),m])}const y=r(l,[["render",h],["__file","9.html.vue"]]);export{y as default};
