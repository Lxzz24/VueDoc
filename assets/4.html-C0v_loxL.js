import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as e,d as i,e as t}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/20220617163325-CGIskcSY.png",d="/VueDoc/assets/20220617163629-Cky4q1Zv.png",k={},r={class:"hint-container details"},m=n("summary",null,"目录",-1),v={class:"table-of-contents"},g=i(`<p>我们已经知道，Java 的数据类型分两种：</p><ul><li>基本类型： <code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>boolean</code>，<code>float</code>，<code>double</code>，<code>char</code></li><li>引用类型：所有 <code>class</code> 和 <code>interface</code> 类型</li></ul><p>引用类型可以赋值为 <code>null</code>，表示空，但基本类型不能赋值为 <code>null</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// compile error!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，如何把一个基本类型视为对象（引用类型）？</p><p>比如，想要把 <code>int</code> 基本类型变成一个引用类型，我们可以定义一个 <code>Integer</code> 类，它只包含一个实例字段 <code>int</code>，这样，<code>Integer</code> 类就可以视为 <code>int</code> 的包装类（Wrapper Class）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好了 <code>Integer</code> 类，我们就可以把 <code>int</code> 和 <code>Integer</code> 互相转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n3 <span class="token operator">=</span> n2<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，因为包装类型非常有用，Java 核心库为每种基本类型都提供了对应的包装类型：</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以直接使用，并不需要自己去定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Integer:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过 new 操作符创建 Integer 实例 (不推荐使用, 会有编译警告):</span>
        <span class="token class-name">Integer</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过静态方法 valueOf(int) 创建 Integer 实例:</span>
        <span class="token class-name">Integer</span> n2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过静态方法 valueOf(String) 创建 Integer 实例:</span>
        <span class="token class-name">Integer</span> n3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n3<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-auto-boxing" tabindex="-1"><a class="header-anchor" href="#🍀-auto-boxing" aria-hidden="true">#</a> 🍀 Auto Boxing</h2><p>因为 <code>int</code> 和 <code>Integer</code> 可以互相转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，Java 编译器可以帮助我们自动在 <code>int</code> 和 <code>Integer</code> 之间转型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用 Integer.valueOf(int)</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 编译器自动使用 Integer.intValue()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种直接把 <code>int</code> 变为 <code>Integer</code> 的赋值写法，称为 <strong><em>自动装箱</em></strong> （Auto Boxing），反过来，把 <code>Integer</code> 变为 <code>int</code> 的赋值写法，称为 <strong><em>自动拆箱</em></strong> （Auto Unboxing）。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。</p></div><p><strong><em>装箱和拆箱会影响代码的执行效率</em></strong> ，因为编译后的 class 代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报 <code>NullPointerException</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// NullPointerException</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-不变类" tabindex="-1"><a class="header-anchor" href="#🍀-不变类" aria-hidden="true">#</a> 🍀 不变类</h2><p>所有的包装类型都是不变类。我们查看 <code>Integer</code> 的源码可知，它的核心代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，一旦创建了 <code>Integer</code> 对象，该对象就是不变的。</p><p>对两个 <code>Integer</code> 实例进行比较要特别注意：绝对不能用 <code>==</code> 比较，因为 <code>Integer</code> 是引用类型，必须使用 <code>equals()</code> 比较：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// == or equals?</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x == y:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;m == n:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x.equals(y):&quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;m.equals(n):&quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察结果的童鞋可以发现，<code>==</code> 比较，较小的两个相同的 <code>Integer</code> 返回 <code>true</code>，较大的两个相同的 <code>Integer</code> 返回 <code>false</code>，这是因为 <code>Integer</code> 是不变类，编译器把 <code>Integer x = 127;</code> 自动变为 <code>Integer x = Integer.valueOf(127);</code>，为了节省内存，<code>Integer.valueOf()</code> 对于较小的数，始终返回相同的实例，因此，<code>==</code> 比较 “恰好” 为 <code>true</code>，但我们绝不能因为 Java 标准库的 <code>Integer</code> 内部有缓存优化就用 <code>==</code> 比较，必须用 <code>equals()</code> 方法比较两个 <code>Integer</code> 。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>按照语义编程，而不是针对特定的底层实现去 “优化”。</p></div><p>因为 <code>Integer.valueOf()</code> 可能始终返回同一个 <code>Integer</code> 实例，因此，在我们自己创建 <code>Integer</code> 的时候，以下两种方法：</p><ul><li>方法 1 ： <code>Integer n = new Integer(100);</code></li><li>方法 2 ： <code>Integer n = Integer.valueOf(100);</code></li></ul><p>方法 2 更好，因为方法 1 总是创建新的 <code>Integer</code> 实例，方法 2 把内部优化留给 <code>Integer</code> 的实现者去做，即使在当前版本没有优化，也有可能在下一个版本进行优化。</p><p>我们把<em>能创建“新”对象的静态方法</em>称为 <strong><em>静态工厂方法</em></strong> 。<code>Integer.valueOf()</code> 就是静态工厂方法，它尽可能地返回缓存的实例以节省内存。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>创建新对象时，优先选用静态工厂方法而不是 <code>new</code> 操作符。</p></div><p>如果我们考察 <code>Byte.valueOf()</code> 方法的源码，可以看到，标准库返回的 <code>Byte</code> 实例全部是缓存实例，但调用者并不关心静态工厂方法以何种方式创建新实例还是直接返回缓存的实例。</p><h2 id="🍀-进制转换" tabindex="-1"><a class="header-anchor" href="#🍀-进制转换" aria-hidden="true">#</a> 🍀 进制转换</h2><p><code>Integer</code> 类本身还提供了大量方法，例如，最常用的静态方法 <code>parseInt()</code> 可以把字符串解析成一个整数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
<span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 256, 因为按 16 进制解析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Integer</code> 还可以把整数格式化为指定进制的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;100&quot;, 表示为 10 进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;2s&quot;, 表示为 36 进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;64&quot;, 表示为 16 进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;144&quot;, 表示为 8 进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1100100&quot;, 表示为 2 进制</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>上述方法的输出都是 <code>String</code>，在计算机内存中，只用二进制表示，不存在十进制或十六进制的表示方法。</p></div><p><code>int n = 100</code> 在内存中总是以 4 字节的二进制表示：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们经常使用的 <code>System.out.println(n);</code> 是依靠核心库自动把整数格式化为 10 进制输出并显示在屏幕上，使用 <code>Integer.toHexString(n)</code> 则通过核心库自动把整数格式化为 16 进制。</p><p>这里我们注意到程序设计的一个重要原则： <strong><em>数据的存储和显示要分离</em></strong> 。</p><p>Java 的包装类型还定义了一些有用的静态变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// boolean 只有两个值 true/false，其包装类型只需要引用 Boolean 提供的静态字段:</span>
<span class="token class-name">Boolean</span> t <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> f <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
<span class="token comment">// int 可表示的最大 / 最小值:</span>
<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 2147483647</span>
<span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// -2147483648</span>
<span class="token comment">// long 类型占用的 bit 和 byte 数量:</span>
<span class="token keyword">int</span> sizeOfLong <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">;</span> <span class="token comment">// 64 (bits)</span>
<span class="token keyword">int</span> bytesOfLong <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">BYTES</span><span class="token punctuation">;</span> <span class="token comment">// 8 (bytes)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，所有的整数和浮点数的包装类型都继承自 <code>Number</code>，因此，可以非常方便地直接通过包装类型获取各种基本类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 向上转型为 Number:</span>
<span class="token class-name">Number</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取 byte, int, long, float, double:</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> ln <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> f <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-处理无符号整型" tabindex="-1"><a class="header-anchor" href="#🍀-处理无符号整型" aria-hidden="true">#</a> 🍀 处理无符号整型</h2><p>在 Java 中，并没有无符号整型（Unsigned）的基本数据类型。<code>byte</code>、<code>short</code>、<code>int</code> 和 <code>long</code> 都是带符号整型，最高位是符号位。而 C 语言则提供了 CPU 支持的全部数据类型，包括无符号整型。无符号整型和有符号整型的转换在 Java 中就需要借助包装类型的静态方法完成。</p><p>例如，<code>byte</code> 是有符号整型，范围是 <code>-128</code> ~ <code>+127</code>，但如果把 <code>byte</code> 看作无符号整型，它的范围就是 <code>0</code> ~ <code>255</code> 。我们把一个负的 <code>byte</code> 按无符号整型转换为 <code>int</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Byte</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> y <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">toUnsignedInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 255</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">toUnsignedInt</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 127</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>byte</code> 的 <code>-1</code> 的二进制表示是 <code>11111111</code>，以无符号整型转换后的 <code>int</code> 就是 <code>255</code> 。</p><p>类似的，可以把一个 <code>short</code> 按 <code>unsigned</code> 转换为 <code>int</code>，把一个 <code>int</code> 按 <code>unsigned</code> 转换为 <code>long</code> 。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li>Java 核心库提供的包装类型可以把基本类型包装为 <code>class</code> ；</li><li>自动装箱和自动拆箱都是在编译期完成的（JDK &gt;= 1.5）；</li><li>装箱和拆箱会影响执行效率，且拆箱时可能发生 <code>NullPointerException</code> ；</li><li>包装类型的比较必须使用 <code>equals()</code> ；</li><li>整数和浮点数的包装类型都继承自 <code>Number</code> ；</li><li>包装类型提供了大量实用方法。</li></ul>`,58);function b(y,f){const s=o("router-link");return c(),l("div",null,[n("details",r,[m,n("nav",v,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-auto-boxing"},{default:e(()=>[t("🍀 Auto Boxing")]),_:1})]),n("li",null,[a(s,{to:"#🍀-不变类"},{default:e(()=>[t("🍀 不变类")]),_:1})]),n("li",null,[a(s,{to:"#🍀-进制转换"},{default:e(()=>[t("🍀 进制转换")]),_:1})]),n("li",null,[a(s,{to:"#🍀-处理无符号整型"},{default:e(()=>[t("🍀 处理无符号整型")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:e(()=>[t("🍀 小结")]),_:1})])])])]),g])}const h=p(k,[["render",b],["__file","4.html.vue"]]);export{h as default};
