import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as e,c,a as n,b as t,w as p,d as i,e as l}from"./app-CvlAI_tu.js";const u={},d={class:"hint-container details"},k=n("summary",null,"目录",-1),r={class:"table-of-contents"},v=i(`<p>使用 <code>ReentrantLock</code> 比直接使用 <code>synchronized</code> 更安全，可以替代 <code>synchronized</code> 进行线程同步。</p><p>但是，<code>synchronized</code> 可以配合 <code>wait</code> 和 <code>notify</code> 实现线程在条件不满足时等待，条件满足时唤醒，用 <code>ReentrantLock</code> 我们怎么编写 <code>wait</code> 和 <code>notify</code> 的功能呢？</p><p>答案是使用 <code>Condition</code> 对象来实现 <code>wait</code> 和 <code>notify</code> 的功能。</p><p>我们仍然以 <code>TaskQueue</code> 为例，把前面用 <code>synchronized</code> 实现的功能通过 <code>ReentrantLock</code> 和 <code>Condition</code> 来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TaskQueue</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，使用 <code>Condition</code> 时，引用的 <code>Condition</code> 对象必须从 <code>Lock</code> 实例的 <code>newCondition()</code> 返回，这样才能获得一个绑定了 <code>Lock</code> 实例的 <code>Condition</code> 实例。</p><p><code>Condition</code> 提供的 <code>await()</code>、<code>signal()</code>、<code>signalAll()</code> 原理和 <code>synchronized</code> 锁对象的 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 是一致的，并且其行为也是一样的：</p><ul><li><code>await()</code> 会释放当前锁，进入等待状态；</li><li><code>signal()</code> 会唤醒某个等待线程；</li><li><code>signalAll()</code> 会唤醒所有等待线程；</li><li>唤醒线程从 <code>await()</code> 返回后需要重新获得锁。</li></ul><p>此外，和 <code>tryLock()</code> 类似，<code>await()</code> 可以在等待指定时间后，如果还没有被其他线程通过 <code>signal()</code> 或 <code>signalAll()</code> 唤醒，可以自己醒来：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 被其他线程唤醒</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定时间内没有被其他线程唤醒</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，使用 <code>Condition</code> 配合 <code>Lock</code>，我们可以实现更灵活的线程同步。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p><code>Condition</code> 可以替代 <code>wait</code> 和 <code>notify</code>；</p><p><code>Condition</code> 对象必须从 <code>Lock</code> 对象获取。</p>`,14);function m(b,w){const s=o("router-link");return e(),c("div",null,[n("details",d,[k,n("nav",r,[n("ul",null,[n("li",null,[t(s,{to:"#🍀-小结"},{default:p(()=>[l("🍀 小结")]),_:1})])])])]),v])}const _=a(u,[["render",m],["__file","11.html.vue"]]);export{_ as default};
