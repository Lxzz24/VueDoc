import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,a as n,b as s,w as e,e as a,d as p}from"./app-CvlAI_tu.js";const d={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=p('<p>正则表达式的匹配规则是从左到右按规则匹配。我们首先来看如何使用正则表达式来做精确匹配。</p><p>对于正则表达式 abc 来说，它只能精确地匹配字符串 <code>abc</code>，不能匹配 <code>ab</code>，<code>Abc</code>，<code>abcd</code> 等其他任何字符串。</p><p>如果正则表达式有特殊字符，那就需要用 <code>\\</code> 转义。例如，正则表达式 <code>a\\&amp;c</code>，其中 <code>\\&amp;</code> 是用来匹配特殊字符 <code>&amp;</code> 的，它能精确匹配字符串 <code>a&amp;c</code>，但不能匹配 <code>ac</code>、<code>a-c</code>、<code>a&amp;&amp;c</code> 等。</p><p>要注意正则表达式在 Java 代码中也是一个字符串，所以，对于正则表达式 <code>a\\&amp;c</code> 来说，对应的 Java 字符串是 <code>a\\\\&amp;c``，因为 </code>` 也是 Java 字符串的转义字符，两个 <code>\\\\</code> 实际上表示的是一个 <code>\\</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> re1 <span class="token operator">=</span> `abc`<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`abc`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`<span class="token class-name">Abc</span>`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`abcd`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> re2 <span class="token operator">=</span> `a\\\\<span class="token operator">&amp;</span>c`<span class="token punctuation">;</span> <span class="token comment">// 对应的正则是a\\&amp;c</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`a<span class="token operator">&amp;</span>c`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`a<span class="token operator">-</span>c`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`a<span class="token operator">&amp;&amp;</span>c`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想匹配非 ASCII 字符，例如中文，那就用 <code>\\u####</code> 的十六进制表示，例如：<code>a\\u548cc</code> 匹配字符串 <code>a 和 c``，中文字符和的 Unicode 编码是 </code>548c` 。</p><h2 id="🍀-匹配任意字符" tabindex="-1"><a class="header-anchor" href="#🍀-匹配任意字符" aria-hidden="true">#</a> 🍀 匹配任意字符</h2><p>精确匹配实际上用处不大，因为我们直接用 <code>String.equals()</code> 就可以做到。大多数情况下，我们想要的匹配规则更多的是模糊匹配。我们可以用 <code>.</code> 匹配一个任意字符。</p><p>例如，正则表达式 <code>a.c</code> 中间的 <code>.</code> 可以匹配一个任意字符，例如，下面的字符串都可以被匹配：</p><ul><li><code>abc</code>，因为 <code>.</code> 可以匹配字符 <code>b</code> ；</li><li><code>a&amp;c</code>，因为 <code>.</code> 可以匹配字符 <code>&amp;</code> ；</li><li><code>acc</code>，因为 <code>.</code> 可以匹配字符 <code>c</code> 。</li></ul><p>但它不能匹配 <code>ac</code>、<code>a&amp;&amp;c</code>，因为 <code>.</code> 匹配一个字符且仅限一个字符。</p><h2 id="🍀-匹配数字" tabindex="-1"><a class="header-anchor" href="#🍀-匹配数字" aria-hidden="true">#</a> 🍀 匹配数字</h2><p>用 <code>.</code> 可以匹配任意字符，这个口子开得有点大。如果我们只想匹配 0~9 这样的数字，可以用 <code>\\d</code> 匹配。例如，正则表达式 <code>00\\d</code> 可以匹配：</p><ul><li><code>007</code>，因为 <code>\\d</code> 可以匹配字符 <code>7</code> ；</li><li><code>008</code>，因为 <code>\\d</code> 可以匹配字符 <code>8</code> 。</li></ul><p>它不能匹配 <code>00A</code>，<code>0077</code>，因为 <code>\\d</code> 仅限单个数字字符。</p><h2 id="🍀-匹配常用字符" tabindex="-1"><a class="header-anchor" href="#🍀-匹配常用字符" aria-hidden="true">#</a> 🍀 匹配常用字符</h2><p>用 <code>\\w</code> 可以匹配一个字母、数字或下划线，<code>w</code> 的意思是 <code>word</code> 。例如，<code>java\\w</code> 可以匹配：</p><ul><li><code>javac</code>，因为 <code>\\w</code> 可以匹配英文字符 <code>c</code> ；</li><li><code>java9</code>，因为 <code>\\w</code> 可以匹配数字字符 <code>9</code> ；</li><li><code>java_</code>，因为 <code>\\w</code> 可以匹配下划线 <code>_</code> 。</li></ul><p>它不能匹配 <code>java#</code>，``java<code>，因为 </code>\\w<code>不能匹配</code>#`、空格等字符。</p><h2 id="🍀-匹配空格字符" tabindex="-1"><a class="header-anchor" href="#🍀-匹配空格字符" aria-hidden="true">#</a> 🍀 匹配空格字符</h2><p>用 <code>\\s</code> 可以匹配一个空格字符，注意空格字符不但包括空格，还包括 <code>tab</code> 字符（在 Java 中用 <code>\\t</code> 表示）。例如，<code>a\\sc</code> 可以匹配：</p><ul><li><code>a c</code>，因为 <code>\\s</code> 可以匹配空格字符；</li><li><code>a c</code>，因为 <code>\\s</code> 可以匹配 <code>tab</code> 字符 <code>\\t</code> 。</li></ul><p>它不能匹配 <code>ac</code>，``abc` 等。</p><h2 id="🍀-匹配非数字" tabindex="-1"><a class="header-anchor" href="#🍀-匹配非数字" aria-hidden="true">#</a> 🍀 匹配非数字</h2><p>用 <code>\\d</code> 可以匹配一个数字，而 <code>\\D</code> 则匹配一个非数字。例如，<code>00\\D</code> 可以匹配：</p><ul><li><code>00A</code>，因为 <code>\\D</code> 可以匹配非数字字符 <code>A</code> ；</li><li><code>00#</code>，因为 <code>\\D</code> 可以匹配非数字字符 <code>#</code> 。</li></ul><p><code>00\\d</code> 可以匹配的字符串 <code>007</code>，``008<code> 等，</code>00\\D` 是不能匹配的。</p><p>类似的，<code>\\W</code> 可以匹配 <code>\\w</code> 不能匹配的字符，<code>\\S</code> 可以匹配 <code>\\s</code> 不能匹配的字符，这几个正好是反着来的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> re1 <span class="token operator">=</span> `java\\\\d`<span class="token punctuation">;</span> <span class="token comment">// 对应的正则是java\\d</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`java9`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`java10`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`javac`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> re2 <span class="token operator">=</span> `java\\\\<span class="token class-name">D</span>`<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`javax`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`java#`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`java5`<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-重复匹配" tabindex="-1"><a class="header-anchor" href="#🍀-重复匹配" aria-hidden="true">#</a> 🍀 重复匹配</h2><p>我们用 <code>\\d</code> 可以匹配一个数字，例如，<code>A\\d</code> 可以匹配 <code>A0</code>，<code>A1</code>，如果要匹配多个数字，比如 <code>A380</code>，怎么办？</p><p>修饰符 <code>*</code> 可以匹配任意个字符，包括 0 个字符。我们用 <code>A\\d*</code> 可以匹配：</p><ul><li>A ：因为 <code>\\d*</code> 可以匹配 0 个数字；</li><li>A0 ：因为 <code>\\d*</code> 可以匹配 1 个数字 0；</li><li>A380 ：因为 <code>\\d*</code> 可以匹配多个数字 380。</li></ul><p>修饰符 + 可以匹配至少一个字符。我们用 A\\d+ 可以匹配：</p><ul><li>A0：因为 \\d+ 可以匹配 1 个数字 0；</li><li>A380：因为 \\d+ 可以匹配多个数字 380。</li></ul><p>但它无法匹配 <code>A</code>，因为修饰符 + 要求至少一个字符。</p><p>修饰符? 可以匹配 0 个或一个字符。我们用 A\\d? 可以匹配：</p><ul><li>A：因为 \\d? 可以匹配 0 个数字；</li><li>A0：因为 \\d? 可以匹配 1 个数字 0。</li></ul><p>但它无法匹配 <code>A33</code>，因为修饰符? 超过 1 个字符就不能匹配了。</p><p>如果我们想精确指定 n 个字符怎么办？用修饰符 {n} 就可以。A\\d{3}可以精确匹配：</p><ul><li>A380：因为 \\d{3} 可以匹配 3 个数字 380。</li></ul><p>如果我们想指定匹配 n~m 个字符怎么办？用修饰符 {n,m} 就可以。A\\d{3,5}可以精确匹配：</p><ul><li>A380：因为 \\d{3,5} 可以匹配 3 个数字 380；</li><li>A3800：因为 \\d{3,5} 可以匹配 4 个数字 3800；</li><li>A38000：因为 \\d{3,5} 可以匹配 5 个数字 38000。</li></ul><p>如果没有上限，那么修饰符 {n,} 就可以匹配至少 n 个字符。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>请编写一个正则表达式匹配国内的电话号码规则：3~4 位区号加 7~8 位电话，中间用 - 连接，例如： 010-12345678 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> re <span class="token operator">=</span> `\\\\d`<span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>`<span class="token number">010</span><span class="token operator">-</span><span class="token number">12345678</span>`<span class="token punctuation">,</span> `<span class="token number">020</span><span class="token operator">-</span><span class="token number">9999999</span>`<span class="token punctuation">,</span> `<span class="token number">0755</span><span class="token operator">-</span><span class="token number">7654321</span>`<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`测试失败<span class="token operator">:</span>` <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>`<span class="token number">010</span> <span class="token number">12345678</span>`<span class="token punctuation">,</span> `<span class="token constant">A20</span><span class="token operator">-</span><span class="token number">9999999</span>`<span class="token punctuation">,</span> `<span class="token number">0755</span><span class="token operator">-</span><span class="token number">7654.321</span>`<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`测试失败<span class="token operator">:</span>` <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>`测试成功<span class="token operator">!</span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',47),b={href:"https://gitee.com/liaoxuefeng/learn-java/blob/master/practices/Java%E6%95%99%E7%A8%8B/110.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.1252599548343744/20.%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99.1304066080636961/regex-tel.zip?utm_source=blog_lxf",target:"_blank",rel:"noopener noreferrer"},y=p('<p>进阶：国内区号必须以 0 开头，而电话号码不能以 0 开头，试修改正则表达式，使之能更精确地匹配。</p><p>提示：\\d 和 \\D 这种简单的规则暂时做不到，我们需要更复杂规则，后面会详细讲解。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>单个字符的匹配规则如下：</p><table><thead><tr><th style="text-align:center;">正则表达式</th><th style="text-align:center;">规则</th><th style="text-align:center;">可以匹配</th></tr></thead><tbody><tr><td style="text-align:center;">A</td><td style="text-align:center;">指定字符</td><td style="text-align:center;">A</td></tr><tr><td style="text-align:center;">\\u548c</td><td style="text-align:center;">指定 Unicode 字符</td><td style="text-align:center;">和</td></tr><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:center;">任意字符</td><td style="text-align:center;">a, b, &amp;, 0</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">0-9</td><td style="text-align:center;">0, 1, 2, ... , 9</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">a-z, A-Z, 0-9, _</td><td style="text-align:center;">a, A, 0, _, <code>..</code> <code>.</code></td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">空格，Tab 键</td><td style="text-align:center;">&#39; &#39;，&#39; &#39;</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">非数字</td><td style="text-align:center;">a, A, &amp;, _, <code>..</code> <code>.</code></td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">非 \\w</td><td style="text-align:center;">&amp;, @, 中, <code>..</code> <code>.</code></td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">非 \\s</td><td style="text-align:center;">a, A, @, _, <code>..</code> <code>.</code></td></tr></tbody></table><p>多个字符的匹配规则如下：</p>',6),h=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"正则表达式"),n("th",{style:{"text-align":"center"}},"规则"),n("th",{style:{"text-align":"center"}},"可以匹配")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"AB*"),n("td",{style:{"text-align":"center"}},"匹配任意个数字符"),n("td",{style:{"text-align":"center"}},[a("A，AB, ABB, ABBB, "),n("code",null,".."),a(),n("code",null,".")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},"AB+"),n("td",{style:{"text-align":"center"}},"至少一个字符"),n("td",{style:{"text-align":"center"}},[a("AB, ABB, ABBB, "),n("code",null,".."),a(),n("code",null,".")])]),n("tr",null,[n("td",{style:{"text-align":"center"}},"AB?"),n("td",{style:{"text-align":"center"}},"0 个或 1 个字符"),n("td",{style:{"text-align":"center"}},"A，AB")]),n("tr",null,[n("td",{style:{"text-align":"center"},3:""},"AB"),n("td",{style:{"text-align":"center"}},"指定个数字符"),n("td",{style:{"text-align":"center"}},"ABBB")]),n("tr",null,[n("td",{style:{"text-align":"center"},"1,":"",3:""},"AB"),n("td",{style:{"text-align":"center"}},"指定范围个数字符"),n("td",{style:{"text-align":"center"}},"AB, ABB, ABBB")]),n("tr",null,[n("td",{style:{"text-align":"center"},"2,":""},"AB"),n("td",{style:{"text-align":"center"}},"至少 n 个字符"),n("td",{style:{"text-align":"center"}},[a("ABB, ABBB, "),n("code",null,".."),a(),n("code",null,".")])]),n("tr",null,[n("td",{style:{"text-align":"center"},"0,":"",3:""},"AB"),n("td",{style:{"text-align":"center"}},"最多 n 个字符"),n("td",{style:{"text-align":"center"}},"A, AB, ABB, ABBB")])])],-1);function g(x,f){const t=c("router-link"),o=c("ExternalLinkIcon");return i(),u("div",null,[n("details",r,[k,n("nav",m,[n("ul",null,[n("li",null,[s(t,{to:"#🍀-匹配任意字符"},{default:e(()=>[a("🍀 匹配任意字符")]),_:1})]),n("li",null,[s(t,{to:"#🍀-匹配数字"},{default:e(()=>[a("🍀 匹配数字")]),_:1})]),n("li",null,[s(t,{to:"#🍀-匹配常用字符"},{default:e(()=>[a("🍀 匹配常用字符")]),_:1})]),n("li",null,[s(t,{to:"#🍀-匹配空格字符"},{default:e(()=>[a("🍀 匹配空格字符")]),_:1})]),n("li",null,[s(t,{to:"#🍀-匹配非数字"},{default:e(()=>[a("🍀 匹配非数字")]),_:1})]),n("li",null,[s(t,{to:"#🍀-重复匹配"},{default:e(()=>[a("🍀 重复匹配")]),_:1})]),n("li",null,[s(t,{to:"#🍀-练习"},{default:e(()=>[a("🍀 练习")]),_:1})]),n("li",null,[s(t,{to:"#🍀-小结"},{default:e(()=>[a("🍀 小结")]),_:1})])])])]),v,n("p",null,[a("下载练习："),n("a",b,[a("电话匹配练习"),s(o)])]),y,h])}const B=l(d,[["render",g],["__file","2.html.vue"]]);export{B as default};
