const t=JSON.parse('{"key":"v-22c66d66","path":"/1-Java/18_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2.html","title":"方法引用","lang":"zh-CN","frontmatter":{"title":"方法引用","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 使用 Lambda 表达式，我们就可以不必编写 FunctionalInterface 接口的实现类，从而简化代码： 实际上，除了 Lambda 表达式，我们还可以直接传入方法引用。例如： 上述代码在 Arrays.sort() 中直接传入了静态方法 cmp 的引用，用 Main::cmp 表示。 因此，所谓方法引用，是指如果某个...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/18_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/2.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"方法引用"}],["meta",{"property":"og:description","content":"目录 [[toc]] 使用 Lambda 表达式，我们就可以不必编写 FunctionalInterface 接口的实现类，从而简化代码： 实际上，除了 Lambda 表达式，我们还可以直接传入方法引用。例如： 上述代码在 Arrays.sort() 中直接传入了静态方法 cmp 的引用，用 Main::cmp 表示。 因此，所谓方法引用，是指如果某个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法引用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 构造方法引用","slug":"🍀-构造方法引用","link":"#🍀-构造方法引用","children":[]},{"level":2,"title":"🍀 练习","slug":"🍀-练习","link":"#🍀-练习","children":[]},{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":3.38,"words":1014},"filePathRelative":"1-Java/18_函数式编程/2.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
