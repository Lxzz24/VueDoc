import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as a,w as t,d as l,e as p}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),d={class:"table-of-contents"},m=l(`<h2 id="🍀-printstream" tabindex="-1"><a class="header-anchor" href="#🍀-printstream" aria-hidden="true">#</a> 🍀 PrintStream</h2><p>PrintStream 是一种 FilterOutputStream，它在 OutputStream 的接口上，额外提供了一些写入各种数据类型的方法：</p><ul><li>写入 int：print(int)</li><li>写入 boolean：print(boolean)</li><li>写入 String：print(String)</li><li>写入 Object：print(Object)，实际上相当于 print(object.toString())</li><li>...</li></ul><p>以及对应的一组 println() 方法，它会自动加上换行符。</p><p>我们经常使用的 System.out.println() 实际上就是使用 PrintStream 打印各种数据。其中，System.out 是系统默认提供的 PrintStream，表示标准输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 12345</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出类似 java.lang.Object@3c7a835a</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello 并换行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>System.err 是系统默认提供的标准错误输出。</p><p>PrintStream 和 OutputStream 相比，除了添加了一组 print()/println() 方法，可以打印各种数据类型，比较方便外，它还有一个额外的优点，就是不会抛出 IOException，这样我们在编写代码的时候，就不必捕获 IOException。</p><h2 id="🍀-printwriter" tabindex="-1"><a class="header-anchor" href="#🍀-printwriter" aria-hidden="true">#</a> 🍀 PrintWriter</h2><p>PrintStream 最终输出的总是 byte 数据，而 PrintWriter 则是扩展了 Writer 接口，它的 print()/println() 方法最终输出的是 char 数据。两者的使用方法几乎是一模一样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>
        <span class="token class-name">StringWriter</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>PrintStream 是一种能接收各种数据类型的输出，打印数据时比较方便：</p><ul><li>System.out 是标准输出；</li><li>System.err 是标准错误输出。</li></ul><p>PrintWriter 是基于 Writer 的输出。</p>`,15);function v(b,f){const s=o("router-link");return c(),i("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-printstream"},{default:t(()=>[p("🍀 PrintStream")]),_:1})]),n("li",null,[a(s,{to:"#🍀-printwriter"},{default:t(()=>[p("🍀 PrintWriter")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[p("🍀 小结")]),_:1})])])])]),m])}const _=e(u,[["render",v],["__file","10.html.vue"]]);export{_ as default};
