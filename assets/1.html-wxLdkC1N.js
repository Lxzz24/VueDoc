import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as t,d as u,e}from"./app-CvlAI_tu.js";const i="/VueDoc/assets/image-20231128114726573-Bm0Zz1i7.png",d={},k={class:"hint-container details"},r=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=u(`<p>要学习编码算法，我们先来看一看什么是编码。</p><p>ASCII 码就是一种编码，字母 <code>A</code> 的编码是十六进制的 <code>0x41</code>，字母 <code>B</code> 是 <code>0x42</code>，以此类推：</p><table><thead><tr><th style="text-align:left;">字母</th><th style="text-align:left;">ASCII 编码</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">0x41</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">0x42</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">0x43</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">0x44</td></tr><tr><td style="text-align:left;">…</td><td style="text-align:left;">…</td></tr></tbody></table><p>因为 ASCII 编码最多只能有 128 个字符，要想对更多的文字进行编码，就需要用 Unicode。而中文的中使用 Unicode 编码就是 <code>0x4e2d</code>，使用 UTF-8 则需要 3 个字节编码：</p><table><thead><tr><th style="text-align:left;">汉字</th><th style="text-align:left;">Unicode 编码</th><th style="text-align:left;">UTF-8 编码</th></tr></thead><tbody><tr><td style="text-align:left;">中</td><td style="text-align:left;">0x4e2d</td><td style="text-align:left;">0xe4b8ad</td></tr><tr><td style="text-align:left;">文</td><td style="text-align:left;">0x6587</td><td style="text-align:left;">0xe69687</td></tr><tr><td style="text-align:left;">编</td><td style="text-align:left;">0x7f16</td><td style="text-align:left;">0xe7bc96</td></tr><tr><td style="text-align:left;">码</td><td style="text-align:left;">0x7801</td><td style="text-align:left;">0xe7a081</td></tr><tr><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;">…</td></tr></tbody></table><p>因此，最简单的编码是直接给每个字符指定一个若干字节表示的整数，复杂一点的编码就需要根据一个已有的编码推算出来。</p><p>比如 UTF-8 编码，它是一种不定长编码，但可以从给定字符的 Unicode 编码推算出来。</p><h2 id="🍀-url-编码" tabindex="-1"><a class="header-anchor" href="#🍀-url-编码" aria-hidden="true">#</a> 🍀 URL 编码</h2><p>URL 编码是浏览器发送数据给服务器时使用的编码，它通常附加在 URL 的参数部分，例如：</p><p>[https://www.baidu.com/s?wd=%E4%B8%AD%E6%96%87](https://www.baidu.com/s?wd = 中文)</p><p>之所以需要 URL 编码，是因为出于兼容性考虑，很多服务器只识别 ASCII 字符。但如果 URL 中包含中文、日文这些非 ASCII 字符怎么办？不要紧，URL 编码有一套规则：</p><ul><li>如果字符是 <code>A</code> ~ <code>Z</code>，<code>a</code> ~ <code>z</code>，<code>0</code> ~ <code>9</code> 以及 <code>-</code>、<code>_</code>、<code>.</code>、<code>*</code>，则保持不变；</li><li>如果是其他字符，先转换为 UTF-8 编码，然后对每个字节以 <code>%XX</code> 表示。</li></ul><p>例如：字符 <code>中</code> 的 UTF-8 编码是 <code>0xe4b8ad</code>，因此，它的 URL 编码是 <code>%E4%B8%AD</code>。URL 编码总是大写。</p><p>Java 标准库提供了一个 <code>URLEncoder</code> 类来对任意字符串进行 URL 编码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> encoded <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;中文!&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的运行结果是 <code>%E4%B8%AD%E6%96%87%21</code>，<code>中</code> 的 URL 编码是 <code>%E4%B8%AD</code>，<code>文</code> 的 URL 编码是 <code>%E6%96%87</code>，<code>!</code> 虽然是 ASCII 字符，也要对其编码为 <code>%21</code>。</p><p>和标准的 URL 编码稍有不同，URLEncoder 把空格字符编码成 <code>+</code>，而现在的 URL 编码标准要求空格被编码为 <code>%20</code>，不过，服务器都可以处理这两种情况。</p><p>如果服务器收到 URL 编码的字符串，就可以对其进行解码，还原成原始字符串。Java 标准库的 <code>URLDecoder</code> 就可以解码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> decoded <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;%E4%B8%AD%E6%96%87%21&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要特别注意：URL 编码是编码算法，不是加密算法。URL 编码的目的是把任意文本数据编码为 <code>%</code> 前缀表示的文本，编码后的文本仅包含 <code>A</code> ~ <code>Z</code>，<code>a</code> ~ <code>z</code>，<code>0</code> ~ <code>9</code>，<code>-</code>，<code>_</code>，<code>.</code>，<code>*</code> 和 <code>%</code>，便于浏览器和服务器处理。</p><h2 id="🍀-base64-编码" tabindex="-1"><a class="header-anchor" href="#🍀-base64-编码" aria-hidden="true">#</a> 🍀 Base64 编码</h2><p>URL 编码是对字符进行编码，表示成 <code>%xx</code> 的形式，而 Base64 编码是对二进制数据进行编码，表示成文本格式。</p><p>Base64 编码可以把任意长度的二进制数据变为纯文本，且只包含 <code>A</code> ~ <code>Z</code>、<code>a</code> ~ <code>z</code>、<code>0</code> ~ <code>9</code>、<code>+</code>、<code>/</code>、<code>=</code> 这些字符。它的原理是把 3 字节的二进制数据按 6bit 一组，用 4 个 int 整数表示，然后查表，把 int 整数用索引对应到字符，得到编码后的字符串。</p><p>举个例子：3 个 byte 数据分别是 <code>e4</code>、<code>b8</code>、<code>ad</code>，按 6 bit 分组得到 <code>39</code>、<code>0b</code>、<code>22</code> 和 <code>2d</code>：</p><figure><img src="`+i+`" alt="image-20231128114726573" tabindex="0" loading="lazy"><figcaption>image-20231128114726573</figcaption></figure><p>因为 6 位整数的范围总是 <code>0</code>~<code>63</code>，所以，能用 64 个字符表示：字符 <code>A</code>~<code>Z</code> 对应索引 <code>0</code>~<code>25</code>，字符 <code>a</code>~<code>z</code> 对应索引 <code>26</code>~<code>51</code>，字符 <code>0</code>~<code>9</code> 对应索引 <code>52</code>~<code>61</code>，最后两个索引 <code>62</code>、<code>63</code> 分别用字符 <code>+</code> 和 <code>/</code> 表示。</p><p>在 Java 中，二进制数据就是 <code>byte[]</code> 数组。Java 标准库提供了 <code>Base64</code> 来对 <code>byte[]</code> 数组进行编解码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xad</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b64encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b64encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编码后得到 <code>5Lit</code>4 个字符。要对 <code>Base64</code> 解码，仍然用 <code>Base64</code> 这个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;5Lit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-28, -72, -83]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有的童鞋会问：如果输入的 <code>byte[]</code> 数组长度不是 3 的整数倍肿么办？这种情况下，需要对输入的末尾补一个或两个 <code>0x00</code>，编码后，在结尾加一个 <code>=</code> 表示补充了 1 个 <code>0x00</code>，加两个 <code>=</code> 表示补充了 2 个 <code>0x00</code>，解码的时候，去掉末尾补充的一个或两个 <code>0x00</code> 即可。</p><p>实际上，因为编码后的长度加上 <code>=</code> 总是 4 的倍数，所以即使不加 <code>=</code> 也可以计算出原始输入的 <code>byte[]</code>。Base64 编码的时候可以用 <code>withoutPadding()</code> 去掉 <code>=</code>，解码出来的结果是一样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x21</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b64encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b64encoded2 <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withoutPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b64encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b64encoded2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>b64encoded2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为标准的 Base64 编码会出现 <code>+</code>、<code>/</code> 和 <code>=</code>，所以不适合把 Base64 编码后的字符串放到 URL 中。一种针对 URL 的 Base64 编码可以在 URL 中使用的 Base64 编码，它仅仅是把 <code>+</code> 变成 <code>-</code>，<code>/</code> 变成 <code>_</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b64encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b64encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>b64encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Base64 编码的目的是把二进制数据变成文本格式，这样在很多文本中就可以处理二进制数据。例如，电子邮件协议就是文本协议，如果要在电子邮件中添加一个二进制文件，就可以用 Base64 编码，然后以文本的形式传送。</p><p>Base64 编码的缺点是传输效率会降低，因为它把原始数据的长度增加了 1/3。</p><p>和 URL 编码一样，Base64 编码是一种编码算法，不是加密算法。</p><p>如果把 Base64 的 64 个字符编码表换成 32 个、48 个或者 58 个，就可以使用 Base32 编码，Base48 编码和 Base58 编码。字符越少，编码的效率就会越低。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>URL 编码和 Base64 编码都是编码算法，它们不是加密算法；</p><p>URL 编码的目的是把任意文本数据编码为 % 前缀表示的文本，便于浏览器和服务器处理；</p><p>Base64 编码的目的是把任意二进制数据编码为文本，但编码后数据量会增加 1/3。</p>`,43);function b(y,g){const s=o("router-link");return c(),l("div",null,[n("details",k,[r,n("nav",m,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-url-编码"},{default:t(()=>[e("🍀 URL 编码")]),_:1})]),n("li",null,[a(s,{to:"#🍀-base64-编码"},{default:t(()=>[e("🍀 Base64 编码")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),v])}const w=p(d,[["render",b],["__file","1.html.vue"]]);export{w as default};
