import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as o,a as s,b as n,w as e,d as t,e as a}from"./app-CvlAI_tu.js";const m={},r={class:"hint-container details"},d=s("summary",null,"目录",-1),h={class:"table-of-contents"},u=t('<h2 id="🍀-一、表示法" tabindex="-1"><a class="header-anchor" href="#🍀-一、表示法" aria-hidden="true">#</a> 🍀 一、表示法</h2><h3 id="_1、正数-5-的表示法" tabindex="-1"><a class="header-anchor" href="#_1、正数-5-的表示法" aria-hidden="true">#</a> 1、正数 5 的表示法</h3><p>假设有一个 int 类型的数，值为 5，那么，我们知道它在计算机中表示为： <code>00000000 00000000 00000000 00000101</code> 5 转换成二制是 101，不过 int 类型的数占用 4 字节（32 位），所以前面填了一堆 0。</p><h3 id="_2、负数-5-的表示法" tabindex="-1"><a class="header-anchor" href="#_2、负数-5-的表示法" aria-hidden="true">#</a> 2、负数 -5 的表示法</h3><p>现在想知道，-5 在计算机中如何表示？在计算机中，负数以原码的补码形式表达。</p><h2 id="🍀-二、概念" tabindex="-1"><a class="header-anchor" href="#🍀-二、概念" aria-hidden="true">#</a> 🍀 二、概念</h2><h3 id="_1、原码" tabindex="-1"><a class="header-anchor" href="#_1、原码" aria-hidden="true">#</a> 1、原码</h3><p>一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补 1，称为原码。比如:</p><ul><li><code>00000000 00000000 00000000 00000101</code> 是 5 的 原码。</li><li><code>10000000 00000000 00000000 00000101</code> 是 -5 的 原码。</li></ul>',9),g=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"注"),s("p",null,[a("备注： 比如 byte 类型, 用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"8")])]),s("annotation",{encoding:"application/x-tex"},"2^8")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"8")])])])])])])])])])]),a(" 来表示无符号整数的话, 是 0 - 255 了；如果有符号， 最高位表示符号, 0 为正, 1 为负, 那么, 正常的理解就是 -127 至 +127 了. 这就是原码了, 值得一提的是, 原码的弱点, 有 2 个 0, 即 "),s("code",null,"+0"),a(" 和 "),s("code",null,"-0"),a("（"),s("code",null,"1000 0000"),a(" 和 "),s("code",null,"0000 0000"),a("）；还有就是, 进行异号相加或同号相减时, 比较笨蛋, 先要判断 2 个数的绝对值大小, 然后进行加减操作, 最后运算结果的符号还要与大的符号相同；于是, 反码产生了。")])],-1),_=t('<h3 id="_2、反码" tabindex="-1"><a class="header-anchor" href="#_2、反码" aria-hidden="true">#</a> 2、反码</h3><p>正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反 [每一位取反 (除符号位)]。 取反操作指：原为 1，得 0；原为 0，得 1。（1 变 0; 0 变 1），比如：</p><ul><li>正数 <code>00000000 00000000 00000000 00000101</code> 的反码还是 <code>00000000 00000000 00000000 00000101</code></li><li>负数 <code>10000000 00000000 00000000 00000101</code> 的反码则是 <code>11111111 11111111 11111111 11111010</code></li></ul><p>反码是相互的，所以也可称：<code>10000000 00000000 00000000 00000101</code> 和 <code>11111111 11111111 11111111 11111010</code> 互为反码。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>还是有 <code>+0</code> 和 <code>-0</code>, 没过多久，反码就成为了过滤产物, 也就是, 后来补码出现了。</p></div><h3 id="_3、补码" tabindex="-1"><a class="header-anchor" href="#_3、补码" aria-hidden="true">#</a> 3、补码</h3><p>正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加 1. 比如：</p><ul><li><code>10000000 00000000 00000000 00000101</code> 的补码是：<code>11111111 11111111 11111111 11111010</code></li></ul>',8),y=s("p",null,[a("那么，补码为： "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"11111111111111111111111111111010"),s("mo",null,"+"),s("mn",null,"1"),s("mo",null,"="),s("mn",null,"11111111111111111111111111111011")]),s("annotation",{encoding:"application/x-tex"},"11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"11111111111111111111111111111010"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"11111111111111111111111111111011")])])])],-1),k=t('<div class="hint-container note"><p class="hint-container-title">注</p><ol><li>从补码求原码的方法跟原码求补码是一样的 ，也可以通过完全逆运算来做，先减一，再取反。</li><li>补码却规定 0 没有正负之分</li></ol></div><p>所以，-5 在计算机中表达为：<code>11111111 11111111 11111111 11111011</code>。转换为十六进制：<code>0xFFFFFFFB</code>。</p><h2 id="🍀-三、再举一例" tabindex="-1"><a class="header-anchor" href="#🍀-三、再举一例" aria-hidden="true">#</a> 🍀 三、再举一例</h2><p>我们来看整数 -1 在计算机中如何表示。假设这也是一个 int 类型，那么：</p><ol><li>先取 -1 的原码：<code>10000000 00000000 00000000 00000001</code></li><li>得反码：<code>11111111 11111111 11111111 11111110</code>（除符号位按位取反）</li><li>得补码：<code>11111111 11111111 11111111 11111111</code></li></ol><p>可见，－1 在计算机里用二进制表达就是全 1。16 进制为：<code>0xFFFFFF</code></p><h2 id="🍀-四、主要知识点" tabindex="-1"><a class="header-anchor" href="#🍀-四、主要知识点" aria-hidden="true">#</a> 🍀 四、主要知识点</h2><ul><li><p>正数的反码和补码都与原码<strong>相同</strong>。</p></li><li><p>负数的反码为对该数的原码除符号位外<code>按位取反</code>。</p></li><li><p>负数的补码为对该数的原码除符号位外<code>按位取反，然后在最后一位加 1</code></p></li><li><p>原码：优点在于换算简单 缺点在于两个零 加减法需要独立运算</p></li><li><p>反码：有点在于表示清晰 缺点在于两个零 加减法同样需要独立运算</p></li><li><p>补码：优点在于一个零，范围大，减法可以转为加法；缺点在于理解困难</p></li></ul><p>下面是书上原文：</p>',9),x=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("ul",null,[s("li",null,"原码表示法规定：用符号位和数值表示带符号数，正数的符号位用 “0” 表示，负数的符号位用 “1” 表示，数值部分用二进制形式表示。"),s("li",null,"反码表示法规定：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。"),s("li",null,"补码表示法规定：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加 1."),s("li",null,[a("正零和负零的补码相同，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mo",null,"+"),s("mn",null,"0"),s("msub",null,[s("mo",{stretchy:"false"},"]"),s("mtext",null,"补")]),s("mo",null,"="),s("mo",{stretchy:"false"},"["),s("mo",null,"−"),s("mn",null,"0"),s("msub",null,[s("mo",{stretchy:"false"},"]"),s("mtext",null,"补")]),s("mo",null,"="),s("mn",null,"00000000"),s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"[+0]_补 =[-0]_补 = 0000 0000B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"+"),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},[s("span",{class:"mclose"},"]"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord cjk_fallback mtight"},"补")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},[s("span",{class:"mclose"},"]"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord cjk_fallback mtight"},"补")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"00000000"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])])])])],-1),v=t('<h2 id="🍀-五、特殊情况-128" tabindex="-1"><a class="header-anchor" href="#🍀-五、特殊情况-128" aria-hidden="true">#</a> 🍀 五、特殊情况 -128</h2><p><code>1000 0000</code>, 那么, 它的原码是什么呢? 从补码求原码的方法跟原码求补码是一样的。先保留符号位其它求反: <code>1111 1111</code>, 再加 1，<code>1 0000 0000</code>, 超过了 8 位了。对, 用 8 位数的原码在这里已经无法表示了。</p><p>那么, 回到原码处, 它的原码也是 <code>1000 0000</code>(超出的自动丢失)，<code>1000 0000</code> 在原码表示什么呢? <code>-0</code>, 但补码却规定 0 没有正负之分。</p><p>转换一下思路, 看看计算机里, 是怎么运算的:</p>',4),b=s("ul",null,[s("li",null,[a("对于负数, 先取绝对值, 然后求反, 加一："),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("mn",null,"128"),s("mo",null,"→"),s("mn",null,"128"),s("mo",null,"→"),s("mn",null,"10000000"),s("mo",null,"→"),s("mn",null,"01111111"),s("mo",null,"→"),s("mn",null,"10000000")]),s("annotation",{encoding:"application/x-tex"},"-128 → 128 → 1000 0000 → 0111 1111 → 1000 0000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"128"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"128"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10000000"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"01111111"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10000000")])])])])],-1),f=s("p",null,"现在明确了吧",-1),w=s("p",null,[a("所以，8 位有符号的整数取值范围的补码表示 "),s("code",null,"1000 0000"),a(" 到 "),s("code",null,"0000 0000"),a(", 再到 "),s("code",null,"0111 1111"),a("，即 -128 到 0, 再到 127，最终 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"−"),s("mn",null,"128")]),s("annotation",{encoding:"application/x-tex"},"-128")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},"128")])])]),a(" ~ "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"+"),s("mn",null,"127")]),s("annotation",{encoding:"application/x-tex"},"+127")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"+"),s("span",{class:"mord"},"127")])])])],-1),M=t(`<div class="hint-container caution"><p class="hint-container-title">警告</p><p>永远记住：程序里的加减法对二进制是永远有效的。但是并不一定适合于真实世界。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">byte</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m <span class="token operator">-</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这一步其实编译器会报错，其实是发现越界了，我们强行转化为 byte 就可以看出结果。</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p 的结果为：127</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function F(z,B){const l=i("router-link");return p(),o("div",null,[s("details",r,[d,s("nav",h,[s("ul",null,[s("li",null,[n(l,{to:"#🍀-一、表示法"},{default:e(()=>[a("🍀 一、表示法")]),_:1}),s("ul",null,[s("li",null,[n(l,{to:"#_1、正数-5-的表示法"},{default:e(()=>[a("1、正数 5 的表示法")]),_:1})]),s("li",null,[n(l,{to:"#_2、负数-5-的表示法"},{default:e(()=>[a("2、负数 -5 的表示法")]),_:1})])])]),s("li",null,[n(l,{to:"#🍀-二、概念"},{default:e(()=>[a("🍀 二、概念")]),_:1}),s("ul",null,[s("li",null,[n(l,{to:"#_1、原码"},{default:e(()=>[a("1、原码")]),_:1})]),s("li",null,[n(l,{to:"#_2、反码"},{default:e(()=>[a("2、反码")]),_:1})]),s("li",null,[n(l,{to:"#_3、补码"},{default:e(()=>[a("3、补码")]),_:1})])])]),s("li",null,[n(l,{to:"#🍀-三、再举一例"},{default:e(()=>[a("🍀 三、再举一例")]),_:1})]),s("li",null,[n(l,{to:"#🍀-四、主要知识点"},{default:e(()=>[a("🍀 四、主要知识点")]),_:1})]),s("li",null,[n(l,{to:"#🍀-五、特殊情况-128"},{default:e(()=>[a("🍀 五、特殊情况 -128")]),_:1})])])])]),u,g,_,y,k,x,v,b,f,w,M])}const N=c(m,[["render",F],["__file","1.html.vue"]]);export{N as default};
