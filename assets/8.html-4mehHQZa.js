import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as t,d as i,e}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},d=n("summary",null,"目录",-1),k={class:"table-of-contents"},v=i(`<p>在编写应用程序的时候，经常需要读写配置文件。例如，用户的设置：</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code># 上次最后打开的文件:
last_open_file=/data/hello.txt
# 自动保存文件的时间间隔:
auto_save_interval=60
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件的特点是，它的 Key-Value 一般都是 <code>String-String</code> 类型的，因此我们完全可以用 <code>Map&lt;String, String&gt;</code> 来表示它。</p><p>因为配置文件非常常用，所以 Java 集合库提供了一个 <code>Properties</code> 来表示一组 “配置”。由于历史遗留原因，<code>Properties</code> 内部本质上是一个 <code>Hashtable</code>，但我们只需要用到 <code>Properties</code> 自身关于读写配置的接口。</p><h2 id="🍀-读取配置文件" tabindex="-1"><a class="header-anchor" href="#🍀-读取配置文件" aria-hidden="true">#</a> 🍀 读取配置文件</h2><p>用 <code>Properties</code> 读取配置文件非常简单。Java 默认配置文件以 <code>.properties</code> 为扩展名，每行以 <code>key = value</code> 表示，以 <code>#</code> 课开头的是注释。以下是一个典型的配置文件：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># setting.properties</span>
<span class="token key attr-name">last_open_file</span><span class="token punctuation">=</span><span class="token value attr-value">/data/hello.txt</span>
<span class="token key attr-name">auto_save_interval</span><span class="token punctuation">=</span><span class="token value attr-value">60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以从文件系统读取这个 <code>.properties</code> 文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> f <span class="token operator">=</span> <span class="token string">&quot;setting.properties&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> filepath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;last_open_file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> interval <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;auto_save_interval&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;120&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，用 <code>Properties</code> 读取配置文件，一共有三步：</p><ol><li>创建 <code>Properties</code> 实例；</li><li>调用 <code>load()</code> 读取文件；</li><li>调用 <code>getProperty()</code> 获取配置。</li></ol><p>调用 <code>getProperty()</code> 获取配置时，如果 key 不存在，将返回 <code>null</code> 。我们还可以提供一个默认值，这样，当 key 不存在的时候，就返回默认值。</p><p>也可以从 classpath 读取 <code>.properties</code> 文件，因为 <code>load(InputStream)</code> 方法接收一个 <code>InputStream</code> 实例，表示一个字节流，它不一定是文件流，也可以是从 jar 包中读取的资源流：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/common/setting.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>试试从内存读取一个字节流：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// properties</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> settings <span class="token operator">=</span> <span class="token string">&quot;# test&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;course=Java&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;last_open_date=2019-08-07T12:35:01&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">ByteArrayInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>settings<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;course: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;course&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;last_open_date: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;last_open_date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;last_open_file: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;last_open_file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;auto_save: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;auto_save&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有多个 <code>.properties</code> 文件，可以反复调用 <code>load()</code> 读取，后读取的 key-value 会覆盖已读取的 key-value ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/common/setting.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\conf\\\\setting.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码演示了 <code>Properties</code> 的一个常用用法：可以把默认配置文件放到 <code>classpath</code> 中，然后，根据机器的环境编写另一个配置文件，覆盖某些默认的配置。</p><p><code>Properties</code> 设计的目的是存储 <code>String</code> 类型的 key－value，但 <code>Properties</code> 实际上是从 <code>Hashtable</code> 派生的，它的设计实际上是有问题的，但是为了保持兼容性，现在已经没法修改了。除了 <code>getProperty()</code> 和 <code>setProperty()</code> 方法外，还有从 <code>Hashtable</code> 继承下来的 <code>get()</code> 和 <code>put()</code> 方法，这些方法的参数签名是 <code>Object</code>，我们在使用 <code>Properties</code> 的时候，<strong>不要</strong>去调用这些从 <code>Hashtable</code> 继承下来的方法。</p><h2 id="🍀-写入配置文件" tabindex="-1"><a class="header-anchor" href="#🍀-写入配置文件" aria-hidden="true">#</a> 🍀 写入配置文件</h2><p>如果通过 <code>setProperty()</code> 修改了 <code>Properties</code> 实例，可以把配置写入文件，以便下次启动时获得最新配置。写入配置文件使用 <code>store()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.liaoxuefeng.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;language&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\conf\\\\setting.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;这是写入的 properties 注释&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-编码" tabindex="-1"><a class="header-anchor" href="#🍀-编码" aria-hidden="true">#</a> 🍀 编码</h2><p>早期版本的 Java 规定 <code>.properties</code> 文件编码是 ASCII 编码（ISO8859-1），如果涉及到中文就必须用 <code>name=\\u4e2d\\u6587</code> 来表示，非常别扭。从 JDK9 开始，Java 的 <code>.properties</code> 文件可以使用 UTF-8 编码了。</p><p>不过，需要注意的是，由于 <code>load(InputStream)</code> 默认总是以 ASCII 编码读取字节流，所以会导致读到乱码。我们需要用另一个重载方法 <code>load(Reader)</code> 读取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;settings.properties&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以正常读取中文。<code>InputStream</code> 和 <code>Reader</code> 的区别是一个是字节流，一个是字符流。字符流在内存中已经以 <code>char</code> 类型表示了，不涉及编码问题。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li><p>Java 集合库提供的 <code>Properties</code> 用于读写配置文件 <code>.properties</code>。<code>.properties</code> 文件可以使用 UTF-8 编码。</p></li><li><p>可以从文件系统、classpath 或其他任何地方读取 <code>.properties</code> 文件。</p></li><li><p>读写 <code>Properties</code> 时，注意仅使用 <code>getProperty()</code> 和 <code>setProperty()</code> 方法，不要调用继承而来的 <code>get()</code> 和 <code>put()</code> 等方法。</p></li></ul>`,30);function m(g,b){const s=o("router-link");return c(),l("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-读取配置文件"},{default:t(()=>[e("🍀 读取配置文件")]),_:1})]),n("li",null,[a(s,{to:"#🍀-写入配置文件"},{default:t(()=>[e("🍀 写入配置文件")]),_:1})]),n("li",null,[a(s,{to:"#🍀-编码"},{default:t(()=>[e("🍀 编码")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),v])}const h=p(u,[["render",m],["__file","8.html.vue"]]);export{h as default};
