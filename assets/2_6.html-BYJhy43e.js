const t=JSON.parse('{"key":"v-2e481240","path":"/1-Java/19_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2_6.html","title":"享元","lang":"zh-CN","frontmatter":{"title":"享元","category":"Java 教程","tag":"Java","headerDepth":1,"description":"运用共享技术有效地支持大量细粒度的对象。 享元（ Flyweight ）的核心思想很简单：如果一个对象实例一经创建就不可变，那么反复创建相同的实例就没有必要，直接向调用方返回一个共享的实例就行，这样即节省内存，又可以减少创建对象的过程，提高运行速度。 享元模式在 Java 标准库中有很多应用。我们知道，包装类型如 Byte、`Integer 都是不变类...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/19_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2_6.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"享元"}],["meta",{"property":"og:description","content":"运用共享技术有效地支持大量细粒度的对象。 享元（ Flyweight ）的核心思想很简单：如果一个对象实例一经创建就不可变，那么反复创建相同的实例就没有必要，直接向调用方返回一个共享的实例就行，这样即节省内存，又可以减少创建对象的过程，提高运行速度。 享元模式在 Java 标准库中有很多应用。我们知道，包装类型如 Byte、`Integer 都是不变类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 练习","slug":"🍀-练习","link":"#🍀-练习","children":[]},{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704939586000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"1-Java/19_设计模式/2_6.md","localizedDate":"2024年1月11日","autoDesc":true}');export{t as data};
