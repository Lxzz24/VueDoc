import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as p,c as r,a,b as t,w as o,d as c,e}from"./app-CvlAI_tu.js";const l="/VueDoc/assets/20220624165242-kqBu2FbR.png",d="/VueDoc/assets/fast-BS4Kuk-X.png",g="/VueDoc/assets/ooops-B2PErkPn.gif",u="/VueDoc/assets/20220624165715-C3bC7IBg.png",f="/VueDoc/assets/20220624165731-BQlBHqbd.png",_="/VueDoc/assets/20220624165749-BcsyXWOJ.png",m="/VueDoc/assets/20220624165804-DLW9OlQf.png",h={},x={class:"hint-container details"},b=a("summary",null,"目录",-1),v={class:"table-of-contents"},V=c('<p>现代操作系统（Windows，macOS，Linux）都可以执行多任务。多任务就是同时运行多个任务，例如：</p><figure><img src="'+l+'" alt="20220624165242" tabindex="0" loading="lazy"><figcaption>20220624165242</figcaption></figure><p>CPU 执行代码都是一条一条顺序执行的，但是，即使是单核 cpu，也可以同时运行多个任务。因为操作系统执行多任务实际上就是让 CPU 对多个任务轮流交替执行。</p><p>例如，假设我们有语文、数学、英语 3 门作业要做，每个作业需要 30 分钟。我们把这 3 门作业看成是 3 个任务，可以做 1 分钟语文作业，再做 1 分钟数学作业，再做 1 分钟英语作业：</p><figure><img src="'+d+'" alt="fast" tabindex="0" loading="lazy"><figcaption>fast</figcaption></figure><p>这样轮流做下去，在某些人眼里看来，做作业的速度就非常快，看上去就像同时在做 3 门作业一样</p><figure><img src="'+g+'" alt="ooops" tabindex="0" loading="lazy"><figcaption>ooops</figcaption></figure><p>类似的，操作系统轮流让多个任务交替执行，例如，让浏览器执行 0.001 秒，让 QQ 执行 0.001 秒，再让音乐播放器执行 0.001 秒，在人看来，CPU 就是在同时执行多个任务。</p><p>即使是多核 CPU，因为通常任务的数量远远多于 CPU 的核数，所以任务也是交替执行的。</p><h2 id="🍀-进程" tabindex="-1"><a class="header-anchor" href="#🍀-进程" aria-hidden="true">#</a> 🍀 进程</h2><p>在计算机中，我们把一个任务称为一个进程，浏览器就是一个进程，视频播放器是另一个进程，类似的，音乐播放器和 Word 都是进程。</p><p>某些进程内部还需要同时执行多个子任务。例如，我们在使用 Word 时，Word 可以让我们一边打字，一边进行拼写检查，同时还可以在后台进行打印，我们把子任务称为线程。</p><p>进程和线程的关系就是：一个进程可以包含一个或多个线程，但至少会有一个线程。</p><figure><img src="'+u+'" alt="20220624165715" tabindex="0" loading="lazy"><figcaption>20220624165715</figcaption></figure><p>操作系统调度的最小任务单位其实不是进程，而是线程。常用的 Windows、Linux 等操作系统都采用抢占式多任务，如何调度线程完全由操作系统决定，程序自己不能决定什么时候执行，以及执行多长时间。</p><p>因为同一个应用程序，既可以有多个进程，也可以有多个线程，因此，实现多任务的方法，有以下几种：</p><p>多进程模式（每个进程只有一个线程）：</p><figure><img src="'+f+'" alt="20220624165731" tabindex="0" loading="lazy"><figcaption>20220624165731</figcaption></figure><p>多线程模式（一个进程有多个线程）：</p><figure><img src="'+_+'" alt="20220624165749" tabindex="0" loading="lazy"><figcaption>20220624165749</figcaption></figure><p>多进程＋多线程模式（复杂度最高）：</p><figure><img src="'+m+'" alt="20220624165804" tabindex="0" loading="lazy"><figcaption>20220624165804</figcaption></figure><h2 id="🍀-进程-vs-线程" tabindex="-1"><a class="header-anchor" href="#🍀-进程-vs-线程" aria-hidden="true">#</a> 🍀 进程 vs 线程</h2><p>进程和线程是包含关系，但是多任务既可以由多进程实现，也可以由单进程内的多线程实现，还可以混合多进程 ＋ 多线程。</p><p>具体采用哪种方式，要考虑到进程和线程的特点。</p><p>和多线程相比，多进程的<strong>缺点</strong>在于：</p><ul><li>创建进程比创建线程开销大，尤其是在 Windows 系统上；</li><li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。</li></ul><p>而多进程的<strong>优点</strong>在于：</p><p>多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p><h2 id="🍀-多线程" tabindex="-1"><a class="header-anchor" href="#🍀-多线程" aria-hidden="true">#</a> 🍀 多线程</h2><p>Java 语言内置了多线程支持：一个 Java 程序实际上是一个 JVM 进程，JVM 进程用一个主线程来执行 <code>main()</code> 方法，在 <code>main()</code> 方法内部，我们又可以启动多个线程。此外，JVM 还有负责垃圾回收的其他工作线程等。</p><p>因此，对于大多数 Java 程序来说，我们说多任务，实际上是说如何使用多线程实现多任务。</p><p>和单线程相比，多线程编程的特点在于： <em><strong>多线程经常需要读写共享数据，并且需要同步。</strong></em> 例如，播放电影时，就必须由一个线程播放视频，另一个线程播放音频，两个线程需要协调运行，否则画面和声音就不同步。因此，多线程编程的复杂度高，调试更困难。</p><p>Java 多线程编程的<strong>特点</strong>又在于：</p><ul><li>多线程模型是 Java 程序最基本的并发模型；</li><li>后续读写网络、数据库、Web 开发等都依赖 Java 多线程模型。</li></ul><p>因此，必须掌握 Java 多线程编程才能继续深入学习其他内容。</p>',36);function J(B,y){const i=n("router-link");return p(),r("div",null,[a("details",x,[b,a("nav",v,[a("ul",null,[a("li",null,[t(i,{to:"#🍀-进程"},{default:o(()=>[e("🍀 进程")]),_:1})]),a("li",null,[t(i,{to:"#🍀-进程-vs-线程"},{default:o(()=>[e("🍀 进程 vs 线程")]),_:1})]),a("li",null,[t(i,{to:"#🍀-多线程"},{default:o(()=>[e("🍀 多线程")]),_:1})])])])]),V])}const D=s(h,[["render",J],["__file","1.html.vue"]]);export{D as default};
