import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as u,c as r,a as s,b as a,w as t,e as n,d as l}from"./app-CvlAI_tu.js";const k="/VueDoc/assets/l-20231220145145867-C585lgaO.jpeg",d="/VueDoc/assets/l-20231220145145950-V9C2ArEU.jpeg",v="/VueDoc/assets/l-20231220145145930-DpFmlY4y.jpeg",m={},T={class:"hint-container details"},b=s("summary",null,"目录",-1),h={class:"table-of-contents"},g=l('<p>今天我们访问网站，使用 App 时，都是基于 Web 这种 Browser/Server 模式，简称 BS 架构，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取 Web 页面，并把 Web 页面展示给用户即可。</p><p>Web 页面具有极强的交互性。由于 Web 页面是用 HTML 编写的，而 HTML 具备超强的表现力，并且，服务器端升级后，客户端无需任何部署就可以使用到新的版本，因此，BS 架构升级非常容易。</p><h2 id="🍀-http-协议" tabindex="-1"><a class="header-anchor" href="#🍀-http-协议" aria-hidden="true">#</a> 🍀 HTTP 协议</h2><p>在 Web 应用中，浏览器请求一个 URL，服务器就把生成的 HTML 网页发送给浏览器，而浏览器和服务器之间的传输协议是 HTTP，所以：</p><ul><li>HTML 是一种用来定义网页的文本，会 HTML，就可以编写网页；</li><li>HTTP 是在网络上传输 HTML 的协议，用于浏览器和服务器的通信。</li></ul><p>HTTP 协议是一个基于 TCP 协议之上的请求 - 响应协议，它非常简单，我们先使用 Chrome 浏览器查看新浪首页，然后选择 View - Developer - Inspect Elements 就可以看到 HTML：</p><figure><img src="'+k+'" alt="html" tabindex="0" loading="lazy"><figcaption>html</figcaption></figure><p>切换到 Network，重新加载页面，可以看到浏览器发出的每一个请求和响应：</p><figure><img src="'+d+`" alt="http" tabindex="0" loading="lazy"><figcaption>http</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 Chrome 浏览器可以方便地调试 Web 应用程序。</p></div><p>对于 Browser 来说，请求页面的流程如下：</p><ol><li>与服务器建立 TCP 连接；</li><li>发送 HTTP 请求；</li><li>收取 HTTP 响应，然后把网页在浏览器中显示出来。</li></ol><p>浏览器发送的 HTTP 请求如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">GET</span> <span class="token operator">/</span> <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>
<span class="token class-name">Host</span><span class="token operator">:</span> www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn
<span class="token class-name">User</span><span class="token operator">-</span><span class="token class-name">Agent</span><span class="token operator">:</span> <span class="token class-name">Mozilla</span><span class="token operator">/</span><span class="token number">5.0</span> xxx
<span class="token class-name">Accept</span><span class="token operator">:</span> <span class="token operator">*</span><span class="token comment">/*
Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，第一行表示使用 <code>GET</code> 请求获取路径为 <code>/</code> 的资源，并使用 <code>HTTP/1.1</code> 协议，从第二行开始，每行都是以 <code>Header: Value</code> 形式表示的 HTTP 头，比较常用的 HTTP Header 包括：</p><ul><li>Host: 表示请求的主机名，因为一个服务器上可能运行着多个网站，因此，Host 表示浏览器正在请求的域名；</li><li>User-Agent: 标识客户端本身，例如 Chrome 浏览器的标识类似 <code>Mozilla/5.0 ... Chrome/79</code>，IE 浏览器的标识类似 <code>Mozilla/5.0 (Windows NT ...) like Gecko</code>；</li><li>Accept：表示浏览器能接收的资源类型，如 <code>text/*</code>，<code>image/*</code> 或者 <code>*/*</code> 表示所有；</li><li>Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</li><li>Accept-Encoding：表示浏览器可以支持的压缩类型，例如 <code>gzip, deflate, br</code>。</li></ul><p>服务器的响应如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP/1.1 <span class="token number">200</span> OK
Content-Type: text/html
Content-Length: <span class="token number">21932</span>
Content-Encoding: <span class="token function">gzip</span>
Cache-Control: max-age<span class="token operator">=</span><span class="token number">300</span>

<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token punctuation">..</span>. 网页数据<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器响应的第一行总是版本号 + 空格 + 数字 + 空格 + 文本，数字表示响应代码，其中 <code>2xx</code> 表示成功，<code>3xx</code> 表示重定向，<code>4xx</code> 表示客户端引发的错误，<code>5xx</code> 表示服务器端引发的错误。数字是给程序识别，文本则是给开发者调试使用的。常见的响应代码有：</p><ul><li><code>200 OK</code>：表示成功；</li><li><code>301 Moved Permanently</code>：表示该 URL 已经永久重定向；</li><li><code>302 Found</code>：表示该 URL 需要临时重定向；</li><li><code>304 Not Modified</code>：表示该资源没有修改，客户端可以使用本地缓存的版本；</li><li><code>400 Bad Request</code>：表示客户端发送了一个错误的请求，例如参数无效；</li><li><code>401 Unauthorized</code>：表示客户端因为身份未验证而不允许访问该 URL；</li><li><code>403 Forbidden</code>：表示服务器因为权限问题拒绝了客户端的请求；</li><li><code>404 Not Found</code>：表示客户端请求了一个不存在的资源；</li><li><code>500 Internal Server Error</code>：表示服务器处理时内部出错，例如因为无法连接数据库；</li><li><code>503 Service Unavailable</code>：表示服务器此刻暂时无法处理请求。</li></ul><p>从第二行开始，服务器每一行均返回一个 HTTP 头。服务器经常返回的 HTTP Header 包括：</p><ul><li><code>Content-Type</code>：表示该响应内容的类型，例如 <code>text/html</code>，<code>image/jpeg</code>；</li><li><code>Content-Length</code>：表示该响应内容的长度（字节数）；</li><li><code>Content-Encoding</code>：表示该响应压缩算法，例如 <code>gzip</code>；</li><li><code>Cache-Control</code>：指示客户端应如何缓存，例如 <code>max-age=300</code> 表示可以最多缓存 300 秒。</li></ul><p>HTTP 请求和响应都由 HTTP Header 和 HTTP Body 构成，其中 HTTP Header 每行都以 <code>\\r\\n</code> 结束。如果遇到两个连续的 <code>\\r\\n</code>，那么后面就是 HTTP Body。浏览器读取 HTTP Body，并根据 Header 信息中指示的 <code>Content-Type</code>、<code>Content-Encoding</code> 等解压后显示网页、图像或其他内容。</p><p>通常浏览器获取的第一个资源是 HTML 网页，在网页中，如果嵌入了 JavaScript、CSS、图片、视频等其他资源，浏览器会根据资源的 URL 再次向服务器请求对应的资源。</p>`,24),w={href:"https://www.amazon.cn/dp/B00M2DKYRC/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP",target:"_blank",rel:"noopener noreferrer"},H=s("h2",{id:"🍀-编写-http-server",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🍀-编写-http-server","aria-hidden":"true"},"#"),n(" 🍀 编写 HTTP Server")],-1),y=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听指定端口</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;server is running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Socket</span> sock <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;connected from&quot;</span> <span class="token operator">+</span> sock<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token class-name">Socket</span> sock<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sock <span class="token operator">=</span> sock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">handle</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>sock<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;client disconnected.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO: 处理 HTTP 请求</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在 <code>handle()</code> 方法中，用 Reader 读取 HTTP 请求，用 Writer 发送 HTTP 响应，即可实现一个最简单的 HTTP 服务器。编写代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Process new http request...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取 HTTP 请求:</span>
    <span class="token keyword">boolean</span> requestOk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> first <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;GET / HTTP/1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        requestOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> header <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 读取到空行时, HTTP Header 读取完毕</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestOk <span class="token operator">?</span> <span class="token string">&quot;Response OK&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Response Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送错误响应:</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP/1.0 404 Not Found\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length: 0\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送成功响应:</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP/1.0 200 OK\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Connection: close\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type: text/html\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length:&quot;</span> <span class="token operator">+</span> length <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空行标识 Header 和 Body 的分隔</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的核心代码是，先读取 HTTP 请求，这里我们只处理 <code>GET /</code> 的请求。当读取到空行时，表示已读到连续两个 <code>\\r\\n</code>，说明请求结束，可以发送响应。发送响应的时候，首先发送响应代码 <code>HTTP/1.0 200 OK</code> 表示一个成功的 200 响应，使用 <code>HTTP/1.0</code> 协议，然后，依次发送 Header，发送完 Header 后，再发送一个空行标识 Header 结束，紧接着发送 HTTP Body，在浏览器输入 <code>http://local.liaoxuefeng.com:8080/</code> 就可以看到响应页面：</p><figure><img src="`+v+'" alt="httpserver" tabindex="0" loading="lazy"><figcaption>httpserver</figcaption></figure><p>HTTP 目前有多个版本，<code>1.0</code> 是早期版本，浏览器每次建立 TCP 连接后，只发送一个 HTTP 请求并接收一个 HTTP 响应，然后就关闭 TCP 连接。由于创建 TCP 连接本身就需要消耗一定的时间，因此，HTTP 1.1 允许浏览器和服务器在同一个 TCP 连接上反复发送、接收多个 HTTP 请求和响应，这样就大大提高了传输效率。</p><p>我们注意到 HTTP 协议是一个请求 - 响应协议，它总是发送一个请求，然后接收一个响应。能不能一次性发送多个请求，然后再接收多个响应呢？HTTP 2.0 可以支持浏览器同时发出多个请求，但每个请求需要唯一标识，服务器可以不按请求的顺序返回多个响应，由浏览器自己把收到的响应和请求对应起来。可见，HTTP 2.0 进一步提高了传输效率，因为浏览器发出一个请求后，不必等待响应，就可以继续发下一个请求。</p><p>HTTP 3.0 为了进一步提高速度，将抛弃 TCP 协议，改为使用无需创建连接的 UDP 协议，目前 HTTP 3.0 仍然处于实验阶段。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>编写一个简单的 HTTP 服务器</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用 B/S 架构时，总是通过 HTTP 协议实现通信；</p><p>Web 开发通常是指开发服务器端的 Web 应用程序。</p>',13);function P(_,S){const e=p("router-link"),o=p("ExternalLinkIcon"),c=p("RouterLink");return u(),r("div",null,[s("details",T,[b,s("nav",h,[s("ul",null,[s("li",null,[a(e,{to:"#🍀-http-协议"},{default:t(()=>[n("🍀 HTTP 协议")]),_:1})]),s("li",null,[a(e,{to:"#🍀-编写-http-server"},{default:t(()=>[n("🍀 编写 HTTP Server")]),_:1})]),s("li",null,[a(e,{to:"#🍀-练习"},{default:t(()=>[n("🍀 练习")]),_:1})]),s("li",null,[a(e,{to:"#🍀-小结"},{default:t(()=>[n("🍀 小结")]),_:1})])])])]),g,s("p",null,[n("关于 HTTP 协议的详细内容，请参考 "),s("a",w,[n("HTTP 权威指南"),a(o)]),n(" 一书，或者"),s("a",f,[n("Mozilla 开发者网站"),a(o)]),n("。")]),s("p",null,[n("我们在前面介绍的 "),a(c,{to:"/1-Java/15_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6.html"},{default:t(()=>[n("HTTP 编程")]),_:1}),n(" 是以客户端的身份去请求服务器资源。现在，我们需要以服务器的身份响应客户端请求，编写服务器程序来处理客户端请求通常就称之为 Web 开发。")]),H,s("p",null,[n("我们来看一下如何编写 HTTP Server。一个 HTTP Server 本质上是一个 TCP 服务器，我们先用 "),a(c,{to:"/1-Java/15_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2.html"},{default:t(()=>[n("TCP 编程")]),_:1}),n(" 的多线程实现的服务器端框架：")]),y])}const x=i(m,[["render",P],["__file","1.html.vue"]]);export{x as default};
