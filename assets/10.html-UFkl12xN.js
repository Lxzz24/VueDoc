import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as o,a as n,b as t,w as p,d as l,e as i}from"./app-CvlAI_tu.js";const d={},u={class:"hint-container details"},k=n("summary",null,"目录",-1),r={class:"table-of-contents"},v=l(`<p>从 Java 5 开始，引入了一个高级的处理并发的 <code>java.util.concurrent</code> 包，它提供了大量更高级的并发功能，能大大简化多线程程序的编写。</p><p>我们知道 Java 语言直接提供了 <code>synchronized</code> 关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。</p><p><code>java.util.concurrent.locks</code> 包提供的 <code>ReentrantLock</code> 用于替代 <code>synchronized</code> 加锁，我们来看一下传统的 <code>synchronized</code> 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count <span class="token operator">+=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用 <code>ReentrantLock</code> 替代，可以把代码改造为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            count <span class="token operator">+=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>synchronized</code> 是 Java 语言层面提供的语法，所以我们不需要考虑异常，而 <code>ReentrantLock</code> 是 Java 代码实现的锁，我们就必须先获取锁，然后在 <code>finally</code> 中正确释放锁。</p><p>顾名思义，<code>ReentrantLock</code> 是可重入锁，它和 <code>synchronized</code> 一样，一个线程可以多次获取同一个锁。</p><p>和 <code>synchronized</code> 不同的是，<code>ReentrantLock</code> 可以尝试获取锁：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在尝试获取锁的时候，最多等待 1 秒。如果 1 秒后仍未获取到锁，<code>tryLock()</code> 返回 <code>false</code>，程序就可以做一些额外处理，而不是无限等待下去。</p><p>所以，使用 <code>ReentrantLock</code> 比直接使用 <code>synchronized</code> 更安全，线程在 <code>tryLock()</code> 失败的时候不会导致死锁。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p><code>ReentrantLock</code> 可以替代 <code>synchronized</code> 进行同步；</p><p><code>ReentrantLock</code> 获取锁更安全；</p><p>必须先获取到锁，再进入 <code>try {...}</code> 代码块，最后使用 <code>finally</code> 保证释放锁；</p><p>可以使用 <code>tryLock()</code> 尝试获取锁。</p>`,17);function m(y,b){const s=e("router-link");return c(),o("div",null,[n("details",u,[k,n("nav",r,[n("ul",null,[n("li",null,[t(s,{to:"#🍀-小结"},{default:p(()=>[i("🍀 小结")]),_:1})])])])]),v])}const _=a(d,[["render",m],["__file","10.html.vue"]]);export{_ as default};
