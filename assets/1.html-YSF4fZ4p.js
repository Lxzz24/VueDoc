import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as c,w as l,d as s,e as i}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),d={class:"table-of-contents"},m=s(`<p>在了解正则表达式之前，我们先看几个非常常见的问题：</p><ul><li>如何判断字符串是否是有效的电话号码？例如：010-1234567，123ABC456，13510001000 等；</li><li>如何判断字符串是否是有效的电子邮件地址？例如：test@example.com，test#example 等；</li><li>如何判断字符串是否是有效的时间？例如：12:34，09:60，99:99 等。</li></ul><p>一种直观的想法是通过程序判断，这种方法需要为每种用例创建规则，然后用代码实现。下面是判断手机号的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isValidMobileNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否是 11 位？</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 每一位都是 0~9：</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">||</span> c<span class="token operator">&gt;</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码仅仅做了非常粗略的判断，并未考虑首位数字不能为 0 等更详细的情况。</p><p>除了判断手机号，我们还需要判断电子邮件地址、电话、邮编等等：</p>`,6),v=n("ul",null,[n("li",{"css-module":"."},"boolean isValidMobileNumber(String s)"),n("li",{"css-module":"."},"boolean isValidEmail(String s)"),n("li",{"css-module":"."},"boolean isValidPhoneNumber(String s)"),n("li",{"css-module":"."},"boolean isValidZipCode(String s)"),n("li",null,"...")],-1),b=s(`<p>为每一种判断逻辑编写代码实在是太繁琐了。有没有更简单的方法？</p><p>有！用正则表达式！</p><p>正则表达式可以用字符串来描述规则，并用来匹配字符串。例如，判断手机号，我们用正则表达式 \\d{11}：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isValidMobileNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d{11}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用正则表达式的好处有哪些？一个正则表达式就是一个描述规则的字符串，所以，只需要编写正确的规则，我们就可以让正则表达式引擎去判断目标字符串是否符合规则。</p><p>正则表达式是一套标准，它可以用于任何语言。Java 标准库的 java.util.regex 包内置了正则表达式引擎，在 Java 程序中使用正则表达式非常简单。</p><p>举个例子：要判断用户输入的年份是否是 20## 年，我们先写出规则如下：</p><p>一共有 4 个字符，分别是：2，0，0~9 任意数字，0~9 任意数字。</p><p>对应的正则表达式就是：20\\d\\d，其中 \\d 表示任意一个数字。</p><p>把正则表达式转换为 Java 字符串就变成了 20\\d\\d，注意 Java 字符串用 \\ 表示 \\。</p><p>最后，用正则表达式匹配一个字符串的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;20\\\\d\\\\d&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2019&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2100&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，使用正则表达式，不必编写复杂的代码来判断，只需给出一个字符串表达的正则规则即可。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>正则表达式是用字符串描述的一个匹配规则，使用正则表达式可以快速判断给定的字符串是否符合匹配规则。Java 标准库 java.util.regex 内建了正则表达式引擎。</p>`,15);function g(h,_){const a=p("router-link");return e(),o("div",null,[n("details",r,[k,n("nav",d,[n("ul",null,[n("li",null,[c(a,{to:"#🍀-小结"},{default:l(()=>[i("🍀 小结")]),_:1})])])])]),m,v,b])}const w=t(u,[["render",g],["__file","1.html.vue"]]);export{w as default};
