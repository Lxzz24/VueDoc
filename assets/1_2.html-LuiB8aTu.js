import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as p,a as n,e as s,b as o,d as l}from"./app-CvlAI_tu.js";const i="/VueDoc/assets/image-20231220094108349-5a_dvSdE.png",u="/VueDoc/assets/l-20231220094014402-DqQx1bmr.png",d={},k=n("blockquote",null,[n("p",null,"提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。")],-1),r=n("p",null,"抽象工厂模式（Abstract Factory）是一个比较复杂的创建型模式。",-1),m=n("p",null,"抽象工厂模式和工厂方法不太一样，它要解决的问题比较复杂，不但工厂是抽象的，产品是抽象的，而且有多个产品需要创建，因此，这个抽象工厂会对应到多个实际工厂，每个实际工厂负责创建多个实际产品：",-1),v=n("figure",null,[n("img",{src:i,alt:"image-20231220094108349",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20231220094108349")],-1),b=n("p",null,"这种模式有点类似于多个供应商负责提供一系列类型的产品。我们举个例子：",-1),y={href:"https://baike.baidu.com/item/MarkDown",target:"_blank",rel:"noopener noreferrer"},w=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 Html 文档:</span>
    <span class="token class-name">HtmlDocument</span> <span class="token function">createHtml</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 Word 文档:</span>
    <span class="token class-name">WordDocument</span> <span class="token function">createWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到上面的抽象工厂仅仅是一个接口，没有任何代码。同样的，因为 <code>HtmlDocument</code> 和 <code>WordDocument</code> 都比较复杂，现在我们并不知道如何实现它们，所以只有接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Html 文档接口:</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HtmlDocument</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Word 文档接口:</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WordDocument</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就定义好了抽象工厂（<code>AbstractFactory</code>）以及两个抽象产品（<code>HtmlDocument</code> 和 <code>WordDocument</code>）。因为实现它们比较困难，我们决定让供应商来完成。</p><p>现在市场上有两家供应商：FastDoc Soft 的产品便宜，并且转换速度快，而 GoodDoc Soft 的产品贵，但转换效果好。我们决定同时使用这两家供应商的产品，以便给免费用户和付费用户提供不同的服务。</p><p>我们先看看 FastDoc Soft 的产品是如何实现的。首先，FastDoc Soft 必须要有实际的产品，即 <code>FastHtmlDocument</code> 和 <code>FastWordDocument</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastHtmlDocument</span> <span class="token keyword">implements</span> <span class="token class-name">HtmlDocument</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastWordDocument</span> <span class="token keyword">implements</span> <span class="token class-name">WordDocument</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，FastDoc Soft 必须提供一个实际的工厂来生产这两种产品，即 <code>FastFactory</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">createHtml</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FastHtmlDocument</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">WordDocument</span> <span class="token function">createWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FastWordDocument</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就可以使用 FastDoc Soft 的服务了。客户端编写代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 AbstractFactory，实际类型是 FastFactory:</span>
<span class="token class-name">AbstractFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成 Html 文档:</span>
<span class="token class-name">HtmlDocument</span> html <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createHtml</span><span class="token punctuation">(</span><span class="token string">&quot;#Hello\\nHello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
html<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fast.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成 Word 文档:</span>
<span class="token class-name">WordDocument</span> word <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createWord</span><span class="token punctuation">(</span><span class="token string">&quot;#Hello\\nHello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
word<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fast.doc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要同时使用 GoodDoc Soft 的服务怎么办？因为用了抽象工厂模式，GoodDoc Soft 只需要根据我们定义的抽象工厂和抽象产品接口，实现自己的实际工厂和实际产品即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实际工厂:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">createHtml</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GoodHtmlDocument</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">WordDocument</span> <span class="token function">createWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> md<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GoodWordDocument</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实际产品:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodHtmlDocument</span> <span class="token keyword">implements</span> <span class="token class-name">HtmlDocument</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodWordDocument</span> <span class="token keyword">implements</span> <span class="token class-name">HtmlDocument</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端要使用 GoodDoc Soft 的服务，只需要把原来的 <code>new FastFactory()</code> 切换为 <code>new GoodFactory()</code> 即可。</p><p>注意到客户端代码除了通过 <code>new</code> 创建了 <code>FastFactory</code> 或 <code>GoodFactory</code> 外，其余代码只引用了产品接口，并未引用任何实际产品（例如，<code>FastHtmlDocument</code>），如果把创建工厂的代码放到 <code>AbstractFactory</code> 中，就可以连实际工厂也屏蔽了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AbstractFactory</span> <span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;fast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FastFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GoodFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid factory name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看看 <code>FastFactory</code> 和 <code>GoodFactory</code> 创建的 <code>WordDocument</code> 的实际效果：</p><figure><img src="`+u+'" alt="worddoc" tabindex="0" loading="lazy"><figcaption>worddoc</figcaption></figure><p>注意：出于简化代码的目的，我们只支持两种 Markdown 语法：以 <code>#</code> 开头的标题以及普通正文。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Abstract Factory 模式实现 <code>HtmlDocument</code> 和 <code>WordDocument</code>。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>抽象工厂模式是为了让创建工厂和一组产品与使用相分离，并可以随时切换到另一个工厂以及另一组产品；</p><p>抽象工厂模式实现的关键点是定义工厂接口和产品接口，但如何实现工厂与产品本身需要留给具体的子类实现，客户端只和抽象工厂与抽象产品打交道。</p>',24);function g(f,h){const a=e("ExternalLinkIcon");return c(),p("div",null,[k,r,m,v,b,n("p",null,[s("假设我们希望为用户提供一个 "),n("a",y,[s("Markdown"),o(a)]),s(" 文本转换为 HTML 和 Word 的服务，它的接口定义如下：")]),w])}const _=t(d,[["render",g],["__file","1_2.html.vue"]]);export{_ as default};
