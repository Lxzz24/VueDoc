import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as u,a as n,b as a,w as p,e as s,d as c}from"./app-CvlAI_tu.js";const d={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),v={class:"table-of-contents"},m=c(`<p>AOP 是 Aspect Oriented Programming，即面向切面编程。</p><p>那什么是 AOP？</p><p>我们先回顾一下 OOP：Object Oriented Programming，OOP 作为面向对象编程的模式，获得了巨大的成功，OOP 的主要功能是数据封装、继承和多态。</p><p>而 AOP 是一种新的编程方式，它和 OOP 不同，OOP 把系统看作多个对象的交互，AOP 把系统分解为不同的关注点，或者称之为切面（Aspect）。</p><p>要理解 AOP 的概念，我们先用 OOP 举例，比如一个业务组件 <code>BookService</code>，它有几个业务方法：</p><ul><li>createBook：添加新的 Book；</li><li>updateBook：修改 Book；</li><li>deleteBook：删除 Book。</li></ul><p>对每个业务方法，例如，<code>createBook()</code>，除了业务逻辑，还需要安全检查、日志记录和事务处理，它的代码像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 核心业务逻辑</span>
            tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;created book:&quot;</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续编写 <code>updateBook()</code>，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 核心业务逻辑</span>
            tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;updated book:&quot;</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于安全检查、日志、事务等代码，它们会重复出现在每个业务方法中。使用 OOP，我们很难将这些四处分散的代码模块化。</p><p>考察业务模型可以发现，<code>BookService</code> 关心的是自身的核心逻辑，但整个系统还要求关注安全检查、日志、事务等功能，这些功能实际上 “横跨” 多个业务方法，为了实现这些功能，不得不在每个业务方法上重复编写代码。</p>`,12),b={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1281319432618017",target:"_blank",rel:"noopener noreferrer"},g=c(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityCheckBookService</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BookService</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SecurityCheckBookService</span><span class="token punctuation">(</span><span class="token class-name">BookService</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">createBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">deleteBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">securityCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的缺点是比较麻烦，必须先抽取接口，然后，针对每个方法实现 Proxy。</p><p>另一种方法是，既然 <code>SecurityCheckBookService</code> 的代码都是标准的 Proxy 样板代码，不如把权限检查视作一种切面（Aspect），把日志、事务也视为切面，然后，以某种自动化的方式，把切面织入到核心逻辑中，实现 Proxy 模式。</p><p>如果我们以 AOP 的视角来编写上述业务，可以依次实现：</p><ol><li>核心逻辑，即 BookService；</li><li>切面逻辑，即：</li><li>权限检查的 Aspect；</li><li>日志的 Aspect；</li><li>事务的 Aspect。</li></ol><p>然后，以某种方式，让框架来把上述 3 个 Aspect 以 Proxy 的方式 “织入” 到 <code>BookService</code> 中，这样一来，就不必编写复杂而冗长的 Proxy 模式。</p><h2 id="🍀-aop-原理" tabindex="-1"><a class="header-anchor" href="#🍀-aop-原理" aria-hidden="true">#</a> 🍀 AOP 原理</h2><p>如何把切面织入到核心逻辑中？这正是 AOP 需要解决的问题。换句话说，如果客户端获得了 <code>BookService</code> 的引用，当调用 <code>bookService.createBook()</code> 时，如何对调用方法进行拦截，并在拦截前后进行安全检查、日志、事务等处理，就相当于完成了所有业务功能。</p><p>在 Java 平台上，对于 AOP 的织入，有 3 种方式：</p><ol><li>编译期：在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ 就扩展了 Java 编译器，使用关键字 aspect 来实现织入；</li><li>类加载器：在目标类被装载到 JVM 时，通过一个特殊的类加载器，对目标类的字节码重新 “增强”；</li><li>运行期：目标对象和切面都是普通 Java 类，通过 JVM 的动态代理功能或者第三方库实现运行期动态织入。</li></ol>`,10),y={href:"https://github.com/cglib/cglib",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.javassist.org/",target:"_blank",rel:"noopener noreferrer"},S=c(`<p>AOP 技术看上去比较神秘，但实际上，它本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p><p>需要特别指出的是，AOP 对于解决特定问题，例如事务管理非常有用，这是因为分散在各处的事务代码几乎是完全相同的，并且它们需要的参数（JDBC 的 Connection）也是固定的。另一些特定问题，如日志，就不那么容易实现，因为日志虽然简单，但打印日志的时候，经常需要捕获局部变量，如果使用 AOP 实现日志，我们只能输出固定格式的日志，因此，使用 AOP 时，必须适合特定的场景。</p><h2 id="🍀-装配-aop" tabindex="-1"><a class="header-anchor" href="#🍀-装配-aop" aria-hidden="true">#</a> 🍀 装配 AOP</h2><p>在 AOP 编程中，我们经常会遇到下面的概念：</p><ul><li>Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；</li><li>Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；</li><li>Pointcut：切入点，即一组连接点的集合；</li><li>Advice：增强，指特定连接点上执行的动作；</li><li>Introduction：引介，指为一个已有的 Java 对象动态地增加新的接口；</li><li>Weaving：织入，指将切面整合到程序的执行流程中；</li><li>Interceptor：拦截器，是一种实现增强的方式；</li><li>Target Object：目标对象，即真正执行业务的核心逻辑对象；</li><li>AOP Proxy：AOP 代理，是客户端持有的增强后的对象引用。</li></ul><p>看完上述术语，是不是感觉对 AOP 有了进一步的困惑？其实，我们不用关心 AOP 创造的 “术语”，只需要理解 AOP 本质上只是一种代理模式的实现方式，在 Spring 的容器中实现 AOP 特别方便。</p><p>我们以 <code>UserService</code> 和 <code>MailService</code> 为例，这两个属于核心业务逻辑，现在，我们准备给 <code>UserService</code> 的每个业务方法执行前添加日志，给 <code>MailService</code> 的每个业务方法执行前后添加日志，在 Spring 中，需要以下步骤：</p><p>首先，我们通过 Maven 引入 Spring 对 AOP 的支持：</p><ul><li>org.springframework:spring-aspects:6.0.0</li></ul><p>上述依赖会自动引入 AspectJ，使用 AspectJ 实现 AOP 比较方便，因为它的定义比较简单。</p><p>然后，我们定义一个 <code>LoggingAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在执行 UserService 的每个方法前执行:</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com.itranswarp.learnjava.service.UserService.*(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Before] do access check...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在执行 MailService 的每个方法前后执行:</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com.itranswarp.learnjava.service.MailService.*(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doLogging</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Around] start&quot;</span> <span class="token operator">+</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Around] done&quot;</span> <span class="token operator">+</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察 <code>doAccessCheck()</code> 方法，我们定义了一个 <code>@Before</code> 注解，后面的字符串是告诉 AspectJ 应该在何处执行该方法，这里写的意思是：执行 <code>UserService</code> 的每个 <code>public</code> 方法前执行 <code>doAccessCheck()</code> 代码。</p><p>再观察 <code>doLogging()</code> 方法，我们定义了一个 <code>@Around</code> 注解，它和 <code>@Before</code> 不同，<code>@Around</code> 可以决定是否执行目标方法，因此，我们在 <code>doLogging()</code> 内部先打印日志，再调用方法，最后打印日志后返回结果。</p><p>在 <code>LoggingAspect</code> 类的声明处，除了用 <code>@Component</code> 表示它本身也是一个 Bean 外，我们再加上 <code>@Aspect</code> 注解，表示它的 <code>@Before</code> 标注的方法需要注入到 <code>UserService</code> 的每个 <code>public</code> 方法执行前，<code>@Around</code> 标注的方法需要注入到 <code>MailService</code> 的每个 <code>public</code> 方法执行前后。</p><p>紧接着，我们需要给 <code>@Configuration</code> 类加上一个 <code>@EnableAspectJAutoProxy</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 的 IoC 容器看到这个注解，就会自动查找带有 <code>@Aspect</code> 的 Bean，然后根据每个方法的 <code>@Before</code>、<code>@Around</code> 等注解把 AOP 注入到特定的 Bean 中。执行代码，我们可以看到以下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Before<span class="token punctuation">]</span> <span class="token keyword">do</span> access check<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>Around<span class="token punctuation">]</span> start void com.itranswarp.learnjava.service.MailService.sendRegistrationMail<span class="token punctuation">(</span>User<span class="token punctuation">)</span>
Welcome, test<span class="token operator">!</span>
<span class="token punctuation">[</span>Around<span class="token punctuation">]</span> <span class="token keyword">done</span> void com.itranswarp.learnjava.service.MailService.sendRegistrationMail<span class="token punctuation">(</span>User<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Before<span class="token punctuation">]</span> <span class="token keyword">do</span> access check<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>Around<span class="token punctuation">]</span> start void com.itranswarp.learnjava.service.MailService.sendLoginMail<span class="token punctuation">(</span>User<span class="token punctuation">)</span>
Hi, Bob<span class="token operator">!</span> You are logged <span class="token keyword">in</span> at <span class="token number">2020</span>-02-14T23:13:52.167996+08:00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>
<span class="token punctuation">[</span>Around<span class="token punctuation">]</span> <span class="token keyword">done</span> void com.itranswarp.learnjava.service.MailService.sendLoginMail<span class="token punctuation">(</span>User<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这说明执行业务逻辑前后，确实执行了我们定义的 Aspect（即 <code>LoggingAspect</code> 的方法）。</p><p>有些童鞋会问，<code>LoggingAspect</code> 定义的方法，是如何注入到其他 Bean 的呢？</p><p>其实 AOP 的原理非常简单。我们以 <code>LoggingAspect.doAccessCheck()</code> 为例，要把它注入到 <code>UserService</code> 的每个 <code>public</code> 方法中，最简单的方法是编写一个子类，并持有原始实例的引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">UserServiceAopProxy</span> <span class="token keyword">extends</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> target<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LoggingAspect</span> aspect<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserServiceAopProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> target<span class="token punctuation">,</span> <span class="token class-name">LoggingAspect</span> aspect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aspect <span class="token operator">=</span> aspect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 先执行 Aspect 的代码:</span>
        aspect<span class="token punctuation">.</span><span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 再执行 UserService 的逻辑:</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aspect<span class="token punctuation">.</span><span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些都是 Spring 容器启动时为我们自动创建的注入了 Aspect 的子类，它取代了原始的 <code>UserService</code>（原始的 <code>UserService</code> 实例作为内部变量隐藏在 <code>UserServiceAopProxy</code> 中）。如果我们打印从 Spring 容器获取的 <code>UserService</code> 实例类型，它类似 <code>UserService$$EnhancerBySpringCGLIB$$1f44e01c</code>，实际上是 Spring 使用 CGLIB 动态创建的子类，但对于调用方来说，感觉不到任何区别。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>Spring 对接口类型使用 JDK 动态代理，对普通类使用 CGLIB 创建子类。如果一个 Bean 的 class 是 final，Spring 将无法为其创建子类。</p></div><p>可见，虽然 Spring 容器内部实现 AOP 的逻辑比较复杂（需要使用 AspectJ 解析注解，并通过 CGLIB 实现代理类），但我们使用 AOP 非常简单，一共需要三步：</p><ol><li>定义执行方法，并在方法上通过 AspectJ 的注解告诉 Spring 应该在何处调用此方法；</li><li>标记 <code>@Component</code> 和 <code>@Aspect</code>；</li><li>在 <code>@Configuration</code> 类上标注 <code>@EnableAspectJAutoProxy</code>。</li></ol>`,27),w={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-pointcuts-examples",target:"_blank",rel:"noopener noreferrer"},f=c(`<p>Spring 也提供其他方法来装配 AOP，但都没有使用 AspectJ 注解的方式来得简洁明了，所以我们不再作介绍。</p><h3 id="拦截器类型" tabindex="-1"><a class="header-anchor" href="#拦截器类型" aria-hidden="true">#</a> 拦截器类型</h3><p>顾名思义，拦截器有以下类型：</p><ul><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和 @After 不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和 @After 不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li></ul><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><p>使用 AOP 实现日志</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>在 Spring 容器中使用 AOP 非常简单，只需要定义执行方法，并用 AspectJ 的注解标注应该在何处触发并执行。</p><p>Spring 通过 CGLIB 动态创建子类等方式来实现 AOP 代理模式，大大简化了代码。</p><h2 id="🍀-使用注解装配-aop" tabindex="-1"><a class="header-anchor" href="#🍀-使用注解装配-aop" aria-hidden="true">#</a> 🍀 使用注解装配 AOP</h2><p>上一节我们讲解了使用 AspectJ 的注解，并配合一个复杂的 <code>execution(* xxx.Xyz.*(..))</code> 语法来定义应该如何装配 AOP。</p><p>在实际项目中，这种写法其实很少使用。假设你写了一个 <code>SecurityAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com.itranswarp.learnjava.service.*.*(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContext</span><span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;check failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本能实现无差别全覆盖，即某个包下面的所有 Bean 的所有方法都会被这个 <code>check()</code> 方法拦截。</p><p>还有的童鞋喜欢用方法名前缀进行拦截：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * update*(..))&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doLogging</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对 update 开头的方法切换数据源:</span>
    <span class="token class-name">String</span> old <span class="token operator">=</span> <span class="token function">setCurrentDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;master&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> retVal <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">restoreCurrentDataSource</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种非精准打击误伤面更大，因为从方法前缀区分是否是数据库操作是非常不可取的。</p><p>我们在使用 AOP 时，要注意到虽然 Spring 容器可以把指定的方法通过 AOP 规则装配到指定的 Bean 的指定方法前后，但是，如果自动装配时，因为不恰当的范围，容易导致意想不到的结果，即很多不需要 AOP 代理的 Bean 也被自动代理了，并且，后续新增的 Bean，如果不清楚现有的 AOP 装配规则，容易被强迫装配。</p><p>使用 AOP 时，被装配的 Bean 最好自己能清清楚楚地知道自己被安排了。例如，Spring 提供的 <code>@Transactional</code> 就是一个非常好的例子。如果我们自己写的 Bean 希望在一个数据库事务中被调用，就标注上 <code>@Transactional</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 有事务:</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 无事务:</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 有事务:</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接在 class 级别注解，表示 “所有 public 方法都被安排了”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>@Transactional</code>，某个方法是否启用了事务就一清二楚了。因此，装配 AOP 的时候，使用注解是最好的方式。</p><p>我们以一个实际例子演示如何使用注解实现 AOP 装配。为了监控应用程序的性能，我们定义一个性能监控的注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetricTime</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要被监控的关键方法上标注该注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监控 register() 方法性能:</span>
    <span class="token annotation punctuation">@MetricTime</span><span class="token punctuation">(</span><span class="token string">&quot;register&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义 <code>MetricAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(metricTime)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">MetricTime</span> metricTime<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> metricTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>
            <span class="token comment">// 写入日志或发送至 JMX:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Metrics]&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> t <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>metric()</code> 方法标注了 <code>@Around(&quot;@annotation(metricTime)&quot;)</code>，它的意思是，符合条件的目标方法是带有 <code>@MetricTime</code> 注解的方法，因为 <code>metric()</code> 方法参数类型是 <code>MetricTime</code>（注意参数名是 <code>metricTime</code> 不是 <code>MetricTime</code>），我们通过它获取性能监控的名称。</p><p>有了 <code>@MetricTime</code> 注解，再配合 <code>MetricAspect</code>，任何 Bean，只要方法标注了 <code>@MetricTime</code> 注解，就可以自动实现性能监控。运行代码，输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Welcome, Bob<span class="token operator">!</span>
<span class="token punctuation">[</span>Metrics<span class="token punctuation">]</span> register: 16ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1" aria-hidden="true">#</a> 练习</h3><p>使用注解 + AOP 实现性能监控</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><p>使用注解实现 AOP 需要先定义注解，然后使用 <code>@Around(&quot;@annotation(name)&quot;)</code> 实现装配；</p><p>使用注解既简单，又能明确标识 AOP 装配，是使用 AOP 推荐的方式。</p><h2 id="🍀-aop-避坑指南" tabindex="-1"><a class="header-anchor" href="#🍀-aop-避坑指南" aria-hidden="true">#</a> 🍀 AOP 避坑指南</h2>`,38),A={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1281319432618017",target:"_blank",rel:"noopener noreferrer"},j=c(`<p>因为 Spring 使用了 CGLIB 来实现运行期动态创建 Proxy，如果我们没能深入理解其运行原理和实现机制，就极有可能遇到各种诡异的问题。</p><p>我们来看一个实际的例子。</p><p>假设我们定义了一个 <code>UserService</code> 的 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成员变量:</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构造方法:</span>
    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserService(): init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserService(): zoneId =&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// public 方法:</span>
    <span class="token keyword">public</span> <span class="token class-name">ZoneId</span> <span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> zoneId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// public final 方法:</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> <span class="token function">getFinalZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> zoneId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再写个 <code>MailService</code>，并注入 <code>UserService</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> userService<span class="token punctuation">.</span>zoneId<span class="token punctuation">;</span>
        <span class="token class-name">String</span> dt <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, it is&quot;</span> <span class="token operator">+</span> dt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后用 <code>main()</code> 方法测试一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MailService</span> mailService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MailService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mailService<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看输出，一切正常：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UserService(): init...
UserService(): zoneId = Asia/Shanghai
Hello, it is 2020-04-12T10:23:22.917721+08:00[Asia/Shanghai]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步，我们给 <code>UserService</code> 加上 AOP 支持，就添加一个最简单的 <code>LoggingAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com..*.UserService.*(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Before] do access check...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别忘了在 <code>AppConfig</code> 上加上 <code>@EnableAspectJAutoProxy</code>。再次运行，不出意外的话，会得到一个 <code>NullPointerException</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.NullPointerException: zone
    at java.base/java.util.Objects.requireNonNull<span class="token punctuation">(</span>Objects.java:246<span class="token punctuation">)</span>
    at java.base/java.time.Clock.system<span class="token punctuation">(</span>Clock.java:203<span class="token punctuation">)</span>
    at java.base/java.time.ZonedDateTime.now<span class="token punctuation">(</span>ZonedDateTime.java:216<span class="token punctuation">)</span>
    at com.itranswarp.learnjava.service.MailService.sendMail<span class="token punctuation">(</span>MailService.java:19<span class="token punctuation">)</span>
    at com.itranswarp.learnjava.AppConfig.main<span class="token punctuation">(</span>AppConfig.java:21<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细跟踪代码，会发现 <code>null</code> 值出现在 <code>MailService.sendMail()</code> 内部的这一行代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> userService<span class="token punctuation">.</span>zoneId<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还故意在 <code>UserService</code> 中特意用 <code>final</code> 修饰了一下成员变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 <code>final</code> 标注的成员变量为 <code>null</code>？逗我呢？</p><h3 id="怎么肥四" tabindex="-1"><a class="header-anchor" href="#怎么肥四" aria-hidden="true">#</a> 怎么肥四？</h3><p>为什么加了 AOP 就报 NPE，去了 AOP 就一切正常？<code>final</code> 字段不执行，难道 JVM 有问题？为了解答这个诡异的问题，我们需要深入理解 Spring 使用 CGLIB 生成 Proxy 的原理：</p><p>第一步，正常创建一个 <code>UserService</code> 的原始实例，这是通过反射调用构造方法实现的，它的行为和我们预期的完全一致；</p><p>第二步，通过 CGLIB 创建一个 <code>UserService</code> 的子类，并引用了原始实例和 <code>LoggingAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">UserService</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span> <span class="token keyword">extends</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserService</span> target<span class="token punctuation">;</span>
    <span class="token class-name">LoggingAspect</span> aspect<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserService</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ZoneId</span> <span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aspect<span class="token punctuation">.</span><span class="token function">doAccessCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们观察 Spring 创建的 AOP 代理，它的类名总是类似 <code>UserService$$EnhancerBySpringCGLIB$$1c76af9d</code>（你没看错，Java 的类名实际上允许 <code>$</code> 字符）。为了让调用方获得 <code>UserService</code> 的引用，它必须继承自 <code>UserService</code>。然后，该代理类会覆写所有 <code>public</code> 和 <code>protected</code> 方法，并在内部将调用委托给原始的 <code>UserService</code> 实例。</p><p>这里出现了两个 <code>UserService</code> 实例：</p><p>一个是我们代码中定义的 <em>原始实例</em>，它的成员变量已经按照我们预期的方式被初始化完成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UserService</span> original <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二个 <code>UserService</code> 实例实际上类型是 <code>UserService$$EnhancerBySpringCGLIB</code>，它引用了原始的 <code>UserService</code> 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UserService</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
proxy<span class="token punctuation">.</span>target <span class="token operator">=</span> original<span class="token punctuation">;</span>
proxy<span class="token punctuation">.</span>aspect <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到这种情况仅出现在启用了 AOP 的情况，此刻，从 <code>ApplicationContext</code> 中获取的 <code>UserService</code> 实例是 proxy，注入到 <code>MailService</code> 中的 <code>UserService</code> 实例也是 proxy。</p><p>那么最终的问题来了：proxy 实例的成员变量，也就是从 <code>UserService</code> 继承的 <code>zoneId</code>，它的值是 <code>null</code>。</p><p>原因在于，<code>UserService</code> 成员变量的初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>UserService$$EnhancerBySpringCGLIB</code> 中，并未执行。原因是，没必要初始化 proxy 的成员变量，因为 proxy 的目的是代理方法。</p><p>实际上，成员变量的初始化是在构造方法中完成的。这是我们看到的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是编译器实际编译的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> zoneId<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造方法的第一行代码总是调用 super()</span>
        zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续初始化成员变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，对于 Spring 通过 CGLIB 动态创建的 <code>UserService$$EnhancerBySpringCGLIB</code> 代理类，它的构造方法中，并未调用 <code>super()</code>，因此，从父类继承的成员变量，包括 <code>final</code> 类型的成员变量，统统都没有初始化。</p><p>有的童鞋会问：Java 语言规定，任何类的构造方法，第一行必须调用 <code>super()</code>，如果没有，编译器会自动加上，怎么 Spring 的 CGLIB 就可以搞特殊？</p><p>这是因为自动加 <code>super()</code> 的功能是 Java 编译器实现的，它发现你没加，就自动给加上，发现你加错了，就报编译错误。但实际上，如果直接构造字节码，一个类的构造方法中，不一定非要调用 <code>super()</code>。Spring 使用 CGLIB 构造的 Proxy 类，是直接生成字节码，并没有源码 - 编译 - 字节码这个步骤，因此：</p><div class="hint-container note"><p class="hint-container-title">注</p><p>Spring 通过 CGLIB 创建的代理类，不会初始化代理类自身继承的任何成员变量，包括 final 类型的成员变量！</p></div><p>再考察 <code>MailService</code> 的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> userService<span class="token punctuation">.</span>zoneId<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有启用 AOP，注入的是原始的 <code>UserService</code> 实例，那么一切正常，因为 <code>UserService</code> 实例的 <code>zoneId</code> 字段已经被正确初始化了。</p><p>如果启动了 AOP，注入的是代理后的 <code>UserService$$EnhancerBySpringCGLIB</code> 实例，那么问题大了：获取的 <code>UserService$$EnhancerBySpringCGLIB</code> 实例的 <code>zoneId</code> 字段，永远为 <code>null</code>。</p><p>那么问题来了：启用了 AOP，如何修复？</p><p>修复很简单，只需要把直接访问字段的代码，改为通过方法访问：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不要直接访问 UserService 的字段:</span>
        <span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论注入的 <code>UserService</code> 是原始实例还是代理实例，<code>getZoneId()</code> 都能正常工作，因为代理类会覆写 <code>getZoneId()</code> 方法，并将其委托给原始实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">UserService</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span> <span class="token keyword">extends</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserService</span> target <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token class-name">ZoneId</span> <span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">getZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到我们还给 <code>UserService</code> 添加了一个 <code>public</code>+<code>final</code> 的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ZoneId</span> <span class="token function">getFinalZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> zoneId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 <code>MailService</code> 中，调用的不是 <code>getZoneId()</code>，而是 <code>getFinalZoneId()</code>，又会出现 <code>NullPointerException</code>，这是因为，代理类无法覆写 <code>final</code> 方法（这一点绕不过 JVM 的 ClassLoader 检查），该方法返回的是代理类的 <code>zoneId</code> 字段，即 <code>null</code>。</p><p>实际上，如果我们加上日志，Spring 在启动时会打印一个警告：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">10</span>:43:09.929 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> DEBUG org.springframework.aop.framework.CglibAopProxy - Final method <span class="token punctuation">[</span>public final java.time.ZoneId xxx.UserService.getFinalZoneId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields <span class="token keyword">in</span> the proxy instance.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的日志大意就是，因为被代理的 <code>UserService</code> 有一个 <code>final</code> 方法 <code>getFinalZoneId()</code>，这会导致其他 Bean 如果调用此方法，无法将其代理到真正的原始实例，从而可能发生 NPE 异常。</p><p>因此，正确使用 AOP，我们需要一个避坑指南：</p><ol><li>访问被注入的 Bean 时，总是调用方法而非直接访问字段；</li><li>编写 Bean 时，如果可能会被代理，就不要编写 <code>public final</code> 方法。</li></ol><p>这样才能保证有没有 AOP，代码都能正常工作。</p><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><p>为什么 Spring 刻意不初始化 Proxy 继承的字段？</p><p>如果一个 Bean 不允许任何 AOP 代理，应该怎么做来 “保护” 自己在运行期不会被代理？</p><h3 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2" aria-hidden="true">#</a> 练习</h3><p>修复启用 AOP 导致的 NPE</p><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><p>由于 Spring 通过 CGLIB 实现代理类，我们要避免直接访问 Bean 的字段，以及由 <code>final</code> 方法带来的 “未代理” 问题。</p><p>遇到 CglibAopProxy 的相关日志，务必要仔细检查，防止因为 AOP 出现 NPE 异常。</p>`,69);function x(P,B){const e=o("router-link"),t=o("ExternalLinkIcon");return l(),u("div",null,[n("details",r,[k,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#🍀-aop-原理"},{default:p(()=>[s("🍀 AOP 原理")]),_:1})]),n("li",null,[a(e,{to:"#🍀-装配-aop"},{default:p(()=>[s("🍀 装配 AOP")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#拦截器类型"},{default:p(()=>[s("拦截器类型")]),_:1})]),n("li",null,[a(e,{to:"#练习"},{default:p(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结"},{default:p(()=>[s("小结")]),_:1})])])]),n("li",null,[a(e,{to:"#🍀-使用注解装配-aop"},{default:p(()=>[s("🍀 使用注解装配 AOP")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#练习-1"},{default:p(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结-1"},{default:p(()=>[s("小结")]),_:1})])])]),n("li",null,[a(e,{to:"#🍀-aop-避坑指南"},{default:p(()=>[s("🍀 AOP 避坑指南")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#怎么肥四"},{default:p(()=>[s("怎么肥四？")]),_:1})]),n("li",null,[a(e,{to:"#思考"},{default:p(()=>[s("思考")]),_:1})]),n("li",null,[a(e,{to:"#练习-2"},{default:p(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结-2"},{default:p(()=>[s("小结")]),_:1})])])])])])]),m,n("p",null,[s("一种可行的方式是使用 "),n("a",b,[s("Proxy 模式"),a(t)]),s("，将某个功能，例如，权限检查，放入 Proxy 中：")]),g,n("p",null,[s("最简单的方式是第三种，Spring 的 AOP 实现就是基于 JVM 的动态代理。由于 JVM 的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过 "),n("a",y,[s("CGLIB"),a(t)]),s(" 或者 "),n("a",h,[s("Javassist"),a(t)]),s(" 这些第三方库实现。")]),S,n("p",null,[s("至于 AspectJ 的注入语法则比较复杂，请参考 "),n("a",w,[s("Spring 文档"),a(t)]),s("。")]),f,n("p",null,[s("无论是使用 AspectJ 语法，还是配合 Annotation，使用 AOP，实际上就是让 Spring 自动为我们创建一个 Proxy，使得调用方能无感知地调用指定方法，但运行期却动态 “织入” 了其他逻辑，因此，AOP 本质上就是一个"),n("a",A,[s("代理模式"),a(t)]),s("。")]),j])}const O=i(d,[["render",x],["__file","2.html.vue"]]);export{O as default};
