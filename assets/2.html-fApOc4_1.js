import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as d,c as r,a as n,b as s,w as i,e,d as l}from"./app-CvlAI_tu.js";const p="/VueDoc/assets/Nginx1-nu9G6kY3.png",u="/VueDoc/assets/Nginx2-CsmSaCqi.png",m={},h={class:"hint-container details"},g=n("summary",null,"目录",-1),v={class:"table-of-contents"},b=n("h2",{id:"web-服务器-nginx-安装部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#web-服务器-nginx-安装部署","aria-hidden":"true"},"#"),e(" WEB 服务器 Nginx 安装部署")],-1),x={href:"https://space.bilibili.com/384068749",target:"_blank",rel:"noopener noreferrer"},_=l(`<h3 id="🍀-首先安装包并解压" tabindex="-1"><a class="header-anchor" href="#🍀-首先安装包并解压" aria-hidden="true">#</a> 🍀 首先安装包并解压</h3><p>这⾥下载的是 nginx-1.20.2.tar.gz 安装包，并将其直接放在了 root ⽬录下</p><p>1、在 /usr/local/ 下创建 nginx ⽂件夹并进⼊</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/
<span class="token function">mkdir</span> nginx
<span class="token builtin class-name">cd</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、将 Nginx 安装包解压到 /usr/local/nginx 中即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> zxvf /root/nginx-1.20.2.tar.gz <span class="token parameter variable">-C</span> ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压完之后， /usr/local/nginx ⽬录中会出现⼀个 nginx-1.20.2 的⽬录</p><h3 id="🍀-预先安装额外的依赖" tabindex="-1"><a class="header-anchor" href="#🍀-预先安装额外的依赖" aria-hidden="true">#</a> 🍀 预先安装额外的依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="🍀-编译安装-nginx" tabindex="-1"><a class="header-anchor" href="#🍀-编译安装-nginx" aria-hidden="true">#</a> 🍀 编译安装 Nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> nginx-1.20.2
./configure
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，Nginx 的可执⾏⽂件位置位于 <code>/usr/local/nginx/sbin/nginx</code></p><h3 id="🍀-启动-nginx" tabindex="-1"><a class="header-anchor" href="#🍀-启动-nginx" aria-hidden="true">#</a> 🍀 启动 Nginx</h3><p>直接执⾏如下命令即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/local/nginx/sbin/nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想停⽌ Nginx 服务，可执⾏：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果修改了配置⽂件后想重新加载 Nginx，可执⾏：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意其配置⽂件位于：<code>/usr/local/nginx/conf/nginx.conf</code></p><h3 id="🍀-浏览器验证启动情况" tabindex="-1"><a class="header-anchor" href="#🍀-浏览器验证启动情况" aria-hidden="true">#</a> 🍀 浏览器验证启动情况</h3><p>浏览器输入 <code>localhost:80</code> 验证，其中 <code>localhost</code> 为你的服务器公网 IP 地址</p><h2 id="https-访问-nginx-绑定-ssl-证书" tabindex="-1"><a class="header-anchor" href="#https-访问-nginx-绑定-ssl-证书" aria-hidden="true">#</a> HTTPS 访问（Nginx 绑定 SSL 证书）</h2>`,23),k={href:"https://help.aliyun.com/document_detail/98728.html?spm=5176.b657008.help.19.3ea7799dDQKv29#step-g2p-wai-ral",target:"_blank",rel:"noopener noreferrer"},f=l('<h3 id="🍀-步骤1-下载证书到本地" tabindex="-1"><a class="header-anchor" href="#🍀-步骤1-下载证书到本地" aria-hidden="true">#</a> 🍀 步骤1：下载证书到本地</h3><p>以阿里云为例：</p><ol><li>登录 <strong>SSL 证书控制台</strong>。</li><li>在左侧导航栏，单击 SSL 证书。</li><li>到定位要下载的证书，手动操作列下的下载。</li><li>在证书下载面板，定位到 Nginx 服务器，操作列下的下载。 该操作将 Nginx 服务器证书压缩包下载到本地，并保存在浏览器的默认下载位置。</li><li>打开浏览器的默认下载位置，解压已下载的 Nginx 证书压缩包文件。解压后您将获得以下文件：</li></ol><figure><img src="'+p+'" alt="Nginx1" tabindex="0" loading="lazy"><figcaption>Nginx1</figcaption></figure>',4),N=n("em",null,"cert-file-name",-1),T=n("em",null,"cert-file-name.pem",-1),S=n("em",null,"cert-file-name.key",-1),y=n("em",null,"cert-file-name",-1),q={href:"https://help.aliyun.com/document_detail/98728.html?spm=5176.b657008.help.19.3ea7799dDQKv29#step-g2p-wai-ral",target:"_blank",rel:"noopener noreferrer"},H=n("br",null,null,-1),w=n("br",null,null,-1),E={href:"https://help.aliyun.com/document_detail/42214.htm?spm=a2c4g.11186623.0.0.6f507cc9jMeFeH#concept-a4g-mbv-ydb",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,[n("p",null,"KEY 格式的证书密钥文件。")],-1),C=n("blockquote",null,[n("p",null,[e("如果您在申请证书时将 "),n("strong",null,"CSR生成"),e(" 设置为"),n("strong",null,"手动填写"),e("，则下载的证书压缩包方式中不会包含密钥，您需要手动创建证书文件文件。")])],-1),L=n("h3",{id:"🍀-步骤2-在-nginx-服务器上安装证书",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🍀-步骤2-在-nginx-服务器上安装证书","aria-hidden":"true"},"#"),e(" 🍀 步骤2：在 Nginx 服务器上安装证书")],-1),z=n("p",null,"在 Nginx 独立服务器、Nginx 虚拟主机上安装证书的具体操作不同，请根据您的实际环境，选择相应的安装步骤。",-1),D=n("p",null,"参考以下步骤，在 Nginx 独立服务器上安装证书：",-1),I=l(`<li><p>登录 Nginx 服务器。<br> 例如，您可以使用远程登录工具（例如，PuTTY、Xshell）登录服务器。</p></li><li><p>执行以下命令，在 Nginx 安装目录（默认为 /usr/local/nginx/conf）下创建一个用于存放证书的目录，将其命名为 cert。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入Nginx默认安装目录。如果您修改过默认安装目录，请根据实际配置进行调整。</span>
<span class="token builtin class-name">cd</span> /usr/local/nginx/conf 

<span class="token comment">#创建证书目录，命名为cert。 </span>
<span class="token function">mkdir</span> cert  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用远程登录工具（例如，PuTTY、Xshell）附带的本地文件上传功能，将本地证书文件和私钥文件上传到 Nginx 服务器的证书目录 （示例中为 /usr/local/nginx/conf/cert）。</p><blockquote><p>如果您在申请证书时将 CSR 生成方式设置为手动填写，请将您手动创建的证书私钥文件上传至 /usr/local/nginx/conf/cert 目录。</p></blockquote></li>`,3),B=l(`<p>编辑 Nginx 配置文件（nginx.conf），修改与证书相关的配置内容。</p><ul><li><ol><li>执行以下命令，打开配置文件。</li></ol></li></ul><blockquote><p>注意 nginx.conf 默认保存在 /usr/local/nginx/conf 目录下。如果您修改过 nginx.conf 的位置， 请将 /usr/local/nginx/conf/nginx.conf 替换成修改后的位置。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /usr/local/nginx/conf/nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),V=l(`<li><ol start="2"><li>进入 <code>I</code> 键编辑模式。</li></ol></li><li><ol start="3"><li><p>在修改配置文件中定位到HTTP协议代码片段（http{}），并在 HTTP 协议代码里面添加以下 server 配置 （如果服务器配置内容已经存在，按照以下注释相应配置启用）。<br> 使用示例代码前，请注意替换以下内容：</p><ul><li><p>yourdomain：替换成证书绑定的域名。 如果您购买的是单域名证书，需要修改为单域名（例如 www.aliyundoc.com）； 如果您购买的是通配符域名证书，则需要修改为通配符域名（例如 *.aliyundoc.com）。</p></li><li><p><code>cert-file-name.pem</code>：替换成您在步骤 3 上传的证书文件的名称。</p></li><li><p><code>cert-file-name.key</code>：替换成您在步骤 3 上传的证书私钥文件的名称。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#以下属性中，以故事情节的属性表示与证书配置有关。</span>
server <span class="token punctuation">{</span>
    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>
    <span class="token comment">#配置HTTPS的默认访问端口为443。</span>
    <span class="token comment">#如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。</span>
    <span class="token comment">#如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</span>
    server_name yourdomain<span class="token punctuation">;</span> <span class="token comment">#需要将yourdomain替换成证书绑定的域名。</span>
    root html<span class="token punctuation">;</span>
    index index.html index.htm<span class="token punctuation">;</span>
    ssl_certificate cert/*cert-file-name*.pem<span class="token punctuation">;</span>  <span class="token comment">#需要将*cert-file-name*.pem替换成已上传的证书文件的名称。</span>
    ssl_certificate_key cert/*cert-file-name*.key<span class="token punctuation">;</span> <span class="token comment">#需要将*cert-file-name*.key替换成已上传的证书私钥文件的名称。</span>
    ssl_session_timeout 5m<span class="token punctuation">;</span>
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>
    <span class="token comment">#表示使用的加密套件的类型。</span>
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span> <span class="token comment">#表示使用的TLS协议的类型。</span>
    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
    location / <span class="token punctuation">{</span>
        root html<span class="token punctuation">;</span>  <span class="token comment">#Web网站程序存放目录。</span>
        index index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol></li>`,2),A={start:"4"},M=l(`<p>可选：设置 HTTP 请求自动跳转 HTTPS。<br> 如果您希望所有的 HTTP 访问自动跳转到 HTTPS 页面，则可以在需要跳转的 HTTP 站点下添加以下 rewrite 语句。</p><blockquote><p>以下代码片段需要放置在 nginx.conf 文件中 server {} 代码段后面，即设置 HTTP 请求自动跳转 HTTPS 后， nginx.conf 文件中会存在两个server {}代码段。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name yourdomain<span class="token punctuation">;</span> <span class="token comment">#需要将yourdomain替换成证书绑定的域名。</span>
    rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span><span class="token variable">$1</span><span class="token punctuation">;</span> <span class="token comment">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</span>
    location / <span class="token punctuation">{</span>
        index index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F={class:"hint-container warning"},O=n("p",{class:"hint-container-title"},"注意",-1),R=n("code",null,"80",-1),Y=n("code",null,"443",-1),j={href:"https://help.aliyun.com/document_detail/25471.htm?spm=a2c4g.11186623.0.0.6f507cc9jMeFeH#concept-sm5-2wz-xdb",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,":wq!",-1),K=l('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin  <span class="token comment">#进入Nginx服务的可执行目录。</span>\n./nginx <span class="token parameter variable">-s</span> reload  <span class="token comment">#重新载入配置文件。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果重启 Nginx 服务时收到报错，您可以使用以下方法进行排查： - 收到 <code>the &quot;ssl&quot; parameter requires ngx_http_ssl_module</code> 报错： 您需要重新编译 Nginx 并在编译安装的时候加上 <code>--with-http_ssl_module</code> 配置。 - 收到如下报错：您需要去掉证书相对路径最前面的 /。</p></div><pre><code> ```sh\n &quot;/cert/3970497_pic.certificatestests.com.pem&quot;:BIO_new_file() failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen(&#39;/cert/3970497_pic.certificatestests.com.pem&#39;,&#39;r&#39;) error:2006D080:BIO routines:BIO_new_file:no such file)\n ```\n \n 例如，您需要去掉 `/cert/*cert-file-name*.pem` 最前面的 /，\n 使用正确的相对路径 `cert/*cert-file-name*.pem`。\n</code></pre>',3),W=l(`<h3 id="🍀-步骤3-验证是否安装成功" tabindex="-1"><a class="header-anchor" href="#🍀-步骤3-验证是否安装成功" aria-hidden="true">#</a> 🍀 步骤3：验证是否安装成功</h3><p>证书安装完成后，您可通过访问证书的绑定域名验证该证书是否安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://yourdomain   <span class="token comment">#需要将yourdomain替换成证书绑定的域名。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果网页地址栏出现小锁标志，表示证书已经安装成功。</p><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决" aria-hidden="true">#</a> 问题解决</h2><p>在重启 Nginx 服务时收到 <code>the &quot;ssl&quot; parameter requires ngx_http_ssl_module</code> 报错，可参考以下方法解决：</p>`,6),$={href:"https://zhuanlan.zhihu.com/p/47928700",target:"_blank",rel:"noopener noreferrer"},Q=l(`<p>报错证明 nginx 在编译安装时候没有连同 http_ssl_module 模块一同编译；</p><p>现在的情况是 nginx 已经安装过了，需要重新编译，编译安装的时候带上 <code>--with-http_ssl_module</code> 配置。</p><blockquote><p>测试环境：centos 7.9<br> 工程版本：nginx-1.20.2</p></blockquote><p><strong>操作前必须先备份原有的 Nginx</strong></p><p>编译开始根据如下：</p><ol><li>示例：nginx 的安装目录是 /usr/local/nginx ，源码包在 /root/nginx-1.20.2 目录下。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>博主是将 <code>/usr/local/nginx</code> 目录下的 <code>nginx-1.20.2</code> 文件夹（已编译安装过）复制到了 <code>/root</code> 目录下</p></div><ol start="2"><li>切换到源码包：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /root/nginx-1.20.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>进行编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>配置完成后，运行命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><p>make 命令执行后，不要进行 make install，否则会覆盖安装。</p></li><li><p>备份原有已安装好的 nginx ：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>停止 nginx 状态：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>将编译好的 nginx 覆盖掉原有的 nginx ：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /root/nginx-1.20.2/
<span class="token function">cp</span> ./objs/nginx /usr/local/nginx/sbin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li><p>提示是否覆盖，输入 yes 即可。</p></li><li><p>然后启动 nginx：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/local/nginx/sbin/nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="11"><li>进入 nginx/sbin 目录下，通过命令查看模块是否已经加入成功：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/
./nginx <span class="token parameter variable">-V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!ATTENTION] <strong>V</strong> 是大写</p></blockquote><ol start="12"><li>有以下提示，证明已经编译成功：</li></ol><figure><img src="`+u+'" alt="Nginx2" tabindex="0" loading="lazy"><figcaption>Nginx2</figcaption></figure>',26);function U(X,J){const a=o("router-link"),t=o("ExternalLinkIcon");return d(),r("div",null,[n("details",h,[g,n("nav",v,[n("ul",null,[n("li",null,[s(a,{to:"#web-服务器-nginx-安装部署"},{default:i(()=>[e("WEB 服务器 Nginx 安装部署")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#🍀-首先安装包并解压"},{default:i(()=>[e("🍀 首先安装包并解压")]),_:1})]),n("li",null,[s(a,{to:"#🍀-预先安装额外的依赖"},{default:i(()=>[e("🍀 预先安装额外的依赖")]),_:1})]),n("li",null,[s(a,{to:"#🍀-编译安装-nginx"},{default:i(()=>[e("🍀 编译安装 Nginx")]),_:1})]),n("li",null,[s(a,{to:"#🍀-启动-nginx"},{default:i(()=>[e("🍀 启动 Nginx")]),_:1})]),n("li",null,[s(a,{to:"#🍀-浏览器验证启动情况"},{default:i(()=>[e("🍀 浏览器验证启动情况")]),_:1})])])]),n("li",null,[s(a,{to:"#https-访问-nginx-绑定-ssl-证书"},{default:i(()=>[e("HTTPS 访问（Nginx 绑定 SSL 证书）")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#🍀-步骤1-下载证书到本地"},{default:i(()=>[e("🍀 步骤1：下载证书到本地")]),_:1})]),n("li",null,[s(a,{to:"#🍀-步骤2-在-nginx-服务器上安装证书"},{default:i(()=>[e("🍀 步骤2：在 Nginx 服务器上安装证书")]),_:1})]),n("li",null,[s(a,{to:"#🍀-步骤3-验证是否安装成功"},{default:i(()=>[e("🍀 步骤3：验证是否安装成功")]),_:1})])])]),n("li",null,[s(a,{to:"#问题解决"},{default:i(()=>[e("问题解决")]),_:1})])])])]),b,n("blockquote",null,[n("p",null,[e("From "),n("a",x,[e("CodeSheep"),s(t)])])]),_,n("blockquote",null,[n("p",null,[e("From "),n("a",k,[e("阿里云"),s(t)])])]),f,n("blockquote",null,[n("p",null,[e("[!ATTENTION] 注意 本文中出现证书文件名称的地方，统一使用 "),N,e(" 为例进行描述。 例如，本文中用到的证书文件为 "),T,e("，证书私钥文件为 "),S,e("。 在实际操作过程中，您必须使用真实的证书文件名称替换示例代码中的 "),y,e("。 获取证书文件名称的具体操作，请参见 "),n("a",q,[e("下载证书到本地"),s(t)]),e("。")])]),n("ul",null,[n("li",null,[n("p",null,[e("PEM 格式的证书文件。"),H,e(" PEM格式的证书文件是采用Base64编码的文本文件，您可以根据需要将证书文件修改成其他格式。"),w,e(" 关于证书格式的更多信息，请参见 "),n("a",E,[e("主流数字证书都有哪些格式"),s(t)]),e("。")])]),P]),C,L,z,D,n("ol",null,[I,n("li",null,[B,n("ul",null,[V,n("li",null,[n("ol",A,[n("li",null,[M,n("div",F,[O,n("p",null,[e("警告 如果您使用的是阿里云 ECS 服务器，必须在 ECS 管理控制台的安全组页面， 配置放行 "),R,e(" 端口和 "),Y,e(" 端口，否则网站访问可能出现异常。关于如何配置安全组， 请参见"),n("a",j,[e("添加安全组规则"),s(t)]),e("。 - 5. 修改完成后，按 Esc 键、输入 "),G,e(" 并按Enter键，保存修改后的配置文件并退出编辑模式。 5. 执行以下命令，重启 Nginx 服务。")])])])])])]),K])]),W,n("blockquote",null,[n("p",null,[e("From "),n("a",$,[e("关于给编译好的 nginx，添加 http_ssl_module 模块及配置 ssl 证书"),s(t)])])]),Q])}const en=c(m,[["render",U],["__file","2.html.vue"]]);export{en as default};
