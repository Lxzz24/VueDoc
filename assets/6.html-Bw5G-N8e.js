import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as s,b as a,w as e,d as i,e as t}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/l-20231221105422720-BV11Njem.jpeg",d="/VueDoc/assets/image-20231221105530969-D5ZgRml4.png",r={},k={class:"hint-container details"},v=s("summary",null,"目录",-1),m={class:"table-of-contents"},g=i(`<p>我们通过前面的章节可以看到：</p><ul><li>Servlet 适合编写 Java 代码，实现各种复杂的业务逻辑，但不适合输出复杂的 HTML；</li><li>JSP 适合编写 HTML，并在其中插入动态内容，但不适合编写复杂的 Java 代码。</li></ul><p>能否将两者结合起来，发挥各自的优点，避免各自的缺点？</p><p>答案是肯定的。我们来看一个具体的例子。</p><p>假设我们已经编写了几个 JavaBean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>UserServlet</code> 中，我们可以从数据库读取 <code>User</code>、<code>School</code> 等信息，然后，把读取到的 JavaBean 先放到 HttpServletRequest 中，再通过 <code>forward()</code> 传给 <code>user.jsp</code> 处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 假装从数据库读取:</span>
        <span class="token class-name">School</span> school <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token string">&quot;No.1 Middle School&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;101 South Street&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> school<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放入 Request 中:</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// forward 给 user.jsp:</span>
        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/user.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>user.jsp</code> 中，我们只负责展示相关 JavaBean 的信息，不需要编写访问数据库等复杂逻辑：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%@ page import=&quot;com.itranswarp.learnjava.bean.*&quot;%&gt;
&lt;%
    User user = (User) request.getAttribute(&quot;user&quot;);
%&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World - JSP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello &lt;%= user.name %&gt;!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>School Name:
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
        &lt;%= user.school.name %&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>School Address:
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
        &lt;%= user.school.address %&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意几点：</p><ul><li>需要展示的 <code>User</code> 被放入 <code>HttpServletRequest</code> 中以便传递给 JSP，因为一个请求对应一个 <code>HttpServletRequest</code>，我们也无需清理它，处理完该请求后 <code>HttpServletRequest</code> 实例将被丢弃；</li><li>把 <code>user.jsp</code> 放到 <code>/WEB-INF/</code> 目录下，是因为 <code>WEB-INF</code> 是一个特殊目录，Web Server 会阻止浏览器对 <code>WEB-INF</code> 目录下任何资源的访问，这样就防止用户通过 <code>/user.jsp</code> 路径直接访问到 JSP 页面；</li><li>JSP 页面首先从 <code>request</code> 变量获取 <code>User</code> 实例，然后在页面中直接输出，此处未考虑 HTML 的转义问题，有潜在安全风险。</li></ul><p>我们在浏览器访问 <code>http://localhost:8080/user</code>，请求首先由 <code>UserServlet</code> 处理，然后交给 <code>user.jsp</code> 渲染：</p><figure><img src="`+u+'" alt="mvc" tabindex="0" loading="lazy"><figcaption>mvc</figcaption></figure><p>我们把 <code>UserServlet</code> 看作业务逻辑处理，把 <code>User</code> 看作模型，把 <code>user.jsp</code> 看作渲染，这种设计模式通常被称为 MVC：Model-View-Controller，即 <code>UserServlet</code> 作为控制器（Controller），<code>User</code> 作为模型（Model），<code>user.jsp</code> 作为视图（View），整个 MVC 架构如下：</p><figure><img src="'+d+'" alt="image-20231221105530969" tabindex="0" loading="lazy"><figcaption>image-20231221105530969</figcaption></figure><p>使用 MVC 模式的好处是，Controller 专注于业务处理，它的处理结果就是 Model。Model 可以是一个 JavaBean，也可以是一个包含多个对象的 Map，Controller 只负责把 Model 传递给 View，View 只负责把 Model 给 “渲染” 出来，这样，三者职责明确，且开发更简单，因为开发 Controller 时无需关注页面，开发 View 时无需关心如何创建 Model。</p><p>MVC 模式广泛地应用在 Web 页面和传统的桌面程序中，我们在这里通过 Servlet 和 JSP 实现了一个简单的 MVC 模型，但它还不够简洁和灵活，后续我们会介绍更简单的 Spring MVC 开发。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>MVC 模式是一种分离业务逻辑和显示逻辑的设计模式，广泛应用在 Web 和桌面应用程序。</p>',21);function b(h,S){const n=o("router-link");return c(),l("div",null,[s("details",k,[v,s("nav",m,[s("ul",null,[s("li",null,[a(n,{to:"#🍀-练习"},{default:e(()=>[t("🍀 练习")]),_:1})]),s("li",null,[a(n,{to:"#🍀-小结"},{default:e(()=>[t("🍀 小结")]),_:1})])])])]),g])}const _=p(r,[["render",b],["__file","6.html.vue"]]);export{_ as default};
