import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as r,c as d,a,b as e,w as n,e as s,d as t}from"./app-CvlAI_tu.js";const p="/VueDoc/assets/SE0101-Brm072ET.png",m="/VueDoc/assets/SE0102-DyJqEEKd.png",u="/VueDoc/assets/20220529151358-D902C9QG.png",h="/VueDoc/assets/20220529151451-DJYy80n-.png",v="/VueDoc/assets/20220529161216-DDZuv00q.png",g={},k={class:"hint-container details"},b=a("summary",null,"目录",-1),J={class:"table-of-contents"},_=a("h2",{id:"🍀-软件开发介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#🍀-软件开发介绍","aria-hidden":"true"},"#"),s(" 🍀 软件开发介绍")],-1),x=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mtext",null,"软件"),a("mo",null,"="),a("mtext",null,"系统软件（操作系统）"),a("mo",null,"+"),a("mtext",null,"应用软件")]),a("annotation",{encoding:"application/x-tex"},"软件 = 系统软件（操作系统）+ 应用软件")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"软件"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord cjk_fallback"},"系统软件（操作系统）"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"应用软件")])])])],-1),j=a("div",{class:"hint-container important"},[a("p",{class:"hint-container-title"},"重要"),a("p",null,"软件：一系列按照特定顺寻组织的计算机数据和指令的集合。")],-1),y=a("p",null,"人机交互方式：图形化界面（GUI）、命令行方式（CLI）",-1),f=a("p",null,"GUI：施乐 → 苹果 → 微软",-1),E=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mtext",null,"应用程序"),a("mo",null,"="),a("mtext",null,"算法"),a("mo",null,"+"),a("mtext",null,"数据结构")]),a("annotation",{encoding:"application/x-tex"},"应用程序 = 算法 + 数据结构")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"应用程序"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord cjk_fallback"},"算法"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"数据结构")])])])],-1),w=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>常用的 DOS 命令命令</p><ul><li><code>dir</code>（directory）: 列出当前目录下的文件以及文件夹</li><li><code>md</code>（make directory）: 创建目录</li><li><code>rd</code>（remove directory） : 删除目录（非空无法删除，先使用 <code>del</code>，再 <code>rd</code> ）</li><li><code>cd + 路径</code> : 进入指定目录</li><li><code>cd..</code> : 退回到上一级目录</li><li><code>cd\\\\</code> : 退回到根目录</li><li><code>del</code> : 删除文件（及目录下的文件）</li><li><code>exit</code> : 退出 dos 命令行</li></ul></div><h3 id="计算机编程语言介绍" tabindex="-1"><a class="header-anchor" href="#计算机编程语言介绍" aria-hidden="true">#</a> 计算机编程语言介绍</h3><div class="hint-container important"><p class="hint-container-title">重要</p><p>C, C++, Java, PHP, Kotlin（安卓）, Python（人工智能）, Scala（大数据）等</p></div>',3),D=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mtext",null,"机器语言（二进制代码）"),a("mo",null,"→"),a("mtext",null,"汇编语言"),a("mo",null,"→"),a("mtext",null,"高级言（面向过程"),a("mo",null,"→"),a("mtext",null,"面向对象）")]),a("annotation",{encoding:"application/x-tex"},"机器语言（二进制代码） → 汇编语言 → 高级言（面向过程 → 面向对象）")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"机器语言（二进制代码）"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"汇编语言"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"高级言（面向过程"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"面向对象）")])])])],-1),H=t('<h3 id="java-语言概述" tabindex="-1"><a class="header-anchor" href="#java-语言概述" aria-hidden="true">#</a> Java 语言概述</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>SUN（Stanford University Network，1995）<br> 后台开发：Java、PHP、Python、Go、Node.js</p><ul><li>2004，JDK 1.5（5.0）里程碑版本</li><li>2005，J2SE → JavaSE，J2EE → JavaEE → J2ME → JavaME</li><li>2009，Oracle 收购 SUN</li><li>2014，JDK 8.0</li></ul></div><ul><li><p>JavaSE（Java Standard Edition）标准版——桌面级应用（应用程序）</p></li><li><p>JavaEE（Java Enterprise Edition）企业版</p><ul><li>应用方向：企业级应用 + Android 平台应用 + 大数据平台开发</li></ul></li></ul><h3 id="java-程序运行机制及运行过程" tabindex="-1"><a class="header-anchor" href="#java-程序运行机制及运行过程" aria-hidden="true">#</a> Java 程序运行机制及运行过程</h3><h4 id="_1-特点" tabindex="-1"><a class="header-anchor" href="#_1-特点" aria-hidden="true">#</a> 1. 特点：</h4><ul><li>面向对象 <ul><li><strong><em>类、对象</em></strong></li><li><strong><em>封装、继承、多态</em></strong></li></ul></li><li>健壮性</li><li>跨平台性（可以在不同的系统平台上运行: JVM 负责 Java 程序在该系统的运行）</li></ul><h4 id="_2-java-的两种核心机制" tabindex="-1"><a class="header-anchor" href="#_2-java-的两种核心机制" aria-hidden="true">#</a> 2. Java 的两种核心机制：</h4><ul><li><strong><em>JVM</em></strong><ul><li>Java 虚拟机（Java Virtal Machine）</li><li>它只认识 <code>xxx.class</code> 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作</li></ul></li><li><strong><em>垃圾收集机制</em></strong>（Garbage Collection） <ul><li>回收不再使用的内存空间会出现内存泄漏和内存溢出</li></ul></li></ul><hr><h2 id="🍀-安装-jdk" tabindex="-1"><a class="header-anchor" href="#🍀-安装-jdk" aria-hidden="true">#</a> 🍀 安装 JDK</h2><h3 id="jdk-java-development-kit" tabindex="-1"><a class="header-anchor" href="#jdk-java-development-kit" aria-hidden="true">#</a> JDK (Java Development Kit)</h3><p>Java 开发工具包（ JRE + 开发工具）（有编译）</p><h3 id="jre-java-runtime-environment" tabindex="-1"><a class="header-anchor" href="#jre-java-runtime-environment" aria-hidden="true">#</a> JRE (Java Runtime Environment)</h3><p>Java 运行环境（没编译）</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',15),M=a("blockquote",null,[a("p",null,[s("[!warning] > "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"J"),a("mi",null,"D"),a("mi",null,"K"),a("mo",null,"="),a("mi",null,"J"),a("mi",null,"R"),a("mi",null,"E"),a("mo",null,"+"),a("mtext",null,"开发工具集（例如"),a("mi",null,"J"),a("mi",null,"a"),a("mi",null,"v"),a("mi",null,"a"),a("mi",null,"c"),a("mtext",null,"编译工具等）")]),a("annotation",{encoding:"application/x-tex"},"JDK = JRE + 开发工具集（例如 Javac 编译工具等）")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"DK"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"RE"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord cjk_fallback"},"开发工具集（例如"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord cjk_fallback"},"编译工具等）")])])]),a("br"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"J"),a("mi",null,"R"),a("mi",null,"E"),a("mo",null,"="),a("mi",null,"J"),a("mi",null,"V"),a("mi",null,"M"),a("mo",null,"+"),a("mi",null,"J"),a("mi",null,"a"),a("mi",null,"v"),a("mi",null,"a"),a("mi",null,"S"),a("mi",null,"E"),a("mtext",null,"标准类库")]),a("annotation",{encoding:"application/x-tex"},"JRE = JVM + Java SE 标准类库")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"RE"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"SE"),a("span",{class:"mord cjk_fallback"},"标准类库")])])])])],-1),I=a("figure",null,[a("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),A=a("blockquote",null,[a("p",null,[s("[!WARNING] > "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"J"),a("mi",null,"D"),a("mi",null,"K"),a("mo",null,">"),a("mi",null,"J"),a("mi",null,"R"),a("mi",null,"E"),a("mo",null,">"),a("mi",null,"J"),a("mi",null,"V"),a("mi",null,"M")]),a("annotation",{encoding:"application/x-tex"},"JDK > JRE > JVM")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"DK"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},">"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"RE"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},">"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])])])],-1),P=t('<div class="hint-container important"><p class="hint-container-title">重要</p><p>JDK 目录：</p><ul><li><code>bin</code> : 命令，javac.exe（编译），java.exe（解释运行），javadoc.exe（生成一个以网页形式存在的文档），jar.exe</li><li><code>db</code> : 数据库</li><li><code>include</code> : C 语言编写的头文件</li><li><code>jre</code> : 运行环境</li><li><code>lib</code> : 函数，jar 包</li><li><code>src.zip</code> : Java 开源代码</li><li><code>logs</code> : 日志文件</li><li><code>config</code> : 配置文件</li></ul></div><h3 id="下载-jdk" tabindex="-1"><a class="header-anchor" href="#下载-jdk" aria-hidden="true">#</a> 下载 JDK</h3>',2),S={href:"https://www.oracle.com/java/technologies/javase-downloads.html",target:"_blank",rel:"noopener noreferrer"},K=t('<p>找到 Java SE 21 的下载链接 JDK Download，下载安装即可。</p><blockquote><p>选择合适的操作系统与安装包，找到 Java SE 21 的下载链接 Download，下载安装即可。Windows 优先选 x64 MSI Installer，Linux 和 macOS 要根据自己电脑的 CPU 是 ARM 还是 x86 选择合适的安装包。</p></blockquote><h3 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量" aria-hidden="true">#</a> 设置环境变量</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>配置环境变量的目的是为了 Windows 操作系统执行命令时，在控制台的任何文件路径下，都可以调用 JDK 指定目录下的所有指令。</p></div><ol><li><p>安装完 JDK 后，需要设置一个 JAVA_HOME 的环境变量，它指向 JDK 的安装目录。</p><p>在 Windows 下，它是安装目录，类似：</p><p><code>C:\\Program Files\\Java\\jdk-18</code></p><p>在 Mac 下，它在 <code>~/.bash_profile</code> 或 <code>~/.zprofile</code> 里，它是：</p><p><code>export JAVA_HOME=&#39;/usr/libexec/java_home -v 18&#39;</code></p></li><li><p>然后，把 JAVA_HOME 的 bin 目录附加到系统环境变量 PATH 上。在 Windows 下，它长这样：</p><p><code>Path=%JAVA_HOME%\\bin;&lt;现有的其他路径&gt;</code></p><p>在 Mac 下，它在 <code>~/.bash_profile</code> 或 <code>~/.zprofile</code> 里，长这样：</p><p><code>export PATH=$JAVA_HOME/bin:$PATH</code></p><p>把 JAVA_HOME 的 bin 目录添加到 PATH 中是为了在任意文件夹下都可以运行 Java 。</p></li><li><p>打开命令提示符窗口，输入命令 <code>java -version</code>，如果一切正常，你会看到如下输出：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果你看到的版本号不是 18，而是 15、1.8 之类，说明系统存在多个 JDK，且默认 JDK 不是 JDK 18，需要把 JDK 18 提到 PATH 前面。</p><p>如果你得到一个错误输出：</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这是因为系统无法找到 Java 虚拟机的程序 <code>java.exe</code>，需要检查 JAVA_HOME 和 PATH 的配置。</p><p>可以参考如何设置或更改 PATH 系统变量。</p></li></ol><hr><h2 id="🍀-第一个-java-程序" tabindex="-1"><a class="header-anchor" href="#🍀-第一个-java-程序" aria-hidden="true">#</a> 🍀 第一个 Java 程序</h2><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3><p>我们来编写第一个 Java 程序。</p><p>打开文本编辑器，输入以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一个 Java 程序中，你总能找到一个类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的定义，这个定义被称为 class（类），这里的类名是 <code>Hello</code>，大小写敏感，<code>class</code> 用来定义一个类，<code>public</code> 表示这个类是公开的，<code>public</code>、<code>class</code> 都是 Java 的关键字，必须小写，<code>Hello</code> 是类的名字，按照习惯，首字母 <code>H</code> 要大写。而花括号 <code>{}</code> 中间则是类的定义。</p><p>注意到类的定义中，我们定义了一个名为 <code>main</code> 的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法是可执行的代码块，一个方法除了方法名 <code>main</code>，还有用 <code>()</code> 括起来的方法参数，这里的 <code>main</code> 方法有一个参数，参数类型是 <code>String[]</code>，参数名是 <code>args</code>，<code>public</code>、<code>static</code>用来修饰方法，这里表示它是一个公开的静态方法，<code>void</code> 是方法的返回类型，而花括号 <code>{}</code> 中间的就是方法的代码。</p><p>方法的代码每一行用 <code>;</code> 结束，这里只有一行代码，就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它用来打印一个字符串到屏幕上。</p><p>Java 规定，某个类定义的 <code>public static void main(String[] args)</code> 是 Java 程序的固定入口方法，因此，<mark><strong><em>Java 程序总是从 <code>main</code> 方法开始执行</em></strong></mark> 。</p><p>注意到 Java 源码的缩进不是必须的，但是用缩进后，格式好看，很容易看出代码块的开始和结束，缩进一般是 4 个空格或者一个 tab 。</p><p>最后，当我们把代码保存为文件时，文件名必须是 <code>Hello.java</code>，而且文件名也要注意大小写，因为要和我们定义的类名 <code>Hello</code> 完全保持一致。</p><h3 id="如何执行-java-程序" tabindex="-1"><a class="header-anchor" href="#如何执行-java-程序" aria-hidden="true">#</a> 如何执行 Java 程序</h3><p>Java 源码本质上是一个文本文件，我们需要先用 <code>javac</code> 把 <code>Hello.java</code> 编译成字节码文件 <code>Hello.class</code>，然后，用 <code>java</code> 命令执行这个字节码文件：</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，可执行文件 <code>javac</code> 是编译器，而可执行文件 <code>java</code> 就是虚拟机。</p><p><strong><em>第一步</em></strong>，在保存 <code>Hello.java</code> 的目录下执行命令 <code>javac Hello.java</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ javac Hello.jaa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果源代码无误，上述命令不会有任何输出，而当前目录下会产生一个 <code>Hello.class</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span>
Hello.class	Hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>第二步</em></strong>，执行 <code>Hello.class</code>，使用命令 <code>java Hello</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> Helo
Hello, world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>给虚拟机传递的参数 <code>Hello</code> 是我们定义的类名，虚拟机自动查找对应的 <code>class</code> 文件并执行。</p></div><h3 id="对第一个-java-程序进行总结" tabindex="-1"><a class="header-anchor" href="#对第一个-java-程序进行总结" aria-hidden="true">#</a> 对第一个 Java 程序进行总结：</h3><ol><li>Java 程序-编译-运行的过程 <ul><li>编写：我们将编写的 Java 代码保存在以 <code>.java</code> 结尾的源文件中</li><li>编译：使用 <code>javac</code> 命令编译我们的 Java 源文件。 <ul><li>格式： <code>javac 源文件名.java</code></li></ul></li><li>运行：使用 <code>java</code> 命令解释运行我们的字节码文件。 <ul><li>格式： <code>java 类名</code></li></ul></li></ul></li><li>在一个 Java 源文件中可以声明多个 <code>class</code>，但是 <mark><strong><em>最多只能有一个类声明为 <code>public</code></em></strong></mark> 。 <ul><li>而且要求声明为 <code>public</code> 的类的类名必须与源文件名相同。</li></ul></li><li>程序的入口是 <code>main()</code> 方法。格式是固定的。</li><li>输出语句： <ul><li><code>System.out.println();</code>先输出数据，然后换行</li><li><code>System.out.print();</code>只输出数据</li></ul></li><li>每一行执行语句都以 <code>;</code> 结束。</li><li>编译的过程： <ul><li>编译以后，会生成一个或多个字节码文件。</li><li>字节码文件的文件名与 Java 源文件中的类名相同。</li></ul></li></ol><h3 id="java-api-文档" tabindex="-1"><a class="header-anchor" href="#java-api-文档" aria-hidden="true">#</a> * Java API 文档</h3><div class="hint-container important"><p class="hint-container-title">重要</p><p>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</p></div><p>Java 语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的 API 文档， 用于告诉开发者如何使用这些类，以及这些类里包含的方法。</p>`,39),V={href:"http://www.oracle.com/technetwork/java/javase/downloads/index.html",target:"_blank",rel:"noopener noreferrer"},R=t('<hr><h2 id="🍀-使用-ide" tabindex="-1"><a class="header-anchor" href="#🍀-使用-ide" aria-hidden="true">#</a> 🍀 使用 IDE</h2><h3 id="ide" tabindex="-1"><a class="header-anchor" href="#ide" aria-hidden="true">#</a> IDE</h3><p>IDE 是集成开发环境： Integrated Development Environment 的缩写。</p><p>使用 IDE 的好处在于，可以把编写代码、组织项目、编译、运行、调试等放到一个环境中运行，能极大地提高开发效率。</p><p>IDE 提升开发效率主要靠以下几点：</p><ul><li>编辑器的自动提示，可以大大提高敲代码的速度；</li><li>代码修改后可以自动重新编译，并直接运行；</li><li>可以方便地进行断点调试。</li></ul><p>目前，流行的用于 Java 开发的 IDE 有：</p><h4 id="eclipse" tabindex="-1"><a class="header-anchor" href="#eclipse" aria-hidden="true">#</a> Eclipse</h4><p>Eclipse 是由 IBM 开发并捐赠给开源社区的一个 IDE ，也是目前应用最广泛的 IDE 。Eclipse 的特点是它本身是 Java 开发的，并且基于插件结构，即使是对 Java 开发的支持也是通过插件 JDT 实现的。</p><p>除了用于 Java 开发，Eclipse 配合插件也可以作为 C / C++ 开发环境、 PHP 开发环境、 Rust 开发环境等。</p><h3 id="intellij-idea" tabindex="-1"><a class="header-anchor" href="#intellij-idea" aria-hidden="true">#</a> <em>IntelliJ Idea</em></h3><p>IntelliJ Idea 是由 JetBrains 公司开发的一个功能强大的 IDE ，分为免费版和商用付费版。JetBrains 公司的 IDE 平台也是基于 IDE 平台 + 语言插件的模式，支持 Python 开发环境、 Ruby 开发环境、 PHP 开发环境等，这些开发环境也分为免费版和付费版。</p><h4 id="netbeans" tabindex="-1"><a class="header-anchor" href="#netbeans" aria-hidden="true">#</a> NetBeans</h4><p>NetBeans 是最早由 SUN 开发的开源 IDE ，由于使用人数较少，目前已不再流行。</p>',15);function N(C,O){const l=c("router-link"),i=c("ExternalLinkIcon");return r(),d("div",null,[a("details",k,[b,a("nav",J,[a("ul",null,[a("li",null,[e(l,{to:"#🍀-软件开发介绍"},{default:n(()=>[s("🍀 软件开发介绍")]),_:1}),a("ul",null,[a("li",null,[e(l,{to:"#计算机编程语言介绍"},{default:n(()=>[s("计算机编程语言介绍")]),_:1})]),a("li",null,[e(l,{to:"#java-语言概述"},{default:n(()=>[s("Java 语言概述")]),_:1})]),a("li",null,[e(l,{to:"#java-程序运行机制及运行过程"},{default:n(()=>[s("Java 程序运行机制及运行过程")]),_:1})])])]),a("li",null,[e(l,{to:"#🍀-安装-jdk"},{default:n(()=>[s("🍀 安装 JDK")]),_:1}),a("ul",null,[a("li",null,[e(l,{to:"#jdk-java-development-kit"},{default:n(()=>[s("JDK (Java Development Kit)")]),_:1})]),a("li",null,[e(l,{to:"#jre-java-runtime-environment"},{default:n(()=>[s("JRE (Java Runtime Environment)")]),_:1})]),a("li",null,[e(l,{to:"#下载-jdk"},{default:n(()=>[s("下载 JDK")]),_:1})]),a("li",null,[e(l,{to:"#设置环境变量"},{default:n(()=>[s("设置环境变量")]),_:1})])])]),a("li",null,[e(l,{to:"#🍀-第一个-java-程序"},{default:n(()=>[s("🍀 第一个 Java 程序")]),_:1}),a("ul",null,[a("li",null,[e(l,{to:"#hello-world"},{default:n(()=>[s("Hello World")]),_:1})]),a("li",null,[e(l,{to:"#如何执行-java-程序"},{default:n(()=>[s("如何执行 Java 程序")]),_:1})]),a("li",null,[e(l,{to:"#对第一个-java-程序进行总结"},{default:n(()=>[s("对第一个 Java 程序进行总结：")]),_:1})]),a("li",null,[e(l,{to:"#java-api-文档"},{default:n(()=>[s("* Java API 文档")]),_:1})])])]),a("li",null,[e(l,{to:"#🍀-使用-ide"},{default:n(()=>[s("🍀 使用 IDE")]),_:1}),a("ul",null,[a("li",null,[e(l,{to:"#ide"},{default:n(()=>[s("IDE")]),_:1})]),a("li",null,[e(l,{to:"#intellij-idea"},{default:n(()=>[s("IntelliJ Idea")]),_:1})])])])])])]),_,x,j,y,f,E,w,D,H,M,I,A,P,a("p",null,[s("下载地址："),a("a",S,[s("Oracle"),e(i)])]),K,a("p",null,[a("a",V,[s("下载 API"),e(i)])]),R])}const T=o(g,[["render",N],["__file","index.html.vue"]]);export{T as default};
