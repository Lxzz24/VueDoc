import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as s,w as t,d as u,e as p}from"./app-CvlAI_tu.js";const l="/VueDoc/assets/20221123212717-BYkAMVjp.png",r={},k={class:"hint-container details"},d=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=u('<p>ZipInputStream 是一种 FilterInputStream，它可以直接读取 zip 包的内容：</p><figure><img src="'+l+`" alt="20221123212717" tabindex="0" loading="lazy"><figcaption>20221123212717</figcaption></figure><p>另一个 JarInputStream 是从 ZipInputStream 派生，它增加的主要功能是直接读取 jar 文件里面的 MANIFEST.MF 文件。因为本质上 jar 包就是 zip 包，只是额外附加了一些固定的描述文件。</p><h2 id="🍀-读取-zip-包" tabindex="-1"><a class="header-anchor" href="#🍀-读取-zip-包" aria-hidden="true">#</a> 🍀 读取 zip 包</h2><p>我们来看看 ZipInputStream 的基本用法。</p><p>我们要创建一个 ZipInputStream，通常是传入一个 FileInputStream 作为数据源，然后，循环调用 getNextEntry()，直到返回 null，表示 zip 流结束。</p><p>一个 ZipEntry 表示一个压缩文件或目录，如果是压缩文件，我们就用 read() 方法不断读取，直到返回 - 1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ZipInputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-写入-zip-包" tabindex="-1"><a class="header-anchor" href="#🍀-写入-zip-包" aria-hidden="true">#</a> 🍀 写入 zip 包</h2><p>ZipOutputStream 是一种 FilterOutputStream，它可以直接写入内容到 zip 包。我们要先创建一个 ZipOutputStream，通常是包装一个 FileOutputStream，然后，每写入一个文件前，先调用 putNextEntry()，然后用 write() 写入 byte[] 数据，写入完毕后调用 closeEntry() 结束这个文件的打包。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ZipOutputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        zip<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zip<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zip<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码没有考虑文件的目录结构。如果要实现目录层次结构，new ZipEntry(name) 传入的 name 要用相对路径。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>ZipInputStream 可以读取 zip 格式的流，ZipOutputStream 可以把多份数据写入 zip 包；</p><p>配合 FileInputStream 和 FileOutputStream 就可以读写 zip 文件。</p>`,15);function f(y,b){const a=o("router-link");return c(),i("div",null,[n("details",k,[d,n("nav",m,[n("ul",null,[n("li",null,[s(a,{to:"#🍀-读取-zip-包"},{default:t(()=>[p("🍀 读取 zip 包")]),_:1})]),n("li",null,[s(a,{to:"#🍀-写入-zip-包"},{default:t(()=>[p("🍀 写入 zip 包")]),_:1})]),n("li",null,[s(a,{to:"#🍀-小结"},{default:t(()=>[p("🍀 小结")]),_:1})])])])]),v])}const w=e(r,[["render",f],["__file","5.html.vue"]]);export{w as default};
