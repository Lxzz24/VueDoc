import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as u,a as n,b as a,w as e,e as s,d as o}from"./app-CvlAI_tu.js";const d={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),v={class:"table-of-contents"},m=o(`<h2 id="🍀-分割字符串" tabindex="-1"><a class="header-anchor" href="#🍀-分割字符串" aria-hidden="true">#</a> 🍀 分割字符串</h2><p>使用正则表达式分割字符串可以实现更加灵活的功能。<code>String.split()</code> 方法传入的正是正则表达式。我们来看下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token string">&quot;a b c&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }</span>
<span class="token string">&quot;a b  c&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &quot;a&quot;, &quot;b&quot;, &quot;&quot;,&quot;c&quot; }</span>
<span class="token string">&quot;a, b ;; c&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;[\\\\,\\\\;\\\\s]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想让用户输入一组标签，然后把标签提取出来，因为用户的输入往往是不规范的，这时，使用合适的正则表达式，就可以消除多个空格、混合 <code>,</code> 和 <code>;</code> 这些不规范的输入，直接提取出规范的字符串。</p><h2 id="🍀-搜索字符串" tabindex="-1"><a class="header-anchor" href="#🍀-搜索字符串" aria-hidden="true">#</a> 🍀 搜索字符串</h2><p>使用正则表达式还可以搜索字符串，我们来看例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;the quick brown fox jumps over the lazy dog.&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\wo\\\\w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> sub <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们获取到 <code>Matcher</code> 对象后，不需要调用 <code>matches()</code> 方法（因为匹配整个串肯定返回 false），而是反复调用 <code>find()</code> 方法，在整个串中搜索能匹配上 <code>\\\\wo\\\\w</code> 规则的子串，并打印出来。这种方式比 <code>String.indexOf()</code> 要灵活得多，因为我们搜索的规则是 3 个字符：中间必须是 <code>o</code>，前后两个必须是字符 <code>[A-Za-z0-9_]</code>。</p><h2 id="🍀-替换字符串" tabindex="-1"><a class="header-anchor" href="#🍀-替换字符串" aria-hidden="true">#</a> 🍀 替换字符串</h2><p>使用正则表达式替换字符串可以直接调用 <code>String.replaceAll()</code>，它的第一个参数是正则表达式，第二个参数是待替换的字符串。我们还是来看例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;The     quick\\t\\t brown   fox  jumps   over the  lazy dog.&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;The quick brown fox jumps over the lazy dog.&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码把不规范的连续空格分隔的句子变成了规范的句子。可见，灵活使用正则表达式可以大大降低代码量。</p><h2 id="🍀-反向引用" tabindex="-1"><a class="header-anchor" href="#🍀-反向引用" aria-hidden="true">#</a> 🍀 反向引用</h2><p>如果我们要把搜索到的指定字符串按规则替换，比如前后各加一个 <code>&lt;b&gt;xxxx&lt;/b&gt;</code>，这个时候，使用 <code>replaceAll()</code> 的时候，我们传入的第二个参数可以使用 <code>$1</code>、<code>$2</code> 来反向引用匹配到的子串。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;the quick brown fox jumps over the lazy dog.&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s([a-z]{4})\\\\s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;b&gt;$1&lt;/b&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的运行结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>the quick brown fox jumps &lt;b&gt;over&lt;/b&gt; the &lt;b&gt;lazy&lt;/b&gt; dog.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它实际上把任何 4 字符单词的前后用 <code>&lt;b&gt;xxxx&lt;/b&gt;</code> 括起来。实现替换的关键就在于 <code>&quot;&lt;b&gt;$1&lt;/b&gt;&quot;</code>，它用匹配的分组子串 <code>([a-z]{4})</code> 替换了 <code>$1</code>。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>模板引擎是指，定义一个字符串作为模板：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, \${name}! You are learning \${lang}!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，以 <code>\${key}</code> 表示的是变量，也就是将要被替换的内容</p><p>当传入一个 <code>Map&lt;String, String&gt;</code> 给模板后，需要把对应的 key 替换为 Map 的 value。</p><p>例如，传入 <code>Map</code> 为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;name&quot;: &quot;Bob&quot;,
    &quot;lang&quot;: &quot;Java&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，<code>\${name}</code> 被替换为 <code>Map</code> 对应的值 &quot;Bob”，<code>\${lang}</code> 被替换为 <code>Map</code> 对应的值&quot;Java&quot;，最终输出的结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, Bob! You are learning Java!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请编写一个简单的模板引擎，利用正则表达式实现这个功能。</p>`,28),b={href:"https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuilder,java.lang.String)",target:"_blank",rel:"noopener noreferrer"},g=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span>

	<span class="token keyword">final</span> <span class="token class-name">String</span> template<span class="token punctuation">;</span>
	<span class="token keyword">final</span> <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\$\\\\{(\\\\w+)\\\\}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token class-name">String</span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>template <span class="token operator">=</span> template<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Matcher</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// TODO:</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token string">&quot;??&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用正则表达式可以：</p><ul><li>分割字符串：<code>String.split()</code></li><li>搜索子串：<code>Matcher.find()</code></li><li>替换字符串：<code>String.replaceAll()</code></li></ul>`,4);function h(q,f){const t=p("router-link"),c=p("ExternalLinkIcon");return i(),u("div",null,[n("details",r,[k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#🍀-分割字符串"},{default:e(()=>[s("🍀 分割字符串")]),_:1})]),n("li",null,[a(t,{to:"#🍀-搜索字符串"},{default:e(()=>[s("🍀 搜索字符串")]),_:1})]),n("li",null,[a(t,{to:"#🍀-替换字符串"},{default:e(()=>[s("🍀 替换字符串")]),_:1})]),n("li",null,[a(t,{to:"#🍀-反向引用"},{default:e(()=>[s("🍀 反向引用")]),_:1})]),n("li",null,[a(t,{to:"#🍀-练习"},{default:e(()=>[s("🍀 练习")]),_:1})]),n("li",null,[a(t,{to:"#🍀-小结"},{default:e(()=>[s("🍀 小结")]),_:1})])])])]),m,n("p",null,[s("提示：参考 "),n("a",b,[s("Matcher.appendReplacement()"),a(c)]),s(" 方法。")]),g])}const y=l(d,[["render",h],["__file","6.html.vue"]]);export{y as default};
