import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as t,a as n,b as o,w as p,d as l,e as u}from"./app-CvlAI_tu.js";const i={},d={class:"hint-container details"},r=n("summary",null,"目录",-1),k={class:"table-of-contents"},m=l(`<p>我们通常使用 <code>new</code> 操作符创建新的实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果通过反射来创建新的实例，可以调用 <code>Class</code> 提供的 <code>newInstance()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>Class.newInstance()</code> 的局限是，它只能调用该类的 <code>public</code> 无参数构造方法。如果构造方法带有参数，或者不是 <code>public</code>，就无法直接通过 <code>Class.newInstance()</code> 来调用。</p><p>为了调用任意的构造方法，Java 的反射 API 提供了 <code>Constructor</code> 对象，它包含一个构造方法的所有信息，可以创建一个实例。<code>Constructor</code> 对象和 <code>Method</code> 非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取构造方法 Integer(int):</span>
        <span class="token class-name">Constructor</span> cons1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用构造方法:</span>
        <span class="token class-name">Integer</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> cons1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取构造方法 Integer(String)</span>
        <span class="token class-name">Constructor</span> cons2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> cons2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>Class</code> 实例获取 <code>Constructor</code> 的方法如下：</p><ul><li><code>getConstructor(Class...)</code> ：获取某个 <code>public</code> 的 <code>Constructor</code> ；</li><li><code>getDeclaredConstructor(Class...)</code> ：获取某个 <code>Constructor</code> ；</li><li><code>getConstructors()</code> ：获取所有 <code>public</code> 的 <code>Constructor</code> ；</li><li><code>getDeclaredConstructors()</code> ：获取所有 <code>Constructor</code> 。</li></ul><blockquote><p>[!warning] &gt; <code>Constructor</code> 总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。</p></blockquote><p>调用非 <code>public</code> 的 <code>Constructor</code> 时，必须首先通过 <code>setAccessible(true)</code> 设置允许访问。<code>setAccessible(true)</code> 可能会失败。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p><code>Constructor</code> 对象封装了构造方法的所有信息；</p><ul><li>通过 <code>Class</code> 实例的方法可以获取 <code>Constructor</code> 实例： <code>getConstructor()</code>，<code>getConstructors()</code>，<code>getDeclaredConstructor()</code>，<code>getDeclaredConstructors()</code> ；</li><li>通过 <code>Constructor</code> 实例可以创建一个实例对象： <code>newInstance(Object... parameters)</code> ； 通过设置 <code>setAccessible(true)</code> 来访问非 <code>public</code> 构造方法。</li></ul>`,14);function v(b,g){const s=e("router-link");return c(),t("div",null,[n("details",d,[r,n("nav",k,[n("ul",null,[n("li",null,[o(s,{to:"#🍀-小结"},{default:p(()=>[u("🍀 小结")]),_:1})])])])]),m])}const _=a(i,[["render",v],["__file","4.html.vue"]]);export{_ as default};
