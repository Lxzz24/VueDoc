const t=JSON.parse('{"key":"v-59be2848","path":"/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/12.html","title":"使用 ReadWriteLock","lang":"zh-CN","frontmatter":{"title":"使用 ReadWriteLock","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 前面讲到的 ReentrantLock 保证了只有一个线程可以执行临界区代码： 但是有些时候，这种保护有点过头。因为我们发现，任何时刻，只允许一个线程修改，也就是调用 inc() 方法是必须获取锁，但是，get() 方法只读取数据，不修改数据，它实际上允许多个线程同时调用。 实际上我们想要的是：允许多个线程同时读，但只要有一个线程...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/12.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"使用 ReadWriteLock"}],["meta",{"property":"og:description","content":"目录 [[toc]] 前面讲到的 ReentrantLock 保证了只有一个线程可以执行临界区代码： 但是有些时候，这种保护有点过头。因为我们发现，任何时刻，只允许一个线程修改，也就是调用 inc() 方法是必须获取锁，但是，get() 方法只读取数据，不修改数据，它实际上允许多个线程同时调用。 实际上我们想要的是：允许多个线程同时读，但只要有一个线程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 ReadWriteLock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"1-Java/13_多线程/12.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
