import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as d,a as n,b as a,w as t,e as s,d as l}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=l(`<p>数据库事务（Transaction）是由若干个 SQL 语句构成的一个操作序列，有点类似于 Java 的 <code>synchronized</code> 同步。数据库系统保证在一个事务中的所有 SQL 要么全部执行成功，要么全部不执行，即数据库事务具有 ACID 特性：</p><ul><li>Atomicity：原子性</li><li>Consistency：一致性</li><li>Isolation：隔离性</li><li>Durability：持久性</li></ul><p>数据库事务可以并发执行，而数据库系统从效率考虑，对事务定义了不同的隔离级别。SQL 标准定义了 4 种隔离级别，分别对应可能出现的数据不一致的情况：</p><table><thead><tr><th style="text-align:left;">Isolation Level</th><th style="text-align:left;">脏读（Dirty Read）</th><th style="text-align:left;">不可重复读（Non Repeatable Read）</th><th style="text-align:left;">幻读（Phantom Read）</th></tr></thead><tbody><tr><td style="text-align:left;">Read Uncommitted</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td></tr><tr><td style="text-align:left;">Read Committed</td><td style="text-align:left;">-</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td></tr><tr><td style="text-align:left;">Repeatable Read</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">Yes</td></tr><tr><td style="text-align:left;">Serializable</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr></tbody></table><p>对应用程序来说，数据库事务非常重要，很多运行着关键任务的应用程序，都必须依赖数据库事务保证程序的结果正常。</p><p>举个例子：假设小明准备给小红支付 100，两人在数据库中的记录主键分别是 <code>123</code> 和 <code>456</code>，那么用两条 SQL 语句操作如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">AND</span> balance <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两条语句必须以事务方式执行才能保证业务的正确性，因为一旦第一条 SQL 执行成功而第二条 SQL 失败的话，系统的钱就会凭空减少 100，而有了事务，要么这笔转账成功，要么转账失败，双方账户的钱都不变。</p>`,8),b=l(`<p>要在 JDBC 中执行事务，本质上就是如何把多条 SQL 包裹在一个数据库事务中执行。我们来看 JDBC 的事务代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 关闭自动提交:</span>
    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行多条 SQL 语句:</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 提交事务:</span>
    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回滚事务:</span>
    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，开启事务的关键代码是 <code>conn.setAutoCommit(false)</code>，表示关闭自动提交。提交事务的代码在执行完指定的若干条 SQL 语句后，调用 <code>conn.commit()</code>。要注意事务不是总能成功，如果事务提交失败，会抛出 SQL 异常（也可能在执行 SQL 语句的时候就抛出了），此时我们必须捕获并调用 <code>conn.rollback()</code> 回滚事务。最后，在 <code>finally</code> 中通过 <code>conn.setAutoCommit(true)</code> 把 <code>Connection</code> 对象的状态恢复到初始值。</p><p>实际上，默认情况下，我们获取到 <code>Connection</code> 连接后，总是处于 “自动提交” 模式，也就是每执行一条 SQL 都是作为事务自动执行的，这也是为什么前面几节我们的更新操作总能成功的原因：因为默认有这种“隐式事务”。只要关闭了 <code>Connection</code> 的 <code>autoCommit</code>，那么就可以在一个事务中执行多条语句，事务以 <code>commit()</code> 方法结束。</p><p>如果要设定事务的隔离级别，可以使用如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设定隔离级别为 READ COMMITTED:</span>
conn<span class="token punctuation">.</span><span class="token function">setTransactionIsolation</span><span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_READ_COMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有调用上述方法，那么会使用数据库的默认隔离级别。MySQL 的默认隔离级别是 <code>REPEATABLE_READ</code>。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用数据库事务</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>数据库事务（Transaction）具有 ACID 特性：</p><ul><li>Atomicity：原子性</li><li>Consistency：一致性</li><li>Isolation：隔离性</li><li>Durability：持久性</li></ul><p>JDBC 提供了事务的支持，使用 Connection 可以开启、提交或回滚事务。</p>`,13);function f(y,h){const e=o("router-link"),c=o("RouterLink");return i(),d("div",null,[n("details",r,[k,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#🍀-练习"},{default:t(()=>[s("🍀 练习")]),_:1})]),n("li",null,[a(e,{to:"#🍀-小结"},{default:t(()=>[s("🍀 小结")]),_:1})])])])]),v,n("p",null,[s("这里我们不讨论详细的 SQL 事务，如果对 SQL 事务不熟悉，请参考 "),a(c,{to:"/2-SQL/LXF/#%E4%BA%8B%E5%8A%A1"},{default:t(()=>[s("SQL 事务")]),_:1}),s("。")]),b])}const x=p(u,[["render",f],["__file","4.html.vue"]]);export{x as default};
