import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as t,d as u,e}from"./app-CvlAI_tu.js";const i={},r={class:"hint-container details"},d=n("summary",null,"目录",-1),k={class:"table-of-contents"},v=u(`<p>匹配开头和结尾</p><p>用正则表达式进行多行匹配时，我们用 ^ 表示开头，$ 表示结尾。例如，^A\\d{3}$，可以匹配 &quot;A001&quot;、&quot;A380&quot;。</p><p>匹配指定范围</p><p>如果我们规定一个 7~8 位数字的电话号码不能以 0 开头，应该怎么写匹配规则呢？\\d{7,8} 是不行的，因为第一个 \\d 可以匹配到 0。</p><p>使用 [...] 可以匹配范围内的字符，例如，[123456789]可以匹配 1~9，这样就可以写出上述电话号码的规则：[123456789]\\d{6,7}。</p><p>把所有字符全列出来太麻烦，[...]还有一种写法，直接写 [1-9] 就可以。</p><p>要匹配大小写不限的十六进制数，比如 1A2b3c，我们可以这样写：[0-9a-fA-F]，它表示一共可以匹配以下任意范围的字符：</p><p>0-9：字符 0~9； a-f：字符 a~f； A-F：字符 A~F。 如果要匹配 6 位十六进制数，前面讲过的 {n} 仍然可以继续配合使用：[0-9a-fA-F]{6}。</p><p>[...] 还有一种排除法，即不包含指定范围的字符。假设我们要匹配任意字符，但不包括数字，可以写 [^1-9]{3}：</p><ul><li>可以匹配 &quot;ABC&quot;，因为不包含字符 1~9；</li><li>可以匹配 &quot;A00&quot;，因为不包含字符 1~9；</li><li>不能匹配 &quot;A01&quot;，因为包含字符 1；</li><li>不能匹配 &quot;A05&quot;，因为包含字符 5。</li></ul><h2 id="🍀-或规则匹配" tabindex="-1"><a class="header-anchor" href="#🍀-或规则匹配" aria-hidden="true">#</a> 🍀 或规则匹配</h2><p>用 | 连接的两个正则规则是<strong>或</strong>规则，例如，AB|CD 表示可以匹配 AB 或 CD。</p><p>我们来看这个正则表达式 java|php：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> re <span class="token operator">=</span> <span class="token string">&quot;java|php&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;php&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它可以匹配 &quot;java&quot; 或 &quot;php&quot;，但无法匹配 &quot;go&quot;。</p><p>要把 go 也加进来匹配，可以改写为 java|php|go。</p><h2 id="🍀-使用括号" tabindex="-1"><a class="header-anchor" href="#🍀-使用括号" aria-hidden="true">#</a> 🍀 使用括号</h2><p>现在我们想要匹配字符串 learn java、learn php 和 learn go 怎么办？一个最简单的规则是 learn\\sjava|learn\\sphp|learn\\sgo，但是这个规则太复杂了，可以把公共部分提出来，然后用 (...) 把子规则括起来表示成 learn\\s(java|php|go)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// regex</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> re <span class="token operator">=</span> <span class="token string">&quot;learn\\\\s(java|php|go)&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn java&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn Java&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn php&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;learn Go&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的规则仍然不能匹配 learn Java、learn Go 这样的字符串。试修改正则，使之能匹配大写字母开头的 learn Java、learn Php、learn Go。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>复杂匹配规则主要有：</p><table><thead><tr><th style="text-align:center;">正则表达式</th><th style="text-align:center;">规则</th><th style="text-align:center;">可以匹配</th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td style="text-align:center;">开头</td><td style="text-align:center;">字符串开头</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">结尾</td><td style="text-align:center;">字符串结束</td></tr><tr><td style="text-align:center;">[ABC]</td><td style="text-align:center;">[...] 内任意字符</td><td style="text-align:center;">A, B, C</td></tr><tr><td style="text-align:center;">[A-F0-9xy]</td><td style="text-align:center;">指定范围的字符</td><td style="text-align:center;">A, ..., F, 0, ..., 9, x, y</td></tr><tr><td style="text-align:center;">[^A-F]</td><td style="text-align:center;">指定范围外的任意字符</td><td style="text-align:center;">非 A, ..., F</td></tr><tr><td style="text-align:center;">AB|CD</td><td style="text-align:center;">AB 或 CD</td><td style="text-align:center;">AB, CD</td></tr><tr><td style="text-align:center;">AB|CD|EFG</td><td style="text-align:center;">AB 或 CD 或 EFG</td><td style="text-align:center;">AB, CD, EFG</td></tr></tbody></table>`,23);function m(g,h){const s=o("router-link");return c(),l("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-或规则匹配"},{default:t(()=>[e("🍀 或规则匹配")]),_:1})]),n("li",null,[a(s,{to:"#🍀-使用括号"},{default:t(()=>[e("🍀 使用括号")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),v])}const b=p(i,[["render",m],["__file","3.html.vue"]]);export{b as default};
