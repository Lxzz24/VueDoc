import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as r,a,b as s,w as e,d as l,e as t}from"./app-CvlAI_tu.js";const i={},u={class:"hint-container details"},d=a("summary",null,"目录",-1),k={class:"table-of-contents"},m=l(`<p>Reader 是 Java 的 IO 库提供的另一个输入流接口。和 InputStream 的区别是，InputStream 是一个字节流，即以 byte 为单位读取，而 Reader 是一个字符流，即以 char 为单位读取：</p><table><thead><tr><th>InputStream</th><th>Reader</th></tr></thead><tbody><tr><td>字节流，以 byte 为单位</td><td>字符流，以 char 为单位</td></tr><tr><td>读取字节（-1，0~255）：int read()</td><td>读取字符（-1，0~65535）：int read()</td></tr><tr><td>读到字节数组：int read(byte[] b)</td><td>读到字符数组：int read(char[] c)</td></tr></tbody></table><p>java.io.Reader 是所有字符输入流的超类，它最主要的方法是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法读取字符流的下一个字符，并返回字符表示的 int，范围是 0~65535。如果已读到末尾，返回 - 1。</p><h2 id="🍀-filereader" tabindex="-1"><a class="header-anchor" href="#🍀-filereader" aria-hidden="true">#</a> 🍀 FileReader</h2><p>FileReader 是 Reader 的一个子类，它可以打开文件并获取 Reader。下面的代码演示了如何完整地读取一个 FileReader 的所有字符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个 FileReader 对象:</span>
    <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符编码是???</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反复调用 read() 方法，直到返回 - 1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 char</span>
    <span class="token punctuation">}</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭流</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们读取一个纯 ASCII 编码的文本文件，上述代码工作是没有问题的。但如果文件中包含中文，就会出现乱码，因为 FileReader 默认的编码与系统相关，例如，Windows 系统的默认编码可能是 GBK，打开一个 UTF-8 编码的文本文件就会出现乱码。</p><p>要避免乱码问题，我们需要在创建 FileReader 时指定编码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和 InputStream 类似，Reader 也是一种资源，需要保证出错的时候也能正确关闭，所以我们需要用 try (resource) 来保证 Reader 在无论有没有 IO 错误的时候都能够正确地关闭：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reader 还提供了一次性读取若干字符并填充到 char[] 数组的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它返回实际读入的字符个数，最大不超过 char[] 数组的长度。返回 - 1 表示流结束。</p><p>利用这个方法，我们可以先设置一个缓冲区，然后，每次尽可能地填充缓冲区：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot;chars.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-chararrayreader" tabindex="-1"><a class="header-anchor" href="#🍀-chararrayreader" aria-hidden="true">#</a> 🍀 CharArrayReader</h2><p>CharArrayReader 可以在内存中模拟一个 Reader，它的作用实际上是把一个 char[] 数组变成一个 Reader，这和 ByteArrayInputStream 非常类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-stringreader" tabindex="-1"><a class="header-anchor" href="#🍀-stringreader" aria-hidden="true">#</a> 🍀 StringReader</h2><p>StringReader 可以直接把 String 作为数据源，它和 CharArrayReader 几乎一样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-inputstreamreader" tabindex="-1"><a class="header-anchor" href="#🍀-inputstreamreader" aria-hidden="true">#</a> 🍀 InputStreamReader</h2><p>Reader 和 InputStream 有什么关系？</p><p>除了特殊的 CharArrayReader 和 StringReader，普通的 Reader 实际上是基于 InputStream 构造的，因为 Reader 需要从 InputStream 中读入字节流（byte），然后，根据编码设置，再转换为 char 就可以实现字符流。如果我们查看 FileReader 的源码，它在内部实际上持有一个 FileInputStream。</p><p>既然 Reader 本质上是一个基于 InputStream 的 byte 到 char 的转换器，那么，如果我们已经有一个 InputStream，想把它转换为 Reader，是完全可行的。InputStreamReader 就是这样一个转换器，它可以把任何 InputStream 转换为 Reader。示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 持有 InputStream:</span>
<span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 变换为 Reader:</span>
<span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造 InputStreamReader 时，我们需要传入 InputStream，还需要指定编码，就可以得到一个 Reader 对象。上述代码可以通过 try (resource) 更简洁地改写如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO:</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码实际上就是 FileReader 的一种实现方式。</p><p>使用 try (resource) 结构时，当我们关闭 Reader 时，它会在内部自动调用 InputStream 的 close() 方法，所以，只需要关闭最外层的 Reader 对象即可。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 InputStreamReader，可以把一个 InputStream 转换成一个 Reader。</p></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Reader 定义了所有字符输入流的超类：</p><ul><li>FileReader 实现了文件字符流输入，使用时需要指定编码；</li><li>CharArrayReader 和 StringReader 可以在内存中模拟一个字符流输入。</li></ul><p>Reader 是基于 InputStream 构造的：可以通过 InputStreamReader 在指定编码的同时将任何 InputStream 转换为 Reader。</p><p>总是使用 try (resource) 保证 Reader 正确关闭。</p>`,39);function v(h,b){const n=o("router-link");return c(),r("div",null,[a("details",u,[d,a("nav",k,[a("ul",null,[a("li",null,[s(n,{to:"#🍀-filereader"},{default:e(()=>[t("🍀 FileReader")]),_:1})]),a("li",null,[s(n,{to:"#🍀-chararrayreader"},{default:e(()=>[t("🍀 CharArrayReader")]),_:1})]),a("li",null,[s(n,{to:"#🍀-stringreader"},{default:e(()=>[t("🍀 StringReader")]),_:1})]),a("li",null,[s(n,{to:"#🍀-inputstreamreader"},{default:e(()=>[t("🍀 InputStreamReader")]),_:1})]),a("li",null,[s(n,{to:"#🍀-小结"},{default:e(()=>[t("🍀 小结")]),_:1})])])])]),m])}const g=p(i,[["render",v],["__file","8.html.vue"]]);export{g as default};
