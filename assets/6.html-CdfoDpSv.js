const t=JSON.parse('{"key":"v-40c64d5f","path":"/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/6.html","title":"线程同步","lang":"zh-CN","frontmatter":{"title":"线程同步","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。 这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。 我们来看一个例子： ```java // 多线程 public class Ma...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/6.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"线程同步"}],["meta",{"property":"og:description","content":"目录 [[toc]] 当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。 这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。 我们来看一个例子： ```java // 多线程 public class Ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程同步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 不需要 synchronized 的操作","slug":"🍀-不需要-synchronized-的操作","link":"#🍀-不需要-synchronized-的操作","children":[]},{"level":2,"title":"🍀 不可变对象无需同步","slug":"🍀-不可变对象无需同步","link":"#🍀-不可变对象无需同步","children":[]},{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":9.23,"words":2769},"filePathRelative":"1-Java/13_多线程/6.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
