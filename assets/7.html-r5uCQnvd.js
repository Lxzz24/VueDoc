import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as i,a as n,b as a,w as o,e as s,d as u}from"./app-CvlAI_tu.js";const d="/VueDoc/assets/image-20231219151351277--y_1jnzp.png",k={},r={class:"hint-container details"},m=n("summary",null,"目录",-1),v={class:"table-of-contents"},b=u(`<p>Java 的 RMI 远程调用是指，一个 JVM 中的代码可以通过网络实现远程调用另一个 JVM 的某个方法。RMI 是 Remote Method Invocation 的缩写。</p><p>提供服务的一方我们称之为服务器，而实现远程调用的一方我们称之为客户端。</p><p>我们先来实现一个最简单的 RMI：服务器会提供一个 <code>WorldClock</code> 服务，允许客户端获取指定时区的时间，即允许客户端调用下面的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要实现 RMI，服务器和客户端必须共享同一个接口。我们定义一个 <code>WorldClock</code> 接口，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorldClock</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 的 RMI 规定此接口必须派生自 <code>java.rmi.Remote</code>，并在每个方法声明抛出 <code>RemoteException</code>。</p><p>下一步是编写服务器的实现类，因为客户端请求的调用方法 <code>getLocalDateTime()</code> 最终会通过这个实现类返回结果。实现类 <code>WorldClockService</code> 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorldClockService</span> <span class="token keyword">implements</span> <span class="token class-name">WorldClock</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，服务器端的服务相关代码就编写完毕。我们需要通过 Java RMI 提供的一系列底层支持接口，把上面编写的服务以 RMI 的形式暴露在网络上，客户端才能调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;create World clock remote service...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 实例化一个 WorldClock:</span>
        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorldClockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将此服务转换为远程服务接口:</span>
        <span class="token class-name">WorldClock</span> skeleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>worldClock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将 RMI 服务注册到 1099 端口:</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册此服务，服务名为 &quot;WorldClock&quot;:</span>
        registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">&quot;WorldClock&quot;</span><span class="token punctuation">,</span> skeleton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码主要目的是通过 RMI 提供的相关类，将我们自己的 <code>WorldClock</code> 实例注册到 RMI 服务上。RMI 的默认端口是 <code>1099</code>，最后一步注册服务时通过 <code>rebind()</code> 指定服务名称为 <code>&quot;WorldClock&quot;</code>。</p><p>下一步我们就可以编写客户端代码。RMI 要求服务器和客户端共享同一个接口，因此我们要把 <code>WorldClock.java</code> 这个接口文件复制到客户端，然后在客户端实现 RMI 调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 连接到服务器 localhost，端口 1099:</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找名称为 &quot;WorldClock&quot; 的服务并强制转型为 WorldClock 接口:</span>
        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;WorldClock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常调用接口方法:</span>
        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印调用结果:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先运行服务器，再运行客户端。从运行结果可知，因为客户端只有接口，并没有实现类，因此，客户端获得的接口方法返回值实际上是通过网络从服务器端获取的。整个过程实际上非常简单，对客户端来说，客户端持有的 <code>WorldClock</code> 接口实际上对应了一个 “实现类”，它是由 <code>Registry</code> 内部动态生成的，并负责把方法调用通过网络传递到服务器端。而服务器端接收网络调用的服务并不是我们自己编写的 <code>WorldClockService</code>，而是 <code>Registry</code> 自动生成的代码。我们把客户端的“实现类” 称为 <code>stub</code>，而服务器端的网络服务类称为 <code>skeleton</code>，它会真正调用服务器端的 <code>WorldClockService</code>，获取结果，然后把结果通过网络传递给客户端。整个过程由 RMI 底层负责实现序列化和反序列化：</p><figure><img src="`+d+'" alt="image-20231219151351277" tabindex="0" loading="lazy"><figcaption>image-20231219151351277</figcaption></figure><p>Java 的 RMI 严重依赖序列化和反序列化，而这种情况下可能会造成严重的安全漏洞，因为 Java 的序列化和反序列化不但涉及到数据，还涉及到二进制的字节码，即使使用白名单机制也很难保证 100% 排除恶意构造的字节码。因此，使用 RMI 时，双方必须是内网互相信任的机器，不要把 1099 端口暴露在公网上作为对外服务。</p>',17),g={href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"🍀-练习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🍀-练习","aria-hidden":"true"},"#"),s(" 🍀 练习")],-1),h=n("p",null,"使用 RMI 远程调用",-1),R=n("h2",{id:"🍀-小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🍀-小结","aria-hidden":"true"},"#"),s(" 🍀 小结")],-1),y=n("p",null,"Java 提供了 RMI 实现远程方法调用：",-1),w=n("p",null,"RMI 通过自动生成 stub 和 skeleton 实现网络调用，客户端只需要查找服务并获得接口实例，服务器端只需要编写实现类并注册为服务；",-1),f=n("p",null,"RMI 的序列化和反序列化可能会造成安全漏洞，因此调用双方必须是内网互相信任的机器，不要把 1099 端口暴露在公网上作为对外服务。",-1);function C(I,M){const e=t("router-link"),c=t("ExternalLinkIcon");return l(),i("div",null,[n("details",r,[m,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#🍀-练习"},{default:o(()=>[s("🍀 练习")]),_:1})]),n("li",null,[a(e,{to:"#🍀-小结"},{default:o(()=>[s("🍀 小结")]),_:1})])])])]),b,n("p",null,[s("此外，Java 的 RMI 调用机制决定了双方必须是 Java 程序，其他语言很难调用 Java 的 RMI。如果要使用不同语言进行 RPC 调用，可以选择更通用的协议，例如 "),n("a",g,[s("gRPC"),a(c)]),s("。")]),_,h,R,y,w,f])}const j=p(k,[["render",C],["__file","7.html.vue"]]);export{j as default};
