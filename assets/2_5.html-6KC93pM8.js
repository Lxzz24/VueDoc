import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as p}from"./app-CvlAI_tu.js";const t={},e=p(`<blockquote><p>为子系统中的一组接口提供一个一致的界面。Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p></blockquote><p>外观模式，即 Facade ，是一个比较简单的模式。它的基本思想如下：</p><p>如果客户端要跟许多子系统打交道，那么客户端需要了解各个子系统的接口，比较麻烦。如果有一个统一的 “中介”，让客户端只跟中介打交道，中介再去跟各个子系统打交道，对客户端来说就比较简单。所以 Facade 就相当于搞了一个中介。</p><p>我们以注册公司为例，假设注册公司需要三步：</p><ol><li>向工商局申请公司营业执照；</li><li>在银行开设账户；</li><li>在税务局开设纳税号。</li></ol><p>以下是三个系统的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 工商注册:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminOfIndustry</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 银行开户:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">openAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> companyId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 纳税登记:</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taxation</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">applyTaxCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> companyId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子系统比较复杂，并且客户对流程也不熟悉，那就把这些流程全部委托给中介：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Company</span> <span class="token function">openCompany</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Company</span> c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>admin<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> bankAccount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bank<span class="token punctuation">.</span><span class="token function">openAccount</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">setBankAccount</span><span class="token punctuation">(</span>bankAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> taxCode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taxation<span class="token punctuation">.</span><span class="token function">applyTaxCode</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">setTaxCode</span><span class="token punctuation">(</span>taxCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，客户端只跟 Facade 打交道，一次完成公司注册的所有繁琐流程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Company</span> c <span class="token operator">=</span> facade<span class="token punctuation">.</span><span class="token function">openCompany</span><span class="token punctuation">(</span><span class="token string">&quot;Facade Software Ltd.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很多 Web 程序，内部有多个子系统提供服务，经常使用一个统一的 Facade 入口，例如一个 <code>RestApiController</code>，使得外部用户调用的时候，只关心 Facade 提供的接口，不用管内部到底是哪个子系统处理的。</p><p>更复杂的 Web 程序，会有多个 Web 服务，这个时候，经常会使用一个统一的网关入口来自动转发到不同的 Web 服务，这种提供统一入口的网关就是 Gateway，它本质上也是一个 Facade，但可以附加一些用户认证、限流限速的额外服务。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Facade 模式实现一个注册公司的 “中介” 服务。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Facade 模式是为了给客户端提供一个统一入口，并对外屏蔽内部子系统的调用细节。</p>`,17),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","2_5.html.vue"]]);export{k as default};
