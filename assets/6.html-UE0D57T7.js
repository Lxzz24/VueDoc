import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,a as n,b as o,w as c,d as l,e as i}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},d=n("summary",null,"目录",-1),k={class:"table-of-contents"},m=l(`<p>很多 Java 程序启动的时候，都需要读取配置文件。例如，从一个 .properties 文件中读取配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> conf <span class="token operator">=</span> <span class="token string">&quot;C:\\\\conf\\\\default.properties&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO:</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码要正常执行，必须在 C 盘创建 conf 目录，然后在目录里创建 default.properties 文件。但是，在 Linux 系统上，路径和 Windows 的又不一样。</p><p>因此，从磁盘的固定目录读取配置文件，不是一个好的办法。</p><p>有没有路径无关的读取文件的方式呢？</p><p>我们知道，Java 存放. class 的目录或 jar 包也可以包含任意其他类型的文件，例如：</p><ul><li>配置文件，例如 .properties ；</li><li>图片文件，例如 .jpg ；</li><li>文本文件，例如 .txt ，.csv ；</li><li>……</li></ul><p>从 classpath 读取文件就可以避免不同环境下文件路径不一致的问题：如果我们把 default.properties 文件放到 classpath 中，就不用关心它的实际存放路径。</p><p>在 classpath 中的资源文件，路径总是以／开头，我们先获取当前的 Class 对象，然后调用 getResourceAsStream() 就可以直接从 classpath 读取任意的资源文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/default.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO:</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 getResourceAsStream() 需要特别注意的一点是，如果资源文件不存在，它将返回 null。因此，我们需要检查返回的 InputStream 是否为 null，如果为 null，表示资源文件在 classpath 中没有找到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/default.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO:</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们把默认的配置放到 jar 包中，再从外部文件系统读取一个可选的配置文件，就可以做到既有默认的配置文件，又可以让用户自己修改配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">inputStreamFromClassPath</span><span class="token punctuation">(</span><span class="token string">&quot;/default.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">inputStreamFromFile</span><span class="token punctuation">(</span><span class="token string">&quot;./conf.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样读取配置文件，应用程序启动就更加灵活。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>把资源存储在 classpath 中可以避免文件路径依赖；</p><p>Class 对象的 getResourceAsStream() 可以从 classpath 中读取指定资源；</p><p>根据 classpath 读取资源时，需要检查返回的 InputStream 是否为 null。</p>`,19);function v(f,g){const s=t("router-link");return e(),p("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[o(s,{to:"#🍀-小结"},{default:c(()=>[i("🍀 小结")]),_:1})])])])]),m])}const _=a(u,[["render",v],["__file","6.html.vue"]]);export{_ as default};
