import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a,b as t,w as s,d as i,e}from"./app-CvlAI_tu.js";const u={},d={class:"hint-container details"},g=a("summary",null,"目录",-1),k={class:"table-of-contents"},r=i(`<p>XML 是可扩展标记语言（eXtensible Markup Language）的缩写，它是一种数据表示格式，可以描述非常复杂的数据结构，常用于传输和存储数据。</p><p>例如，一个描述书籍的 XML 文档可能如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token name">SYSTEM</span> <span class="token string">&quot;book.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Java 核心技术<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Cay S. Horstmann<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>isbn</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1234567<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>isbn</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tags</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">&gt;</span></span>Network<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tags</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pubDate</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>XML 有几个特点：一是纯文本，默认使用 UTF-8 编码，二是可嵌套，适合表示结构化数据。如果把 XML 内容存为文件，那么它就是一个 XML 文件，例如 <code>book.xml</code>。此外，XML 内容经常通过网络作为消息传输。</p><h2 id="🍀-xml-的结构" tabindex="-1"><a class="header-anchor" href="#🍀-xml-的结构" aria-hidden="true">#</a> 🍀 XML 的结构</h2><p>XML 有固定的结构，首行必定是 <code>&lt;?xml version=&quot;1.0&quot;?&gt;</code>，可以加上可选的编码。紧接着，如果以类似 <code>&lt;!DOCTYPE note SYSTEM &quot;book.dtd&quot;&gt;</code> 声明的是文档定义类型（DTD：Document Type Definition），DTD 是可选的。接下来是 XML 的文档内容，一个 XML 文档有且仅有一个根元素，根元素可以包含任意个子元素，元素可以包含属性，例如，<code>&lt;isbn lang=&quot;CN&quot;&gt;1234567&lt;/isbn&gt;</code> 包含一个属性 <code>lang=&quot;CN&quot;</code>，且元素必须正确嵌套。如果是空元素，可以用 <code>&lt;tag/&gt;</code> 表示。</p><p>由于使用了 <code>&lt;</code>、<code>&gt;</code> 以及引号等标识符，如果内容出现了特殊符号，需要使用 <code>&amp;???;</code> 表示转义。例如，<code>Java&lt;tm&gt;</code> 必须写成：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Java<span class="token entity named-entity" title="&lt;">&amp;lt;</span>tm<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常见的特殊字符如下：</p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">表示</th></tr></thead><tbody><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;"><code>&amp;lt;</code></td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;"><code>&amp;gt;</code></td></tr><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;"><code>&amp;amp;</code></td></tr><tr><td style="text-align:left;">&quot;</td><td style="text-align:left;"><code>&amp;quot;</code></td></tr><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;"><code>&amp;apos;</code></td></tr></tbody></table><p>格式正确的 XML（Well Formed）是指 XML 的格式是正确的，可以被解析器正常读取。而合法的 XML 是指，不但 XML 格式正确，而且它的数据结构可以被 DTD 或者 XSD 验证。</p><p>DTD 文档可以指定一系列规则，例如：</p><ul><li>根元素必须是 <code>book</code></li><li><code>book</code> 元素必须包含 <code>name</code>，<code>author</code> 等指定元素</li><li><code>isbn</code> 元素必须包含属性 <code>lang</code></li><li>...</li></ul><p>如何验证 XML 文件的正确性呢？最简单的方式是通过浏览器验证。可以直接把 XML 文件拖拽到浏览器窗口，如果格式错误，浏览器会报错。</p><p>和结构类似的 HTML 不同，浏览器对 HTML 有一定的 “容错性”，缺少关闭标签也可以被解析，但 XML 要求严格的格式，任何没有正确嵌套的标签都会导致错误。</p><p>XML 是一个技术体系，除了我们经常用到的 XML 文档本身外，XML 还支持：</p><ul><li>DTD 和 XSD：验证 XML 结构和数据是否有效；</li><li>Namespace：XML 节点和属性的名字空间；</li><li>XSLT：把 XML 转化为另一种文本；</li><li>XPath：一种 XML 节点查询语言；</li><li>...</li></ul><p>实际上，XML 的这些相关技术实现起来非常复杂，在实际应用中很少用到，通常了解一下就可以了。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>XML 使用嵌套结构的数据表示方式，支持格式验证；</p><p>XML 常用于配置文件、网络消息传输等。</p>`,21);function m(v,b){const n=p("router-link");return o(),c("div",null,[a("details",d,[g,a("nav",k,[a("ul",null,[a("li",null,[t(n,{to:"#🍀-xml-的结构"},{default:s(()=>[e("🍀 XML 的结构")]),_:1})]),a("li",null,[t(n,{to:"#🍀-小结"},{default:s(()=>[e("🍀 小结")]),_:1})])])])]),r])}const M=l(u,[["render",m],["__file","1.html.vue"]]);export{M as default};
