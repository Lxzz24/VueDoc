import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as s,b as e,w as t,d as c,e as n}from"./app-CvlAI_tu.js";const u={},k={class:"hint-container details"},r=s("summary",null,"目录",-1),d={class:"table-of-contents"},m=c(`<p>当我们获取到某个 <code>Class</code> 对象时，实际上就获取到了一个类的类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment">// 获取到 String 的 Class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以用实例的 <code>getClass()</code> 方法获取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s 是 String，因此获取到 String 的 Class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一种获取 <code>Class</code> 的方法是通过 <code>Class.forName(&quot;&quot;)</code>，传入 <code>Class</code> 的完整类名获取：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> s <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这三种方式获取的 <code>Class</code> 实例都是同一个实例，因为 JVM 对每个加载的 <code>Class</code> 只创建一个 <code>Class</code> 实例来表示它的类型。</p><h2 id="🍀-获取父类的-class" tabindex="-1"><a class="header-anchor" href="#🍀-获取父类的-class" aria-hidden="true">#</a> 🍀 获取父类的 Class</h2><p>有了 <code>Class</code> 实例，我们还可以获取它的父类的 <code>Class</code> ：</p>`,9),v=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{java:"",class:"language-java"},[s("code",null,[s("span",{class:"token comment"},"// reflection"),n(`
`),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"Main"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token keyword"},"public"),n(),s("span",{class:"token keyword"},"static"),n(),s("span",{class:"token keyword"},"void"),n(),s("span",{class:"token function"},"main"),s("span",{class:"token punctuation"},"("),s("span",{class:"token class-name"},"String"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),n(" args"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token keyword"},"throws"),n(),s("span",{class:"token class-name"},"Exception"),n(),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token class-name"},"Class"),n(" i "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"Integer"),s("span",{class:"token punctuation"},"."),s("span",{class:"token keyword"},"class"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token class-name"},"Class"),n(" n "),s("span",{class:"token operator"},"="),n(" i"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getSuperclass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),n("n"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token class-name"},"Class"),n(" o "),s("span",{class:"token operator"},"="),n(" n"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getSuperclass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),n("o"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
        `),s("span",{class:"token class-name"},"System"),s("span",{class:"token punctuation"},"."),n("out"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"println"),s("span",{class:"token punctuation"},"("),n("o"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getSuperclass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
    `),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=c(`<p>运行上述代码，可以看到，<code>Integer</code> 的父类类型是 <code>Number</code>，<code>Number</code> 的父类是 <code>Object</code>，<code>Object</code> 的父类是 <code>null</code> 。除 <code>Object</code> 外，其他任何非 <code>interface</code> 的 <code>Class</code> 都必定存在一个父类类型。</p><h2 id="🍀-获取-interface" tabindex="-1"><a class="header-anchor" href="#🍀-获取-interface" aria-hidden="true">#</a> 🍀 获取 interface</h2><p>由于一个类可能实现一个或多个接口，通过 <code>Class</code> 我们就可以查询到实现的接口类型。例如，查询 <code>Integer</code> 实现的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// reflection</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> is <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> i <span class="token operator">:</span> is<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上述代码可知，<code>Integer</code> 实现的接口有：</p><ul><li>java.lang.Comparable</li><li>java.lang.constant.Constable</li><li>java.lang.constant.ConstantDesc</li></ul><p>要特别注意： <code>getInterfaces()</code> 只返回当前类直接实现的接口类型，并不包括其父类实现的接口类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// reflection</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> is <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> i <span class="token operator">:</span> is<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Integer</code> 的父类是 <code>Number</code>，<code>Number</code> 实现的接口是 java.io.Serializable。</p><p>此外，对所有 <code>interface</code> 的 <code>Class</code> 调用 <code>getSuperclass()</code> 返回的是 <code>null</code>，获取接口的父接口要用 <code>getInterfaces()</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// java.io.FilterInputStream，因为 DataInputStream 继承自 FilterInputStream</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Closeable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null，对接口调用 getSuperclass() 总是返回 null，获取接口的父接口要用 getInterfaces()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个类没有实现任何 <code>interface</code>，那么 <code>getInterfaces()</code> 返回空数组。</p><h2 id="🍀-继承关系" tabindex="-1"><a class="header-anchor" href="#🍀-继承关系" aria-hidden="true">#</a> 🍀 继承关系*</h2><p>当我们判断一个实例是否是某个类型时，正常情况下，使用 <code>instanceof</code> 操作符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isDouble <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Double</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">boolean</span> isInteger <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">boolean</span> isNumber <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">boolean</span> isSerializable <span class="token operator">=</span> n <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是两个 <code>Class</code> 实例，要判断一个向上转型是否成立，可以调用 <code>isAssignableFrom()</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Integer i = ?</span>
<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Integer 可以赋值给 Integer</span>
<span class="token comment">// Number n = ?</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Integer 可以赋值给 Number</span>
<span class="token comment">// Object o = ?</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，因为 Integer 可以赋值给 Object</span>
<span class="token comment">// Integer i = ?</span>
<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，因为 Number 不能赋值给 Integer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>通过 <code>Class</code> 对象可以获取继承关系：</p><ul><li><code>Class getSuperclass()</code> ：获取父类类型；</li><li><code>Class[] getInterfaces()</code> ：获取当前类实现的所有接口。</li></ul><p>通过 <code>Class</code> 对象的 <code>isAssignableFrom()</code> 方法可以判断一个向上转型是否可以实现。</p>`,21);function g(f,h){const a=o("router-link");return l(),i("div",null,[s("details",k,[r,s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#🍀-获取父类的-class"},{default:t(()=>[n("🍀 获取父类的 Class")]),_:1})]),s("li",null,[e(a,{to:"#🍀-获取-interface"},{default:t(()=>[n("🍀 获取 interface")]),_:1})]),s("li",null,[e(a,{to:"#🍀-继承关系"},{default:t(()=>[n("🍀 继承关系*")]),_:1})]),s("li",null,[e(a,{to:"#🍀-小结"},{default:t(()=>[n("🍀 小结")]),_:1})])])])]),m,v,b])}const j=p(u,[["render",g],["__file","5.html.vue"]]);export{j as default};
