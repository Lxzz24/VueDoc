import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,a as n,b as o,w as c,d as l,e as u}from"./app-CvlAI_tu.js";const i={},k={class:"hint-container details"},d=n("summary",null,"目录",-1),r={class:"table-of-contents"},m=l(`<p>我们知道，Queue 是队列，只能一头进，另一头出。</p><p>如果把条件放松一下，允许两头都进，两头都出，这种队列叫双端队列（Double Ended Queue），学名 Deque。</p><p>Java 集合提供了接口 Deque 来实现一个双端队列，它的功能是：</p><p>既可以添加到队尾，也可以添加到队首； 既可以从队首获取，又可以从队尾获取。 我们来比较一下 Queue 和 Deque 出队和入队的方法：</p><table><thead><tr><th></th><th style="text-align:center;">Queue</th><th style="text-align:center;">Deque</th></tr></thead><tbody><tr><td>添加元素到队尾</td><td style="text-align:center;">add(E e) / offer(E e)</td><td style="text-align:center;">addLast(E e) / offerLast(E e)</td></tr><tr><td>取队首元素并删除</td><td style="text-align:center;">E remove() / E poll()</td><td style="text-align:center;">E removeFirst() / E pollFirst()</td></tr><tr><td>取队首元素但不删除</td><td style="text-align:center;">E element() / E peek()</td><td style="text-align:center;">E getFirst() / E peekFirst()</td></tr><tr><td>添加元素到队首</td><td style="text-align:center;">无</td><td style="text-align:center;">addFirst(E e) / offerFirst(E e)</td></tr><tr><td>取队尾元素并删除</td><td style="text-align:center;">无</td><td style="text-align:center;">E removeLast() / E pollLast()</td></tr><tr><td>取队尾元素但不删除</td><td style="text-align:center;">无</td><td style="text-align:center;">E getLast() / E peekLast()</td></tr></tbody></table><p>对于添加元素到队尾的操作，Queue 提供了 add() / offer() 方法，而 Deque 提供了 addLast() / offerLast() 方法。添加元素到队首、取队尾元素的操作在 Queue 中不存在，在 Deque 中由 addFirst() / removeLast() 等方法提供。</p><p>注意到 Deque 接口实际上扩展自 Queue：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，Queue 提供的 add() / offer() 方法在 Deque 中也可以使用，但是，使用 Deque，最好不要调用 offer()，而是调用 offerLast()：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Deque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        deque<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
        deque<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A &lt;- B</span>
        deque<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C &lt;- A &lt;- B</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C, 剩下A &lt;- B</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// B, 剩下A</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接写 deque.offer()，我们就需要思考，offer() 实际上是 offerLast()，我们明确地写上 offerLast()，不需要思考就能一眼看出这是添加到队尾。</p><p>因此，使用 Deque，推荐总是明确调用 offerLast() / offerFirst() 或者 pollFirst() / pollLast() 方法。</p><p>Deque 是一个接口，它的实现类有 ArrayDeque 和 LinkedList。</p><p>我们发现 LinkedList 真是一个全能选手，它即是 List，又是 Queue，还是 Deque。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不推荐的写法:</span>
<span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d1<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 推荐的写法：</span>
<span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d2<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Deque 实现了一个双端队列（Double Ended Queue），它可以：</p><ul><li>将元素添加到队尾或队首：addLast() / offerLast() / addFirst() / offerFirst()；</li><li>从队首／队尾获取元素并删除：removeFirst() / pollFirst() / removeLast() / pollLast()；</li><li>从队首／队尾获取元素但不删除：getFirst() / peekFirst() / getLast() / peekLast()；</li><li>总是调用 xxxFirst() / xxxLast() 以便与 Queue 的方法区分开；</li><li>避免把 null 添加到队列。</li></ul>`,19);function v(f,g){const s=t("router-link");return e(),p("div",null,[n("details",k,[d,n("nav",r,[n("ul",null,[n("li",null,[o(s,{to:"#🍀-小结"},{default:c(()=>[u("🍀 小结")]),_:1})])])])]),m])}const q=a(i,[["render",v],["__file","12.html.vue"]]);export{q as default};
