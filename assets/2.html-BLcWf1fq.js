import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,a as n,b as s,w as o,e as a,d as e}from"./app-CvlAI_tu.js";const r="/VueDoc/assets/image-20231220145829230-wbf5Isut.png",d="/VueDoc/assets/image-20231220150039554-52XB7-Gg.png",k="/VueDoc/assets/l-20231220145758938-BtvjFc1j.jpeg",v={},g={class:"hint-container details"},m=n("summary",null,"目录",-1),h={class:"table-of-contents"},b=e('<p>在上一节中，我们看到，编写 HTTP 服务器其实是非常简单的，只需要先编写基于多线程的 TCP 服务，然后在一个 TCP 连接中读取 HTTP 请求，发送 HTTP 响应即可。</p><p>但是，要编写一个完善的 HTTP 服务器，以 HTTP/1.1 为例，需要考虑的包括：</p><ul><li>识别正确和错误的 HTTP 请求；</li><li>识别正确和错误的 HTTP 头；</li><li>复用 TCP 连接；</li><li>复用线程；</li><li>IO 异常处理；</li><li>...</li></ul><p>这些基础工作需要耗费大量的时间，并且经过长期测试才能稳定运行。如果我们只需要输出一个简单的 HTML 页面，就不得不编写上千行底层代码，那就根本无法做到高效而可靠地开发。</p><p>因此，在 JavaEE 平台上，处理 TCP 连接，解析 HTTP 协议这些底层工作统统扔给现成的 Web 服务器去做，我们只需要把自己的应用程序跑在 Web 服务器上。为了实现这一目的，JavaEE 提供了 Servlet API，我们使用 Servlet API 编写自己的 Servlet 来处理 HTTP 请求，Web 服务器实现 Servlet API 接口，实现底层功能：</p><figure><img src="'+r+`" alt="image-20231220145829230" tabindex="0" loading="lazy"><figcaption>image-20231220145829230</figcaption></figure><p>我们来实现一个最简单的 Servlet：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// WebServlet 注解表示这是一个 Servlet，并映射到地址 /:</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置响应类型:</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取输出流:</span>
        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入响应:</span>
        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 最后不要忘记 flush 强制输出:</span>
        pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 Servlet 总是继承自 <code>HttpServlet</code>，然后覆写 <code>doGet()</code> 或 <code>doPost()</code> 方法。注意到 <code>doGet()</code> 方法传入了 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 两个对象，分别代表 HTTP 请求和响应。我们使用 Servlet API 时，并不直接与底层 TCP 交互，也不需要解析 HTTP 协议，因为 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 就已经封装好了请求和响应。以发送响应为例，我们只需要设置正确的响应类型，然后获取 <code>PrintWriter</code>，写入响应即可。</p><p>现在问题来了：Servlet API 是谁提供？</p><p>Servlet API 是一个 jar 包，我们需要通过 Maven 来引入它，才能正常编译。编写 <code>pom.xml</code> 文件如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itranswarp.learnjava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>web-servlet-hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到这个 <code>pom.xml</code> 与前面我们讲到的普通 Java 程序有个区别，打包类型不是 <code>jar</code>，而是 <code>war</code>，表示 Java Web Application Archive：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>引入的 Servlet API 如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到 <code>&lt;scope&gt;</code> 指定为 <code>provided</code>，表示编译时使用，但不会打包到 <code>.war</code> 文件中，因为运行期 Web 服务器本身已经提供了 Servlet API 相关的 jar 包。</p><h2 id="🍀-servlet-版本" tabindex="-1"><a class="header-anchor" href="#🍀-servlet-版本" aria-hidden="true">#</a> 🍀 Servlet 版本</h2><p>要务必注意 <code>servlet-api</code> 的版本。4.0 及之前的 <code>servlet-api</code> 由 Oracle 官方维护，引入的依赖项是 <code>javax.servlet:javax.servlet-api</code>，编写代码时引入的包名为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而 5.0 及以后的 <code>servlet-api</code> 由 Eclipse 开源社区维护，引入的依赖项是 <code>jakarta.servlet:jakarta.servlet-api</code>，编写代码时引入的包名为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>教程采用最新的 <code>jakarta.servlet:5.0.0</code> 版本，但对于很多仅支持 Servlet 4.0 版本的框架来说，例如 Spring 5，我们就只能使用 <code>javax.servlet:4.0.0</code> 版本，这一点针对不同项目要特别注意。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>引入不同的 Servlet API 版本，编写代码时导入的相关 API 的包名是不同的。</p></div><p>整个工程结构如下：</p><figure><img src="`+d+'" alt="image-20231220150039554" tabindex="0" loading="lazy"><figcaption>image-20231220150039554</figcaption></figure><p>目录 <code>webapp</code> 目前为空，如果我们需要存放一些资源文件，则需要放入该目录。有的同学可能会问，<code>webapp</code> 目录下是否需要一个 <code>/WEB-INF/web.xml</code> 配置文件？这个配置文件是低版本 Servlet 必须的，但是高版本 Servlet 已不再需要，所以无需该配置文件。</p><p>运行 Maven 命令 <code>mvn clean package</code>，在 <code>target</code> 目录下得到一个 <code>hello.war</code> 文件，这个文件就是我们编译打包后的 Web 应用程序。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>如果执行 package 命令遇到 Execution default-war of goal org.apache.maven.plugins:maven-war-plugin:2.2:war failed 错误时，可手动指定 maven-war-plugin 最新版本 3.3.2，参考练习工程的 pom.xml。</p></div><p>现在问题又来了：我们应该如何运行这个 <code>war</code> 文件？</p><p>普通的 Java 程序是通过启动 JVM，然后执行 <code>main()</code> 方法开始运行。但是 Web 应用程序有所不同，我们无法直接运行 <code>war</code> 文件，必须先启动 Web 服务器，再由 Web 服务器加载我们编写的 <code>HelloServlet</code>，这样就可以让 <code>HelloServlet</code> 处理浏览器发送的请求。</p><p>因此，我们首先要找一个支持 Servlet API 的 Web 服务器。常用的服务器有：</p>',32),_={href:"https://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.eclipse.org/jetty/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://javaee.github.io/glassfish/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.oracle.com/middleware/weblogic/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.ibm.com/cloud/websphere-application-platform/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"无论使用哪个服务器，只要它支持 Servlet API 5.0（因为我们引入的 Servlet 版本是 5.0），我们的 war 包都可以在上面运行。这里我们选择使用最广泛的开源免费的 Tomcat 服务器。",-1),H=n("code",null,"hello.war",-1),j={href:"https://tomcat.apache.org/download-10.cgi",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"hello.war",-1),I=n("code",null,"webapps",-1),A=n("code",null,"bin",-1),W=n("code",null,"startup.sh",-1),q=n("code",null,"startup.bat",-1),E=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./startup.sh
Using CATALINA_BASE:   <span class="token punctuation">..</span>./apache-tomcat-10.1.x
Using CATALINA_HOME:   <span class="token punctuation">..</span>./apache-tomcat-10.1.x
Using CATALINA_TMPDIR: <span class="token punctuation">..</span>./apache-tomcat-10.1.x/temp
Using JRE_HOME:        <span class="token punctuation">..</span>./jdk-17.jdk/Contents/Home
Using CLASSPATH:       <span class="token punctuation">..</span>./apache-tomcat-10.1.x/bin/bootstrap.jar:<span class="token punctuation">..</span>.
Tomcat started.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器输入 <code>http://localhost:8080/hello/</code> 即可看到 <code>HelloServlet</code> 的输出：</p><figure><img src="`+k+'" alt="hello-servlet" tabindex="0" loading="lazy"><figcaption>hello-servlet</figcaption></figure><p>细心的童鞋可能会问，为啥路径是 <code>/hello/</code> 而不是 <code>/</code>？因为一个 Web 服务器允许同时运行多个 Web App，而我们的 Web App 叫 <code>hello</code>，因此，第一级目录 <code>/hello</code> 表示 Web App 的名字，后面的 <code>/</code> 才是我们在 <code>HelloServlet</code> 中映射的路径。</p><p>那能不能直接使用 <code>/</code> 而不是 <code>/hello/</code>？毕竟 <code>/</code> 比较简洁。</p><p>答案是肯定的。先关闭 Tomcat（执行 <code>shutdown.sh</code> 或 <code>shutdown.bat</code>），然后删除 Tomcat 的 webapps 目录下的所有文件夹和文件，最后把我们的 <code>hello.war</code> 复制过来，改名为 <code>ROOT.war</code>，文件名为 <code>ROOT</code> 的应用程序将作为默认应用，启动后直接访问 <code>http://localhost:8080/</code> 即可。</p><p>实际上，类似 Tomcat 这样的服务器也是 Java 编写的，启动 Tomcat 服务器实际上是启动 Java 虚拟机，执行 Tomcat 的 <code>main()</code> 方法，然后由 Tomcat 负责加载我们的 <code>.war</code> 文件，并创建一个 <code>HelloServlet</code> 实例，最后以多线程的模式来处理 HTTP 请求。如果 Tomcat 服务器收到的请求路径是 <code>/</code>（假定部署文件为 ROOT.war），就转发到 <code>HelloServlet</code> 并传入 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 两个对象。</p><p>因为我们编写的 Servlet 并不是直接运行，而是由 Web 服务器加载后创建实例运行，所以，类似 Tomcat 这样的 Web 服务器也称为 Servlet 容器。</p><h2 id="🍀-tomcat-版本" tabindex="-1"><a class="header-anchor" href="#🍀-tomcat-版本" aria-hidden="true">#</a> 🍀 Tomcat 版本</h2>',9),R={href:"https://tomcat.apache.org/whichversion.html",target:"_blank",rel:"noopener noreferrer"},y=e("<ul><li>使用 Servlet&lt;=4.0 时，选择 Tomcat 9.x 或更低版本；</li><li>使用 Servlet&gt;=5.0 时，选择 Tomcat 10.x 或更高版本。</li></ul><p>运行本节代码需要使用 Tomcat 10.x 版本。</p><p>在 Servlet 容器中运行的 Servlet 具有如下特点：</p><ul><li>无法在代码中直接通过 new 创建 Servlet 实例，必须由 Servlet 容器自动创建 Servlet 实例；</li><li>Servlet 容器只会给每个 Servlet 类创建唯一实例；</li><li>Servlet 容器会使用多线程执行 <code>doGet()</code> 或 <code>doPost()</code> 方法。</li></ul>",4),O={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472",target:"_blank",rel:"noopener noreferrer"},C=e('<ul><li>在 Servlet 中定义的实例变量会被多个线程同时访问，要注意线程安全；</li><li><code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 实例是由 Servlet 容器传入的局部变量，它们只能被当前线程访问，不存在多个线程访问的问题；</li><li>在 <code>doGet()</code> 或 <code>doPost()</code> 方法中，如果使用了 <code>ThreadLocal</code>，但没有清理，那么它的状态很可能会影响到下次的某个请求，因为 Servlet 容器很可能用线程池实现线程复用。</li></ul><p>因此，正确编写 Servlet，要清晰理解 Java 的多线程模型，需要同步访问的必须同步。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>给 <code>HelloServlet</code> 增加一个 URL 参数，例如传入 <code>http://localhost:8080/?name=Bob</code>，能够输出 <code>Hello, Bob!</code>。</p>',4),J={href:"https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html",target:"_blank",rel:"noopener noreferrer"},L=e('<h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>编写 Web 应用程序就是编写 Servlet 处理 HTTP 请求；</p><p>Servlet API 提供了 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 两个高级接口来封装 HTTP 请求和响应；</p><p>Web 应用程序必须按固定结构组织并打包为 <code>.war</code> 文件；</p><p>需要启动 Web 服务器来加载我们的 war 包来运行 Servlet。</p>',5);function M(N,B){const p=c("router-link"),t=c("ExternalLinkIcon");return i(),u("div",null,[n("details",g,[m,n("nav",h,[n("ul",null,[n("li",null,[s(p,{to:"#🍀-servlet-版本"},{default:o(()=>[a("🍀 Servlet 版本")]),_:1})]),n("li",null,[s(p,{to:"#🍀-tomcat-版本"},{default:o(()=>[a("🍀 Tomcat 版本")]),_:1})]),n("li",null,[s(p,{to:"#🍀-练习"},{default:o(()=>[a("🍀 练习")]),_:1})]),n("li",null,[s(p,{to:"#🍀-小结"},{default:o(()=>[a("🍀 小结")]),_:1})])])])]),b,n("ul",null,[n("li",null,[n("a",_,[a("Tomcat"),s(t)]),a("：由 Apache 开发的开源免费服务器；")]),n("li",null,[n("a",S,[a("Jetty"),s(t)]),a("：由 Eclipse 开发的开源免费服务器；")]),n("li",null,[n("a",f,[a("GlassFish"),s(t)]),a("：一个开源的全功能 JavaEE 服务器。")])]),n("p",null,[a("还有一些收费的商用服务器，如 Oracle 的 "),n("a",w,[a("WebLogic"),s(t)]),a("，IBM 的 "),n("a",T,[a("WebSphere"),s(t)]),a("。")]),x,n("p",null,[a("要运行我们的 "),H,a("，首先要 "),n("a",j,[a("下载 Tomcat 服务器"),s(t)]),a("，解压后，把 "),P,a(" 复制到 Tomcat 的 "),I,a(" 目录下，然后切换到 "),A,a(" 目录，执行 "),W,a(" 或 "),q,a(" 启动 Tomcat 服务器：")]),E,n("p",null,[a("由于 Servlet 版本分为 <=4.0 和>=5.0 两种，所以，要根据使用的 Servlet 版本选择正确的 Tomcat 版本。从"),n("a",R,[a("Tomcat 版本页"),s(t)]),a(" 可知：")]),y,n("p",null,[a("复习一下 Java"),n("a",O,[a("多线程"),s(t)]),a(" 的内容，我们可以得出结论：")]),C,n("p",null,[a("提示：根据 "),n("a",J,[a("HttpServletRequest 文档"),s(t)]),a("，调用合适的方法获取 URL 参数。")]),L])}const G=l(v,[["render",M],["__file","2.html.vue"]]);export{G as default};
