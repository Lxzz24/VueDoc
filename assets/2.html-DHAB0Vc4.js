import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as d,a,b as s,w as e,e as n,d as p}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/image-20231130102546071-CNt6FaSY.png",r="/VueDoc/assets/image-20231130102809651-CpeLLPRZ.png",g="/VueDoc/assets/image-20231130102917560-ikKXyRiU.png",k="/VueDoc/assets/l-20231130102438311-DeSQxHtp.png",v="/VueDoc/assets/l-20231130102438276-qzO1aXQk.png",m={},h={class:"hint-container details"},b=a("summary",null,"目录",-1),f={class:"table-of-contents"},x=p('<p>如果我们的项目依赖第三方的 jar 包，例如 commons logging，那么问题来了：commons logging 发布的 jar 包在哪下载？</p><p>如果我们还希望依赖 log4j，那么使用 log4j 需要哪些 jar 包？</p><p>类似的依赖还包括：JUnit，JavaMail，MySQL 驱动等等，一个可行的方法是通过搜索引擎搜索到项目的官网，然后手动下载 zip 包，解压，放入 classpath。但是，这个过程非常繁琐。</p><p>Maven 解决了依赖管理问题。例如，我们的项目依赖 <code>abc</code> 这个 jar 包，而 <code>abc</code> 又依赖 <code>xyz</code> 这个 jar 包：</p><figure><img src="'+u+`" alt="image-20231130102546071" tabindex="0" loading="lazy"><figcaption>image-20231130102546071</figcaption></figure><p>当我们声明了 <code>abc</code> 的依赖时，Maven 自动把 <code>abc</code> 和 <code>xyz</code> 都加入了我们的项目依赖，不需要我们自己去研究 <code>abc</code> 是否需要依赖 <code>xyz</code>。</p><p>因此，Maven 的第一个作用就是解决依赖管理。我们声明了自己的项目需要 <code>abc</code>，Maven 会自动导入 <code>abc</code> 的 jar 包，再判断出 <code>abc</code> 需要 <code>xyz</code>，又会自动导入 <code>xyz</code> 的 jar 包，这样，最终我们的项目会依赖 <code>abc</code> 和 <code>xyz</code> 两个 jar 包。</p><p>我们来看一个复杂依赖示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们声明一个 <code>spring-boot-starter-web</code> 依赖时，Maven 会自动解析并判断最终需要大概二三十个其他依赖：</p><figure><img src="`+r+`" alt="image-20231130102809651" tabindex="0" loading="lazy"><figcaption>image-20231130102809651</figcaption></figure><p>如果我们自己去手动管理这些依赖是非常费时费力的，而且出错的概率很大。</p><h2 id="🍀-依赖关系" tabindex="-1"><a class="header-anchor" href="#🍀-依赖关系" aria-hidden="true">#</a> 🍀 依赖关系</h2><p>Maven 定义了几种依赖关系，分别是 <code>compile</code>、<code>test</code>、<code>runtime</code> 和 <code>provided</code>：</p><table><thead><tr><th style="text-align:left;">scope</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;">compile</td><td style="text-align:left;">编译时需要用到该 jar 包（默认）</td><td style="text-align:left;">commons-logging</td></tr><tr><td style="text-align:left;">test</td><td style="text-align:left;">编译 Test 时需要用到该 jar 包</td><td style="text-align:left;">junit</td></tr><tr><td style="text-align:left;">runtime</td><td style="text-align:left;">编译时不需要，但运行时需要用到</td><td style="text-align:left;">mysql</td></tr><tr><td style="text-align:left;">provided</td><td style="text-align:left;">编译时需要用到，但运行时由 JDK 或某个服务器提供</td><td style="text-align:left;">servlet-api</td></tr></tbody></table><p>其中，默认的 <code>compile</code> 是最常用的，Maven 会把这种类型的依赖直接放入 classpath。</p><p><code>test</code> 依赖表示仅在测试时使用，正常运行时并不需要。最常用的 <code>test</code> 依赖就是 JUnit：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>runtime</code> 依赖表示编译时不需要，但运行时需要。最典型的 <code>runtime</code> 依赖是 JDBC 驱动，例如 MySQL 驱动：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>provided</code> 依赖表示编译时需要，但运行时不需要。最典型的 <code>provided</code> 依赖是 Servlet API，编译的时候需要，但是运行时，Servlet 服务器内置了相关的 jar，所以运行期不需要：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),_={href:"https://repo1.maven.org/",target:"_blank",rel:"noopener noreferrer"},y=p('<p>Maven 并不会每次都从中央仓库下载 jar 包。一个 jar 包一旦被下载过，就会被 Maven 自动缓存在本地目录（用户主目录的 <code>.m2</code> 目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的 jar 包。</p><h2 id="🍀-唯一-id" tabindex="-1"><a class="header-anchor" href="#🍀-唯一-id" aria-hidden="true">#</a> 🍀 唯一 ID</h2><p>对于某个依赖，Maven 只需要 3 个变量即可唯一确定某个 jar 包：</p><ul><li>groupId：属于组织的名称，类似 Java 的包名；</li><li>artifactId：该 jar 包自身的名称，类似 Java 的类名；</li><li>version：该 jar 包的版本。</li></ul><p>通过上述 3 个变量，即可唯一确定某个 jar 包。Maven 通过对 jar 包进行 PGP 签名确保任何一个 jar 包一经发布就无法修改。修改已发布 jar 包的唯一方法是发布一个新版本。</p><p>因此，某个 jar 包一旦被 Maven 下载过，即可永久地安全缓存在本地。</p><p>注：只有以 <code>-SNAPSHOT</code> 结尾的版本号会被 Maven 视为开发版本，开发版本每次都会重复下载，这种 SNAPSHOT 版本只能用于内部私有的 Maven repo，公开发布的版本不允许出现 SNAPSHOT。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>后续我们在表示 Maven 依赖时，使用简写形式 groupId:artifactId:version，例如：org.slf4j:slf4j-api:2.0.4。</p></div><h2 id="🍀-maven-镜像" tabindex="-1"><a class="header-anchor" href="#🍀-maven-镜像" aria-hidden="true">#</a> 🍀 Maven 镜像</h2><p>除了可以从 Maven 的中央仓库下载外，还可以从 Maven 的镜像仓库下载。如果访问 Maven 的中央仓库非常慢，我们可以选择一个速度较快的 Maven 的镜像仓库。Maven 镜像仓库定期从中央仓库同步：</p><figure><img src="'+g+`" alt="image-20231130102917560" tabindex="0" loading="lazy"><figcaption>image-20231130102917560</figcaption></figure><p>中国区用户可以使用阿里云提供的 Maven 镜像仓库。使用 Maven 镜像仓库需要一个配置，在用户主目录下进入 <code>.m2</code> 目录，创建一个 <code>settings.xml</code> 配置文件，内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 国内推荐阿里云的 Maven 镜像 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置镜像仓库后，Maven 的下载速度就会非常快。</p><h2 id="🍀-搜索第三方组件" tabindex="-1"><a class="header-anchor" href="#🍀-搜索第三方组件" aria-hidden="true">#</a> 🍀 搜索第三方组件</h2>`,15),j=a("code",null,"okhttp",-1),M=a("code",null,"groupId",-1),I=a("code",null,"artifactId",-1),S=a("code",null,"version",-1),z={href:"https://search.maven.org/",target:"_blank",rel:"noopener noreferrer"},D=p('<figure><img src="'+k+`" alt="copy-maven" tabindex="0" loading="lazy"><figcaption>copy-maven</figcaption></figure><h2 id="🍀-命令行编译" tabindex="-1"><a class="header-anchor" href="#🍀-命令行编译" aria-hidden="true">#</a> 🍀 命令行编译</h2><p>在命令中，进入到 <code>pom.xml</code> 所在目录，输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ mvn clean package
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一切顺利，即可在 <code>target</code> 目录下获得编译后自动打包的 jar。</p><h2 id="🍀-在-ide-中使用-maven" tabindex="-1"><a class="header-anchor" href="#🍀-在-ide-中使用-maven" aria-hidden="true">#</a> 🍀 在 IDE 中使用 Maven</h2><p>几乎所有的 IDE 都内置了对 Maven 的支持。在 Eclipse 中，可以直接创建或导入 Maven 项目。如果导入后的 Maven 项目有错误，可以尝试选择项目后点击右键，选择 Maven - Update Project... 更新：</p><figure><img src="`+v+'" alt="update-maven-project" tabindex="0" loading="lazy"><figcaption>update-maven-project</figcaption></figure><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Maven 编译 hello 项目</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Maven 通过解析依赖关系确定项目所需的 jar 包，常用的 4 种 <code>scope</code> 有：<code>compile</code>（默认），<code>test</code>，<code>runtime</code> 和 <code>provided</code>；</p><p>Maven 从中央仓库下载所需的 jar 包并缓存在本地；</p><p>可以通过镜像仓库加速下载。</p>',14);function E(V,N){const t=c("router-link"),o=c("ExternalLinkIcon");return i(),d("div",null,[a("details",h,[b,a("nav",f,[a("ul",null,[a("li",null,[s(t,{to:"#🍀-依赖关系"},{default:e(()=>[n("🍀 依赖关系")]),_:1})]),a("li",null,[s(t,{to:"#🍀-唯一-id"},{default:e(()=>[n("🍀 唯一 ID")]),_:1})]),a("li",null,[s(t,{to:"#🍀-maven-镜像"},{default:e(()=>[n("🍀 Maven 镜像")]),_:1})]),a("li",null,[s(t,{to:"#🍀-搜索第三方组件"},{default:e(()=>[n("🍀 搜索第三方组件")]),_:1})]),a("li",null,[s(t,{to:"#🍀-命令行编译"},{default:e(()=>[n("🍀 命令行编译")]),_:1})]),a("li",null,[s(t,{to:"#🍀-在-ide-中使用-maven"},{default:e(()=>[n("🍀 在 IDE 中使用 Maven")]),_:1})]),a("li",null,[s(t,{to:"#🍀-练习"},{default:e(()=>[n("🍀 练习")]),_:1})]),a("li",null,[s(t,{to:"#🍀-小结"},{default:e(()=>[n("🍀 小结")]),_:1})])])])]),x,a("p",null,[n("最后一个问题是，Maven 如何知道从何处下载所需的依赖？也就是相关的 jar 包？答案是 Maven 维护了一个中央仓库（"),a("a",_,[n("repo1.maven.org"),s(o)]),n("），所有第三方库将自身的 jar 以及相关信息上传至中央仓库，Maven 就可以从中央仓库把所需依赖下载到本地。")]),y,a("p",null,[n("最后一个问题：如果我们要引用一个第三方组件，比如 "),j,n("，如何确切地获得它的 "),M,n("、"),I,n(" 和 "),S,n("？方法是通过 "),a("a",z,[n("search.maven.org"),s(o)]),n(" 搜索关键字，找到对应的组件后，直接复制：")]),D])}const L=l(m,[["render",E],["__file","2.html.vue"]]);export{L as default};
