import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as p,a as n,b as l,w as i,d as a,e as s}from"./app-CvlAI_tu.js";const u={},d={class:"hint-container details"},r=n("summary",null,"目录",-1),k={class:"table-of-contents"},m=a(`<p>在 Java 中，由 CPU 原生提供的整型最大范围是 64 位 <code>long</code> 型整数。使用 <code>long</code> 型整数可以直接通过 CPU 指令进行计算，速度非常快。</p><p>如果我们使用的整数范围超过了 <code>long</code> 型怎么办？这个时候，就只能用软件来模拟一个大整数。<code>java.math.BigInteger</code> 就是用来表示任意大小的整数。<code>BigInteger</code> 内部用一个 <code>int[]</code> 数组来模拟一个非常大的整数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bi<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2867971860299718107233761438093672048294900000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>BigInteger</code> 做运算的时候，只能使用实例方法，例如，加法运算：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInteger</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;12345678901234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInteger</span> sum <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12345678902469135780</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 <code>long</code> 型整数运算比，<code>BigInteger</code> 不会有范围限制，但缺点是<strong>速度比较慢</strong>。</p><p>也可以把 <code>BigInteger</code> 转换成 <code>long</code> 型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;123456789000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123456789000</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// java.lang.ArithmeticException: BigInteger out of long range</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>longValueExact()</code> 方法时，如果超出了 <code>long</code> 型的范围，会抛出 <code>ArithmeticException</code> 。</p><p><code>BigInteger</code> 和 <code>Integer</code>、<code>Long</code> 一样，也是不可变类，并且也继承自 <code>Number</code> 类。因为 <code>Number</code> 定义了转换为基本类型的几个方法：</p><ul><li>转换为 <code>byte</code> ： <code>byteValue()</code></li><li>转换为 <code>short</code> ： <code>shortValue()</code></li><li>转换为 <code>int</code> ： <code>intValue()</code></li><li>转换为 <code>long</code> ： <code>longValue()</code></li><li>转换为 <code>float</code> ： <code>floatValue()</code></li><li>转换为 <code>double</code> ： <code>doubleValue()</code></li></ul><p>因此，通过上述方法，可以把 <code>BigInteger</code> 转换成基本类型。如果 <code>BigInteger</code> 表示的范围超过了基本类型的范围，转换时将丢失高位信息，即结果不一定是准确的。如果需要准确地转换成基本类型，可以使用 <code>intValueExact()</code>、<code>longValueExact()</code> 等方法，在转换时如果超出范围，将直接抛出 <code>ArithmeticException</code> 异常。</p>`,12),g=n("p",null,[s("如果 "),n("code",null,"BigInteger"),s(" 的值甚至超过了 "),n("code",null,"float"),s(" 的最大范围（"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"3.4"),n("mi",null,"x"),n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mn",null,"38")])]),n("annotation",{encoding:"application/x-tex"},"3.4x10^{38}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},"3.4"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"38")])])])])])])])])])])]),s("），那么返回的 "),n("code",null,"float"),s(" 是什么呢？")],-1),v=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigInteger</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;999999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> f <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Infinity</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li><code>BigInteger</code> 用于表示任意大小的整数；</li><li><code>BigInteger</code> 是不变类，并且继承自 <code>Number</code> ；</li><li>将 <code>BigInteger</code> 转换成基本类型时可使用 <code>longValueExact()</code> 等方法保证结果准确。</li></ul>`,3);function h(b,f){const e=o("router-link");return c(),p("div",null,[n("details",d,[r,n("nav",k,[n("ul",null,[n("li",null,[l(e,{to:"#🍀-小结"},{default:i(()=>[s("🍀 小结")]),_:1})])])])]),m,g,v])}const x=t(u,[["render",h],["__file","8.html.vue"]]);export{x as default};
