import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as u,a as n,b as a,w as e,e as s,d as o}from"./app-CvlAI_tu.js";const r="/VueDoc/assets/image-20231219113231503-DUsAg4kA.png",d="/VueDoc/assets/image-20231219113254638-qC72upip.png",m="/VueDoc/assets/l-20231219113112750-DiO1mL0l.png",k="/VueDoc/assets/l-20231219113112844-D_ORKY1y.png",v="/VueDoc/assets/l-20231219113112812-dhq7or4_.png",g="/VueDoc/assets/l-20231219113112877-BkCMzGCZ.png",b={},h={class:"hint-container details"},M=n("summary",null,"目录",-1),f={class:"table-of-contents"},T=o('<p>Email 就是电子邮件。电子邮件的应用已经有几十年的历史了，我们熟悉的邮箱地址比如 <code>abc@example.com</code>，邮件软件比如 Outlook 都是用来收发邮件的。</p><p>使用 Java 程序也可以收发电子邮件。我们先来看一下传统的邮件是如何发送的。</p><p>传统的邮件是通过邮局投递，然后从一个邮局到另一个邮局，最终到达用户的邮箱：</p><figure><img src="'+r+'" alt="image-20231219113231503" tabindex="0" loading="lazy"><figcaption>image-20231219113231503</figcaption></figure><p>电子邮件的发送过程也是类似的，只不过是电子邮件是从用户电脑的邮件软件，例如 Outlook，发送到邮件服务器上，可能经过若干个邮件服务器的中转，最终到达对方邮件服务器上，收件方就可以用软件接收邮件：</p><figure><img src="'+d+`" alt="image-20231219113254638" tabindex="0" loading="lazy"><figcaption>image-20231219113254638</figcaption></figure><p>我们把类似 Outlook 这样的邮件软件称为 <strong>MUA</strong>：Mail User Agent，意思是给用户服务的邮件代理；邮件服务器则称为 <strong>MTA</strong>：Mail Transfer Agent，意思是邮件中转的代理；最终到达的邮件服务器称为 <strong>MDA</strong>：Mail Delivery Agent，意思是邮件到达的代理。电子邮件一旦到达 MDA，就不再动了。实际上，电子邮件通常就存储在 MDA 服务器的硬盘上，然后等收件人通过软件或者登陆浏览器查看邮件。</p><p>MTA 和 MDA 这样的服务器软件通常是现成的，我们不关心这些服务器内部是如何运行的。要发送邮件，我们关心的是如何编写一个 MUA 的软件，把邮件发送到 MTA 上。</p><p>MUA 到 MTA 发送邮件的协议就是 <strong>SMTP 协议</strong>，它是 Simple Mail Transport Protocol 的缩写，使用标准端口 25，也可以使用加密端口 465 或 587。</p><p>SMTP 协议是一个建立在 TCP 之上的协议，任何程序发送邮件都必须遵守 SMTP 协议。使用 Java 程序发送邮件时，我们无需关心 SMTP 协议的底层原理，只需要使用 JavaMail 这个标准 API 就可以直接发送邮件。</p><h2 id="🍀-准备-smtp-登录信息" tabindex="-1"><a class="header-anchor" href="#🍀-准备-smtp-登录信息" aria-hidden="true">#</a> 🍀 准备 SMTP 登录信息</h2><p>假设我们准备使用自己的邮件地址 <code>me@example.com</code> 给小明发送邮件，已知小明的邮件地址是 <code>xiaoming@somewhere.com</code>，发送邮件前，我们首先要确定作为 MTA 的邮件服务器地址和端口号。邮件服务器地址通常是 <code>smtp.example.com</code>，端口号由邮件服务商确定使用 25、465 还是 587。以下是一些常用邮件服务商的 SMTP 信息：</p><ul><li>QQ 邮箱：SMTP 服务器是 smtp.qq.com，端口是 465/587；</li><li>163 邮箱：SMTP 服务器是 smtp.163.com，端口是 465；</li><li>Gmail 邮箱：SMTP 服务器是 smtp.gmail.com，端口是 465/587。</li></ul><p>有了 SMTP 服务器的域名和端口号，我们还需要 SMTP 服务器的登录信息，通常是使用自己的邮件地址作为用户名，登录口令是用户口令或者一个独立设置的 SMTP 口令。</p><p>我们来看看如何使用 JavaMail 发送邮件。</p><p>首先，我们需要创建一个 Maven 工程，并把 JavaMail 相关的两个依赖加入进来：</p><ul><li>jakarta.mail:javax.mail-api:2.0.1</li><li>com.sun.mail:jakarta.mail:2.0.1</li></ul><p>这两个包一个是接口定义，一个是具体实现。如果使用早期的 1.x 版本，则需注意引入的包名有所不同：</p><ul><li>javax.mail:javax.mail-api:1.6.2</li><li>com.sun.mail:javax.mail:1.6.2</li></ul><p>并且代码引用的 <code>jakarta.mail</code> 需替换为 <code>javax.mail</code>。</p><p>然后，我们通过 JavaMail API 连接到 SMTP 服务器上：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 服务器地址:</span>
<span class="token class-name">String</span> smtp <span class="token operator">=</span> <span class="token string">&quot;smtp.office365.com&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 登录用户名:</span>
<span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;jxsmtp101@outlook.com&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 登录口令:</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">&quot;********&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 连接到 SMTP 服务器 587 端口:</span>
<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.host&quot;</span><span class="token punctuation">,</span> smtp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SMTP 主机名</span>
props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;587&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机端口号</span>
props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.auth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否需要用户认证</span>
props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.starttls.enable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启用 TLS 加密</span>
<span class="token comment">// 获取 Session 实例:</span>
<span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">PasswordAuthentication</span> <span class="token function">getPasswordAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PasswordAuthentication</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 debug 模式便于调试:</span>
session<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 587 端口为例，连接 SMTP 服务器时，需要准备一个 <code>Properties</code> 对象，填入相关信息。最后获取 <code>Session</code> 实例时，如果服务器需要认证，还需要传入一个 <code>Authenticator</code> 对象，并返回指定的用户名和口令。</p><p>当我们获取到 <code>Session</code> 实例后，打开调试模式可以看到 SMTP 通信的详细内容，便于调试。</p><h2 id="🍀-发送邮件" tabindex="-1"><a class="header-anchor" href="#🍀-发送邮件" aria-hidden="true">#</a> 🍀 发送邮件</h2><p>发送邮件时，我们需要构造一个 <code>Message</code> 对象，然后调用 <code>Transport.send(Message)</code> 即可完成发送：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置发送方地址:</span>
message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">&quot;me@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置接收方地址:</span>
message<span class="token punctuation">.</span><span class="token function">setRecipient</span><span class="token punctuation">(</span><span class="token class-name">Message<span class="token punctuation">.</span>RecipientType</span><span class="token punctuation">.</span><span class="token constant">TO</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming@somewhere.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置邮件主题:</span>
message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置邮件正文:</span>
message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hi Xiaoming...&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发送:</span>
<span class="token class-name">Transport</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绝大多数邮件服务器要求发送方地址和登录用户名必须一致，否则发送将失败。</p><p>填入真实的地址，运行上述代码，我们可以在控制台看到 JavaMail 打印的调试信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>这是 JavaMail 打印的调试信息:
DEBUG: setDebug: JavaMail version <span class="token number">1.6</span>.2
DEBUG: getProvider<span class="token punctuation">(</span><span class="token punctuation">)</span> returning javax.mail.Provider<span class="token punctuation">[</span>TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Oracle<span class="token punctuation">]</span>
DEBUG SMTP: need username and password <span class="token keyword">for</span> authentication
DEBUG SMTP: protocolConnect returning false, <span class="token assign-left variable">host</span><span class="token operator">=</span>smtp.office365.com, <span class="token punctuation">..</span>.
DEBUG SMTP: useEhlo true, useAuth <span class="token boolean">true</span>
开始尝试连接 smtp.office365.com:
DEBUG SMTP: trying to connect to <span class="token function">host</span> <span class="token string">&quot;smtp.office365.com&quot;</span>, port <span class="token number">587</span>, <span class="token punctuation">..</span>.
DEBUG SMTP: connected to <span class="token function">host</span> <span class="token string">&quot;smtp.office365.com&quot;</span>, port: <span class="token number">587</span>
发送命令 EHLO:
EHLO localhost
SMTP 服务器响应 <span class="token number">250</span>:
<span class="token number">250</span>-SG3P274CA0024.outlook.office365.com Hello
<span class="token number">250</span>-SIZE <span class="token number">157286400</span>
<span class="token punctuation">..</span>.
DEBUG SMTP: Found extension <span class="token string">&quot;SIZE&quot;</span>, arg <span class="token string">&quot;157286400&quot;</span>
发送命令 STARTTLS:
STARTTLS
SMTP 服务器响应 <span class="token number">220</span>:
<span class="token number">220</span> <span class="token number">2.0</span>.0 SMTP server ready
EHLO localhost
<span class="token number">250</span>-SG3P274CA0024.outlook.office365.com Hello <span class="token punctuation">[</span><span class="token number">111.196</span>.164.63<span class="token punctuation">]</span>
<span class="token number">250</span>-SIZE <span class="token number">157286400</span>
<span class="token number">250</span>-PIPELINING
<span class="token number">250</span>-<span class="token punctuation">..</span>.
DEBUG SMTP: Found extension <span class="token string">&quot;SIZE&quot;</span>, arg <span class="token string">&quot;157286400&quot;</span>
<span class="token punctuation">..</span>.
尝试登录:
DEBUG SMTP: protocolConnect login, <span class="token assign-left variable">host</span><span class="token operator">=</span>smtp.office365.com, <span class="token assign-left variable">user</span><span class="token operator">=</span>********, <span class="token assign-left variable">password</span><span class="token operator">=</span>********
DEBUG SMTP: Attempt to authenticate using mechanisms: LOGIN PLAIN DIGEST-MD5 NTLM XOAUTH2
DEBUG SMTP: Using mechanism LOGIN
DEBUG SMTP: AUTH LOGIN <span class="token builtin class-name">command</span> trace suppressed
登录成功:
DEBUG SMTP: AUTH LOGIN succeeded
DEBUG SMTP: use8bit <span class="token boolean">false</span>
开发发送邮件，设置 FROM:
MAIL FROM:<span class="token operator">&lt;</span>********@outlook.com<span class="token operator">&gt;</span>
<span class="token number">250</span> <span class="token number">2.1</span>.0 Sender OK
设置 TO:
RCPT TO:<span class="token operator">&lt;</span>********@sina.com<span class="token operator">&gt;</span>
<span class="token number">250</span> <span class="token number">2.1</span>.5 Recipient OK
发送邮件数据:
DATA
服务器响应 <span class="token number">354</span>:
<span class="token number">354</span> Start mail input<span class="token punctuation">;</span> end with <span class="token operator">&lt;</span>CRLF<span class="token operator">&gt;</span>.<span class="token operator">&lt;</span>CRLF<span class="token operator">&gt;</span>
真正的邮件数据:
Date: Mon, <span class="token number">2</span> Dec <span class="token number">2019</span> 09:37:52 +0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>
From: ********@outlook.com
To: ********001@sina.com
Message-ID: <span class="token operator">&lt;</span><span class="token number">1617791695.0</span>.1575250672483@localhost<span class="token operator">&gt;</span>
邮件主题是编码后的文本:
Subject: <span class="token operator">=</span>?UTF-8?Q?JavaMail<span class="token operator">=</span>E9<span class="token operator">=</span><span class="token number">82</span><span class="token operator">=</span>AE<span class="token operator">=</span>E4<span class="token operator">=</span>BB<span class="token operator">=</span>B6?<span class="token operator">=</span>
MIME-Version: <span class="token number">1.0</span>
Content-Type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Content-Transfer-Encoding: base64

邮件正文是 Base64 编码的文本:
SGVsbG8sIOi/meaYr+S4gOWwgeadpeiHqmphdmFtYWls55qE6YKu5Lu277yB
<span class="token builtin class-name">.</span>
邮件数据发送完成后，以 <span class="token punctuation">\\</span> r<span class="token punctuation">\\</span>n.<span class="token punctuation">\\</span>r<span class="token punctuation">\\</span>n 结束，服务器响应 <span class="token number">250</span> 表示发送成功:
<span class="token number">250</span> <span class="token number">2.0</span>.0 OK <span class="token operator">&lt;</span>HK0PR03MB4961.apcprd03.prod.outlook.com<span class="token operator">&gt;</span> <span class="token punctuation">[</span>Hostname<span class="token operator">=</span>HK0PR03MB4961.apcprd03.prod.outlook.com<span class="token punctuation">]</span>
DEBUG SMTP: message successfully delivered to mail server
发送 QUIT 命令:
QUIT
服务器响应 <span class="token number">221</span> 结束 TCP 连接:
<span class="token number">221</span> <span class="token number">2.0</span>.0 Service closing transmission channel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),q={href:"https://www.iana.org/assignments/smtp-enhanced-status-codes/smtp-enhanced-status-codes.txt",target:"_blank",rel:"noopener noreferrer"},P=o('<p>如果一切顺利，对方将收到一封文本格式的电子邮件：</p><figure><img src="'+m+`" alt="javamail-text" tabindex="0" loading="lazy"><figcaption>javamail-text</figcaption></figure><h2 id="🍀-发送-html-邮件" tabindex="-1"><a class="header-anchor" href="#🍀-发送-html-邮件" aria-hidden="true">#</a> 🍀 发送 HTML 邮件</h2><p>发送 HTML 邮件和文本邮件是类似的，只需要把：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>传入的 <code>body</code> 是类似 <code>&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;Hi, xxx&lt;/p&gt;</code> 这样的 HTML 字符串即可。</p><p>HTML 邮件可以在邮件客户端直接显示为网页格式：</p><figure><img src="`+k+`" alt="javamail-html" tabindex="0" loading="lazy"><figcaption>javamail-html</figcaption></figure><h2 id="🍀-发送附件" tabindex="-1"><a class="header-anchor" href="#🍀-发送附件" aria-hidden="true">#</a> 🍀 发送附件</h2><p>要在电子邮件中携带附件，我们就不能直接调用 <code>message.setText()</code> 方法，而是要构造一个 <code>Multipart</code> 对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Multipart</span> multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 text:</span>
<span class="token class-name">BodyPart</span> textpart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
textpart<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>textpart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 image:</span>
<span class="token class-name">BodyPart</span> imagepart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayDataSource</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>imagepart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置邮件内容为 multipart:</span>
message<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>multipart<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 <code>Multipart</code> 对象可以添加若干个 <code>BodyPart</code>，其中第一个 <code>BodyPart</code> 是文本，即邮件正文，后面的 BodyPart 是附件。<code>BodyPart</code> 依靠 <code>setContent()</code> 决定添加的内容，如果添加文本，用 <code>setContent(&quot;...&quot;, &quot;text/plain;charset=utf-8&quot;)</code> 添加纯文本，或者用 <code>setContent(&quot;...&quot;, &quot;text/html;charset=utf-8&quot;)</code> 添加 HTML 文本。如果添加附件，需要设置文件名（不一定和真实文件名一致），并且添加一个 <code>DataHandler()</code>，传入文件的 MIME 类型。二进制文件可以用 <code>application/octet-stream</code>，Word 文档则是 <code>application/msword</code>。</p><p>最后，通过 <code>setContent()</code> 把 <code>Multipart</code> 添加到 <code>Message</code> 中，即可发送。</p><p>带附件的邮件在客户端会被提示下载：</p><figure><img src="`+v+`" alt="javamail-attachment" tabindex="0" loading="lazy"><figcaption>javamail-attachment</figcaption></figure><h2 id="🍀-发送内嵌图片的-html-邮件" tabindex="-1"><a class="header-anchor" href="#🍀-发送内嵌图片的-html-邮件" aria-hidden="true">#</a> 🍀 发送内嵌图片的 HTML 邮件</h2><p>有些童鞋可能注意到，HTML 邮件中可以内嵌图片，这是怎么做到的？</p><p>如果给一个 <code>&lt;img src=&quot;http://example.com/test.jpg&quot;&gt;</code>，这样的外部图片链接通常会被邮件客户端过滤，并提示用户显示图片并不安全。只有内嵌的图片才能正常在邮件中显示。</p><p>内嵌图片实际上也是一个附件，即邮件本身也是 <code>Multipart</code>，但需要做一点额外的处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Multipart</span> multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 text:</span>
<span class="token class-name">BodyPart</span> textpart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
textpart<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;&lt;img src=\\&quot;cid:img01\\&quot;&gt;&lt;/p&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>textpart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 image:</span>
<span class="token class-name">BodyPart</span> imagepart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayDataSource</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 与 HTML 的 &lt;img src=&quot;cid:img01&quot;&gt; 关联:</span>
imagepart<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;img01&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>imagepart<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 HTML 邮件中引用图片时，需要设定一个 ID，用类似 <code>&lt;img src=\\&quot;cid:img01\\&quot;&gt;</code> 引用，然后，在添加图片作为 BodyPart 时，除了要正确设置 MIME 类型（根据图片类型使用 <code>image/jpeg</code> 或 <code>image/png</code>），还需要设置一个 Header：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>imagepart<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;img01&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 ID 和 HTML 中引用的 ID 对应起来，邮件客户端就可以正常显示内嵌图片：</p><figure><img src="`+g+`" alt="javamail-inline" tabindex="0" loading="lazy"><figcaption>javamail-inline</figcaption></figure><h2 id="🍀-常见问题" tabindex="-1"><a class="header-anchor" href="#🍀-常见问题" aria-hidden="true">#</a> 🍀 常见问题</h2><p>如果用户名或口令错误，会导致 <code>535</code> 登录失败：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DEBUG SMTP: AUTH LOGIN failed
Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> javax.mail.AuthenticationFailedException: <span class="token number">535</span> <span class="token number">5.7</span>.3 Authentication unsuccessful <span class="token punctuation">[</span>HK0PR03CA0105.apcprd03.prod.outlook.com<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果登录用户和发件人不一致，会导致 <code>554</code> 拒绝发送错误：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DEBUG SMTP: MessagingException <span class="token keyword">while</span> sending, THROW:
com.sun.mail.smtp.SMTPSendFailedException: <span class="token number">554</span> <span class="token number">5.2</span>.0 STOREDRV.Submission.Exception:SendAsDeniedException.MapiExceptionSendAsDenied<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有些时候，如果邮件主题和正文过于简单，会导致 <code>554</code> 被识别为垃圾邮件的错误：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DEBUG SMTP: MessagingException <span class="token keyword">while</span> sending, THROW:
com.sun.mail.smtp.SMTPSendFailedException: <span class="token number">554</span> DT:SPM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 SMTP 发送邮件</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>使用 JavaMail API 发送邮件本质上是一个 MUA 软件通过 SMTP 协议发送邮件至 MTA 服务器；</p><p>打开调试模式可以看到详细的 SMTP 交互信息；</p><p>某些邮件服务商需要开启 SMTP，并需要独立的 SMTP 登录密码。</p>`,39);function S(x,y){const t=p("router-link"),c=p("ExternalLinkIcon");return l(),u("div",null,[n("details",h,[M,n("nav",f,[n("ul",null,[n("li",null,[a(t,{to:"#🍀-准备-smtp-登录信息"},{default:e(()=>[s("🍀 准备 SMTP 登录信息")]),_:1})]),n("li",null,[a(t,{to:"#🍀-发送邮件"},{default:e(()=>[s("🍀 发送邮件")]),_:1})]),n("li",null,[a(t,{to:"#🍀-发送-html-邮件"},{default:e(()=>[s("🍀 发送 HTML 邮件")]),_:1})]),n("li",null,[a(t,{to:"#🍀-发送附件"},{default:e(()=>[s("🍀 发送附件")]),_:1})]),n("li",null,[a(t,{to:"#🍀-发送内嵌图片的-html-邮件"},{default:e(()=>[s("🍀 发送内嵌图片的 HTML 邮件")]),_:1})]),n("li",null,[a(t,{to:"#🍀-常见问题"},{default:e(()=>[s("🍀 常见问题")]),_:1})]),n("li",null,[a(t,{to:"#🍀-练习"},{default:e(()=>[s("🍀 练习")]),_:1})]),n("li",null,[a(t,{to:"#🍀-小结"},{default:e(()=>[s("🍀 小结")]),_:1})])])])]),T,n("p",null,[s("从上面的调试信息可以看出，SMTP 协议是一个请求 - 响应协议，客户端总是发送命令，然后等待服务器响应。服务器响应总是以数字开头，后面的信息才是用于调试的文本。这些响应码已经被定义在 "),n("a",q,[s("SMTP 协议"),a(c)]),s(" 中了，查看具体的响应码就可以知道出错原因。")]),P])}const _=i(b,[["render",S],["__file","4.html.vue"]]);export{_ as default};
