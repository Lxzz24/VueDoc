import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as s,a,b as t,w as h,e,d as r}from"./app-CvlAI_tu.js";const p="/VueDoc/assets/image-20240319103519736-Bh4bzvGa.png",c="/VueDoc/assets/image-20240319103548006-BrcQrCc2.png",u="/VueDoc/assets/image-20240319103640351-BdYynLAl.png",b={},f={class:"hint-container details"},x=a("summary",null,"目录",-1),_={class:"table-of-contents"},k=r('<h2 id="🍀-项目信息" tabindex="-1"><a class="header-anchor" href="#🍀-项目信息" aria-hidden="true">#</a> 🍀 项目信息</h2><h3 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍" aria-hidden="true">#</a> 项目介绍</h3><p>用最简洁清晰的话语描述你的项目。</p><h3 id="项目背景" tabindex="-1"><a class="header-anchor" href="#项目背景" aria-hidden="true">#</a> 项目背景</h3><p>为什么想做这个项目？</p><p>比如现有的产品不能满足诉求（存在痛点）、或者目前没有类似的产品、或者出于其他目的。</p><h3 id="项目意义" tabindex="-1"><a class="header-anchor" href="#项目意义" aria-hidden="true">#</a> 项目意义</h3><p>这个项目能解决什么问题？有什么实际意义？比如方便使用者、提升效率等。</p><h3 id="核心亮点" tabindex="-1"><a class="header-anchor" href="#核心亮点" aria-hidden="true">#</a> 核心亮点</h3><p>这个项目的核心亮点在哪里？</p><h3 id="调研" tabindex="-1"><a class="header-anchor" href="#调研" aria-hidden="true">#</a> 调研</h3><h4 id="竞品分析" tabindex="-1"><a class="header-anchor" href="#竞品分析" aria-hidden="true">#</a> 竞品分析</h4><p>市场上有没有类似的项目？你的项目和它们比有哪些异同（优缺点）？</p><h4 id="用户调研" tabindex="-1"><a class="header-anchor" href="#用户调研" aria-hidden="true">#</a> 用户调研</h4><p>问一问其他同学的想法（投票、头脑风暴等）</p><h4 id="结果总结" tabindex="-1"><a class="header-anchor" href="#结果总结" aria-hidden="true">#</a> 结果总结</h4><p>说一说调研之后的心得感受，以及有了哪些新的项目思路。</p><hr><h2 id="🍀-需求信息表" tabindex="-1"><a class="header-anchor" href="#🍀-需求信息表" aria-hidden="true">#</a> 🍀 需求信息表</h2><table><thead><tr><th>功能点</th><th>所属模块</th><th>介绍</th><th>优先级</th><th>负责人</th><th>当前进度</th><th>预期完成时间</th><th>实际完成时间</th><th>其他</th></tr></thead><tbody><tr><td>用户登录</td><td>用户</td><td>需要用户输入账号密码</td><td>P0（核心）</td><td>xx</td><td>开发中</td><td>20xx-xx-xx</td><td></td><td></td></tr></tbody></table><hr><h2 id="🍀-团队协作信息" tabindex="-1"><a class="header-anchor" href="#🍀-团队协作信息" aria-hidden="true">#</a> 🍀 团队协作信息</h2><h3 id="团队成员" tabindex="-1"><a class="header-anchor" href="#团队成员" aria-hidden="true">#</a> 团队成员</h3><table><thead><tr><th>团队姓名 / 昵称</th><th>职责</th><th>联系方式</th><th>个人介绍</th></tr></thead><tbody><tr><td>lxzz</td><td>负责人、后端开发</td><td>微信：xxxx</td><td>正式工作两年半，熟练使用 SpringBoot，能独立完成项目</td></tr></tbody></table><h3 id="沟通方式" tabindex="-1"><a class="header-anchor" href="#沟通方式" aria-hidden="true">#</a> 沟通方式</h3><p>交流群、每周一次腾讯会议等</p><h3 id="文档沉淀方式" tabindex="-1"><a class="header-anchor" href="#文档沉淀方式" aria-hidden="true">#</a> 文档沉淀方式</h3><p>语雀知识库、腾讯文档、自建 wiki 等</p><h3 id="代码协作方式" tabindex="-1"><a class="header-anchor" href="#代码协作方式" aria-hidden="true">#</a> 代码协作方式</h3><p>星球 GitLab 或 GitHub 私仓</p><h3 id="成员分工详情" tabindex="-1"><a class="header-anchor" href="#成员分工详情" aria-hidden="true">#</a> 成员分工详情</h3><p>确认分工和对接方式比如前后端用 Swagger 接口文档对接等等</p><h3 id="开发规范" tabindex="-1"><a class="header-anchor" href="#开发规范" aria-hidden="true">#</a> 开发规范</h3><p>可以借鉴其他团队或开源的代码规范，并使用工具来提示和约束。</p><hr><h2 id="🍀-团队资源" tabindex="-1"><a class="header-anchor" href="#🍀-团队资源" aria-hidden="true">#</a> 🍀 团队资源</h2><h3 id="服务器" tabindex="-1"><a class="header-anchor" href="#服务器" aria-hidden="true">#</a> 服务器</h3><p>ip：xx</p><p>用户：</p><p>密码：</p><p>端口：22（访问端口）</p><p>作用：在 xx 端口部署 xx 项目</p><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><p>ip：xx</p><p>用户：</p><p>密码：</p><p>端口：3306</p><p>作用：在 xx 端口部署 xx 项目</p><h3 id="监控统计" tabindex="-1"><a class="header-anchor" href="#监控统计" aria-hidden="true">#</a> 监控统计</h3><p>报表地址：</p><p>用户：</p><p>密码：</p><p>作用：</p><h3 id="其他资源" tabindex="-1"><a class="header-anchor" href="#其他资源" aria-hidden="true">#</a> 其他资源</h3><h4 id="用户反馈平台" tabindex="-1"><a class="header-anchor" href="#用户反馈平台" aria-hidden="true">#</a> 用户反馈平台</h4><p>地址：</p><p>用户：</p><p>密码：</p><hr><h2 id="🍀-实现方案" tabindex="-1"><a class="header-anchor" href="#🍀-实现方案" aria-hidden="true">#</a> 🍀 实现方案</h2><h3 id="项目整体实现方案" tabindex="-1"><a class="header-anchor" href="#项目整体实现方案" aria-hidden="true">#</a> 项目整体实现方案</h3><h4 id="项目介绍-1" tabindex="-1"><a class="header-anchor" href="#项目介绍-1" aria-hidden="true">#</a> 项目介绍</h4><p>可以直接复制项目文档中的项目介绍</p><h4 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h4><h5 id="前端" tabindex="-1"><a class="header-anchor" href="#前端" aria-hidden="true">#</a> 前端</h5><table><thead><tr><th>技术及版本</th><th>作用</th><th>原因</th></tr></thead><tbody><tr><td>Vue3.x</td><td>主要开发框架</td><td>团队成员更熟悉</td></tr><tr><td>VantUI</td><td>移动端组件库</td><td>适配移动端项目、主流</td></tr></tbody></table><h5 id="后端" tabindex="-1"><a class="header-anchor" href="#后端" aria-hidden="true">#</a> 后端</h5><table><thead><tr><th>技术及版本</th><th>作用</th><th>原因</th></tr></thead><tbody><tr><td>SpringBoot2.7.x</td><td>主要开发框架</td><td>团队成员更熟悉、主流</td></tr><tr><td>Lombok</td><td>注解式代码生成</td><td>节省开发时间</td></tr></tbody></table><h5 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h5><table><thead><tr><th>技术及版本</th><th>作用</th><th>原因</th></tr></thead><tbody><tr><td>宝塔面板</td><td>管理服务器</td><td>快速可视化操作</td></tr><tr><td>Nginx</td><td>部署前端、反向代理</td><td>轻量、性能高</td></tr></tbody></table><h5 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h5><table><thead><tr><th>技术及版本</th><th>作用</th><th>原因</th></tr></thead><tbody><tr><td>51.LA</td><td>网站统计</td><td>免费易用</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="功能模块图" tabindex="-1"><a class="header-anchor" href="#功能模块图" aria-hidden="true">#</a> 功能模块图</h4><ol><li>类似流程图</li><li>思维导图（属性图）</li></ol><figure><img src="'+p+'" alt="画法 1" tabindex="0" loading="lazy"><figcaption>画法 1</figcaption></figure><figure><img src="'+c+'" alt="画法 2" tabindex="0" loading="lazy"><figcaption>画法 2</figcaption></figure><h4 id="技术架构图" tabindex="-1"><a class="header-anchor" href="#技术架构图" aria-hidden="true">#</a> 技术架构图</h4><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="库表设计" tabindex="-1"><a class="header-anchor" href="#库表设计" aria-hidden="true">#</a> 库表设计</h4><h5 id="用户表" tabindex="-1"><a class="header-anchor" href="#用户表" aria-hidden="true">#</a> 用户表</h5><table><thead><tr><th>字段名</th><th>类型</th><th>非空 / 主键 / 自增 / 默认值等</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>非空、主键、自增</td><td>全局唯一</td></tr></tbody></table><h4 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h4><p>每个功能大致怎么实现、用什么算法、流程如何等，也可以给每个需求单独开设一个实现方案文档。举个例子：</p><h5 id="用户登录功能" tabindex="-1"><a class="header-anchor" href="#用户登录功能" aria-hidden="true">#</a> 用户登录功能</h5><h6 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计" aria-hidden="true">#</a> 接口设计</h6><p>接受参数：用户账户、密码</p><p>请求类型：POST</p><p>请求体：JSON 格式的数据</p><p>返回值：脱敏的用户信息</p><h6 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h6><blockquote><p>这里写的越详细越好，写代码的时候本质上就是直接 “翻译”</p></blockquote><ol><li>校验用户账户和密码是否合法</li><li>非空</li><li>账户长度不小于 4 位</li><li>密码就不小于 8 位</li><li>账户不包含特殊字符</li><li>校验密码是否输入正确，要和数据库中的密文密码去对比</li><li>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</li><li>我们要记录用户的登录态（session），将其存到服务器上（用后端 SpringBoot 框架封装的服务器 tomcat 去记录）</li><li>返回脱敏后的用户信息</li></ol><h3 id="xx-功能实现方案" tabindex="-1"><a class="header-anchor" href="#xx-功能实现方案" aria-hidden="true">#</a> xx 功能实现方案</h3><p>参考 [项目整体实现方案](# 项目整体实现方案)</p><hr><h2 id="🍀-工作周报" tabindex="-1"><a class="header-anchor" href="#🍀-工作周报" aria-hidden="true">#</a> 🍀 工作周报</h2><blockquote><p>字多≠有价值 周报不是为了表现工作量，而是给团队提供最基本的 “信息透明”。尽量挑选重要信息来写。</p></blockquote><p>汇报人：…</p><p>日期：2022-01-20</p><h3 id="本周重点" tabindex="-1"><a class="header-anchor" href="#本周重点" aria-hidden="true">#</a> 本周重点</h3><h4 id="_1-任务进展" tabindex="-1"><a class="header-anchor" href="#_1-任务进展" aria-hidden="true">#</a> 1. 任务进展</h4><blockquote><p>本周完成了哪些任务、整体进度如何。</p></blockquote><p>本周完成了 XXX 需求开发，已经提测。项目整体进度比预期延迟 1d，预计下周三可以开始正式测试。</p><h4 id="_2-相关数据" tabindex="-1"><a class="header-anchor" href="#_2-相关数据" aria-hidden="true">#</a> 2. 相关数据</h4><blockquote><p>呈现相关数据以及背后的原因（如有）。</p></blockquote><p>本周日均 UV3000，同比上周上涨 20%。原因是周二投放的运营活动生效，吸引了部分新用户。</p><table><thead><tr><th>本周日均 UV</th><th>3000（↑20%）</th></tr></thead><tbody><tr><td>上周日均 UV</td><td>2500</td></tr></tbody></table><p>具体详见「数据接口」</p><h4 id="_3-风险同步" tabindex="-1"><a class="header-anchor" href="#_3-风险同步" aria-hidden="true">#</a> 3. 风险同步</h4><blockquote><p>存在哪些风险、对应的对策是什么。</p></blockquote><p>由于需要调用外网数据，需要在预发环境搭建代理，接下来需要考虑代理的通用性，在其他需要外网数据配合的需求中可以直接使用。</p><h3 id="下周计划" tabindex="-1"><a class="header-anchor" href="#下周计划" aria-hidden="true">#</a> 下周计划</h3><blockquote><p>接下来要做什么、是否需要其他协助。</p></blockquote><p>下周开始主要投入 XXX、XXX 等功能点开发，依赖于中台团队提供接口，下周一和中台团队的 xxx 沟通确认。</p><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><blockquote><p>有什么想法或心得体会，都可以拿出来分享下。</p></blockquote><hr><h2 id="🍀-会议记录" tabindex="-1"><a class="header-anchor" href="#🍀-会议记录" aria-hidden="true">#</a> 🍀 会议记录</h2><p>参会人：...</p><p>会议时间：2022-01-20</p><p>会议地点：6 号会议室</p><h3 id="会前材料" tabindex="-1"><a class="header-anchor" href="#会前材料" aria-hidden="true">#</a> 会前材料</h3><blockquote><p>不开没有准备的会。基于材料提前异步沟通、可以给会议带来惊人的提效。</p></blockquote><p>📑产品需求文档</p><h3 id="会议议题" tabindex="-1"><a class="header-anchor" href="#会议议题" aria-hidden="true">#</a> 会议议题</h3><blockquote><p>简要记录本次会议的主要议题讨论。</p></blockquote><ul><li>议题 1...</li><li>议题 2...</li><li>议题 3...</li></ul><h3 id="会议结论" tabindex="-1"><a class="header-anchor" href="#会议结论" aria-hidden="true">#</a> 会议结论</h3><blockquote><p>不开没有结论的会。哪怕 “方案取消” 或“下次再议”，也是结论的一种。</p></blockquote><ul><li>结论 1...</li><li>结论 2...</li><li>结论 3...</li></ul><h3 id="执行计划" tabindex="-1"><a class="header-anchor" href="#执行计划" aria-hidden="true">#</a> 执行计划</h3><blockquote><p>设置后续待办任务，可使用 @人分配执行人。</p></blockquote><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 待办任务 1</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 待办任务 2</label></li></ul><hr><h2 id="🍀-团队知识库" tabindex="-1"><a class="header-anchor" href="#🍀-团队知识库" aria-hidden="true">#</a> 🍀 团队知识库</h2><h3 id="如何做好技术选型" tabindex="-1"><a class="header-anchor" href="#如何做好技术选型" aria-hidden="true">#</a> 如何做好技术选型？</h3><h4 id="什么是技术选型" tabindex="-1"><a class="header-anchor" href="#什么是技术选型" aria-hidden="true">#</a> 什么是技术选型？</h4><p>就像上战场打仗选择兵器一样，你要确定用哪些技术来完成项目的开发和维护。</p><h4 id="技术选型选什么" tabindex="-1"><a class="header-anchor" href="#技术选型选什么" aria-hidden="true">#</a> 技术选型选什么？</h4><ol><li>用哪类技术？比如编程语言、开发框架、数据库</li><li>具体用什么技术？比如编程语言用 C++ 还是 Java？开发框架用 Spring 还是 Vert.x？</li><li>技术用哪个版本？比如 Vue2 还是 Vue3?Java8 还是 Java11？</li></ol><h4 id="为什么要做技术选型" tabindex="-1"><a class="header-anchor" href="#为什么要做技术选型" aria-hidden="true">#</a> 为什么要做技术选型？</h4><p>答案很简单，为了更好地开发和维护项目。这里的 “更好” 可能是提高效率，也可能是节约成本，还可能是提升体验。</p><h4 id="怎么做好技术选型" tabindex="-1"><a class="header-anchor" href="#怎么做好技术选型" aria-hidden="true">#</a> 怎么做好技术选型？</h4><h5 id="先有的选" tabindex="-1"><a class="header-anchor" href="#先有的选" aria-hidden="true">#</a> 先有的选</h5><p>在我们拿到一个需求后，首先要分析一下完成这个需求要用到哪些类别的技术？</p><p>比如做一个网盘系统，需要选择开发语言、前端 / 后端开发框架、文件存储系统等。</p><p>接下来，就是从百度、Google、GitHub、掘金等各个平台搜索各类技术，比如搜索：主流的文件存储系统。然后把搜到的所有技术以清单的形式记录在一个文档里。建议大家先尽可能多地搜索同类技术，不要只盯着某个技术不放。</p><p>有了可选项之后，我们便可以从主观和客观两个视角去分析技术。</p><h5 id="主观分析" tabindex="-1"><a class="header-anchor" href="#主观分析" aria-hidden="true">#</a> 主观分析</h5><p>首先我们要通过看官方文档、或者网上的视频文章等途径来了解每个技术的以下几点：</p><ul><li>这个技术是什么？有什么用？</li><li>这个技术有什么优点？</li><li>这个技术更适用于什么场景？</li><li>这个技术有什么缺点或不足？</li></ul><p>技术选型的重点是要从实际出发，贴合业务和项目，而不是为了用技术而用。</p><p>那如果我们的系统是老项目，需要重点关注新引入的技术和老项目依赖的兼容性，尤其要注意版本号。不要说引入了一个类库后，导致整个项目无法运行，这就需要我们在技术选型时先快速试一下能否跑通 Demo、有没有版本冲突，再拍板决定。</p><p>而对于新项目来说，技术选型要考虑的点要更多一些。主要是结合实际需求（业务适应性）和现有条件（人员 / 资源）去考虑。</p><h6 id="业务适应性" tabindex="-1"><a class="header-anchor" href="#业务适应性" aria-hidden="true">#</a> 业务适应性</h6><ol><li>你的业务量级有多大？比如你的项目累积不超过 1000 个用户、存不了多少数据，那么绝大多数的数据库都可以满足，也没必要选择分布式数据库。</li><li>系统的核心业务流程和关键数据结构是什么？比如要做一个管理系统，那么数据库选择主流的关系型数据库 MySQL 就好。而如果要做数据分析系统，那么应该选择 OLAP 利好的数据库，比如 PostgreSQL、ClickHouse 等。</li><li>更注重哪些性能？比如日志收集的场景更注重高性能和吞吐量，那么可以选择 Kafka 消息队列来采集；比如注重低延迟以及消息的准确性，那么可以选择 RabbitMQ 等。很多时候，我们做技术选型和设计算法一样，是对时间、空间、稳定性、可用性等等的综合权衡。</li></ol><h6 id="现有条件" tabindex="-1"><a class="header-anchor" href="#现有条件" aria-hidden="true">#</a> 现有条件</h6><p>先从人员的角度来说，看看团队的同学都会哪些技术，如果需求很紧急的话，那肯定优先选择大家用的比较熟的技术，先完成一期需求快速交付，后面再调研更合适的技术架构，不断地优化。再比如团队内对于某个技术有比较成熟的实践经历和知识沉淀、也有相应的技术大佬，那么优先使用该技术。比如阿里的 Java 和字节的 Go。</p><p>再从资源来说，要看公司或团队的资源是否适合运用这个技术。比如创业公司，没什么钱，那么可以用 MySQL 来代替 Elasticsearch 来实现搜索功能，牺牲灵活性来省钱。再比如公司只能提供 4g 内存的服务器，那你在使用一些开源技术的时候就要关注他们的内存占用，不能超过这个阈值。</p><h5 id="客观分析" tabindex="-1"><a class="header-anchor" href="#客观分析" aria-hidden="true">#</a> 客观分析</h5><p>抛去实际情况，建议大家优先选择知名度高的、有大公司背书的、持续维护的、活跃度高的、开源的、生态好的（有了问题能百度解决的）技术。比如大名鼎鼎的前端框架 Vue 和 Java 后端框架 SpringBoot，大家对它们的印象就是功能强大、简单好用、学习资源多，所以这两个技术是主流。切忌不要选择缺失文档的冷门技术，到后面出了问题搞不好整个项目都无法推进！</p><p>在对每个技术进行分析的过程中，记得把它们的优缺点都记录下来，可以整理为一个表格，便于自己对比，最终选择一个相对最优解。</p><p>总之，没有绝对完美的技术，技术选型的终极目标是：在有限的条件下、选取特定场景下的技术最优解。</p><h4 id="一次技术选型的实践" tabindex="-1"><a class="header-anchor" href="#一次技术选型的实践" aria-hidden="true">#</a> 一次技术选型的实践</h4><p>有一天隔壁数据开发组的组长（专家级大佬）突然来问我：React 和 Vue 在选型上一般是怎样考虑的？</p><p>其实这是一道异常经典的面试题了，我在腾讯实习转正答辩时，就被领导问了这道题，给大家分享一下我和组长的对话（已脱敏），看看我这次是如何以 “已经通过面试” 的身份回答的。</p><p>组长：咱们现在做前端是用的什么框架，vue 吗？</p><p>我：先问了下同事，目前我们组用到 Vue 的项目不多，好像只有一个小模块和管理系统。建议是跟着组件库生态走，如果用公司级的 UI 库（像我们是 TDesign），用 Vue 好一些，因为这个库以 Vue 为主；如果用部门级的 UI 库，用 React。其他感觉区别不大，可以看看大家对哪套技术栈更熟悉。（然后我贴了这两个组件库的地址）</p><p>我：之前我负责的项目想用部门的 xx 库来着，但组件有点缺失，放弃了，公司级的库贡献者更多、更全面一些。如果可以不用公司内的库，建议用 AntDesign 库和 React，功能全面、非常好用。</p><p>组长：如果是公司外的，开发一个新项目，从开发者的角度看，两个的差别大吗？比如组件库的丰富程度之类的，代码上手难度等等？</p><p>我：先说上手难度，Vue 比 React 简单很多，因为他的语法就像是 HTML、CSS、JavaScript 按顺序拼起来，适合新手。开发小项目的话，用 Vue 的同学会相对多一些，我本人做单页面应用也倾向于 Vue，就是因为方便省事；它是渐进式框架，甚至可以把一个没有框架的前端项目轻松改成 Vue。</p><p>但如果要开发中大型项目，多人维护的那种，用 React 好一些，一方面是 AntDesign 组件库实在是太好用了（它以 React 主），另外一方面 React 的语法以 JS 为主，组件复用等写法会更容易，更符合高级前端工程师的使用习惯。</p><p>值得考虑的是，现在 Vue 存在一个大版本的跨度（2=&gt;3），而且 Vue3 刚刚被定为主流版本，导致很多以前 Vue2 的社区组件会失效或者需要兼容，我就踩过不少坑。</p><p>组长：大致理解了，谢谢！👍</p><h4 id="我们能做些什么" tabindex="-1"><a class="header-anchor" href="#我们能做些什么" aria-hidden="true">#</a> 我们能做些什么？</h4><ol><li>多积累技术。把自己看到过的每个和你学习方向或工作相关的技术都记录或收藏，有时间的话可以快速了解个大概，知道这个技术是做什么的、有什么用，有个大致的印象，之后需要用到的时候到收藏夹里搜索即可。</li><li>不要满足于一门技术吃遍天。在自学阶段、做一些小项目时，可以尝试使用一些平时不接触的新技术，拓宽自己的技术选型范围。像我虽然工作是 Java 后端，但是经常会做一些前端小项目，而且每次都换着用技术，比如 Vue、React、NodeKoa、NodeExpress 等。</li></ol><h4 id="技术选型工具" tabindex="-1"><a class="header-anchor" href="#技术选型工具" aria-hidden="true">#</a> 技术选型工具</h4>',177),g={href:"https://openbase.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.thoughtworks.com/zh-cn/radar",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.techempower.com/benchmarks",target:"_blank",rel:"noopener noreferrer"},y=r('<hr><h2 id="🍀-星球嘉宾王德福老师的回答" tabindex="-1"><a class="header-anchor" href="#🍀-星球嘉宾王德福老师的回答" aria-hidden="true">#</a> 🍀 星球嘉宾王德福老师的回答</h2><p>首先我们思考几个问题：</p><ol><li>一项技术为什么被发明？</li><li>在它被发明之前，它所要解决的问题是否有解法？</li><li>它完美解决了所有问题吗？</li></ol><p>比如 SCSS。</p><p>在有 SCSS（以及其他预处理器）以前，CSS 就可以完成样式配置，但是不支持变量，不支持函数，不支持嵌套。不过我不太喜欢 Sass 语法还要求保留冒号和分号，Stylus 这种可以省略所有不必要的分隔符的语法是我更喜欢的，所以我选择 Stylus。</p><p>这类技术选型问题的解答思路就是：</p><ol><li>先定义待解决的问题是什么（问题背景、现有资源、问题的难点）</li><li>传统的解决方案是什么</li><li>各个待选方案的收益与不足</li><li>你的价值标准</li><li>他人的因素、同事和上级的决策</li><li>最终选择</li></ol><p>第二个问题有取巧的办法，一般这种问题都会在项目提问中出现，所以你可以预先对于项目中用到的技术都做一个准备。当然，如果这个项目是你从头开始做的，那么肯定也是经历了技术选型阶段，只不过可能选择的原因是 “我对这个比较熟”。</p><p>所以你要关注的是，当前方案有哪里是有所不足的，如果它用起来很不方便，比如你手写一组弹幕效果的时候，很容易想到，有类库对吧。你被组件间数据通信搞得焦头烂额的时候，很容易想到，其他人也会遇到类似问题，有 Redux 去解决。</p><p>技术选型类的问题考察的是你的技术视野和技术价值判断能力，前者可以可以通过日常多逛技术社区，或者熟练使用搜索引擎获得提高，对于技术的不满足感会促使你去寻找其他更好的方案。同时你需要有能力在技术选型中平衡好收益和成本，有理有据的得到決策。</p><p>总的来说，长线的解决方案是平时多关注技术社区，扩展技术视野，以及做更多的项目，有更多的技术积累。更快见效的，是在项目中好好理解需求，搞清楚技术是如何完成需求的，同时注意发现技术改进点，尽力去改进代码。</p><h3 id="如何优化项目" tabindex="-1"><a class="header-anchor" href="#如何优化项目" aria-hidden="true">#</a> 如何优化项目？</h3><p>最简单的优化项目方式就是新增功能，但是不能乱加、盲目堆砌新功能，可以问自己几个问题：</p><ol><li>这个功能是否符合自己项目的定位？</li><li>用户是否真的需要？</li><li>这个功能的实现能否给项目增加亮点？（如果都是简单的增删改查，可以再斟酌一下）</li></ol><p>个人的建议是完善现有的功能，把功能做到更好，举个例子：是否可以提高帖子搜索功能的灵活性、列举热搜、给出搜索建议等等，这可能就会激励你去学习 Elasticsearch 等技术。</p><p>一段有亮点的项目经历绝对不能只写 “用 xx 技术完成了 xx 功能”，而是要有起伏和递进，在完成某功能的基础上进一步优化。</p><p>应该优化什么呢？可以从以下角度出发：</p><p>1）性能：页面加载速度、接口并发量（qps/tps）、接口响应时长等方法：缓存、并发编程、池化、异步、限流降级熔断、有损服务、CDN、数据压缩等</p><p>2）成本：节约系统资源、降低 CPU / 内存 / 磁盘空间 / 带宽占用、节省机器数等方法：人工分析删除、定期删除、低频存储、淘汰策略、数据压缩等</p><blockquote><p>实际开发项目中，一定要有成本意识！很多同学光说优化，不考虑实际情况，这是一个错误的思维。</p></blockquote>',21),V={href:"https://blog.csdn.net/terrychinaz/article/details/112976266",target:"_blank",rel:"noopener noreferrer"},q=r("<p>4）可靠性：尽可能地让系统提供可靠的服务，不要出现崩溃中断方法：集群、主备、异常处理、降级、容灾关于可靠性和可用性的区别：https://blog.csdn.net/HermitSun/article/details/92164226</p><p>5）稳定性：接口响应 / 操作处理时长相对固定，成功率高，响应结果保持正常方法：保证每个服务节点状态正常、性能相当（不要有的机器好有的机器垃圾导致接口时快时慢）；合理规划服务调用链路，不能过长；做好技术选型，避免使用不稳定的第三方依赖</p><p>6）容错性：部分节点（服务）出问题时，系统整体依然能够正常提供服务方法：集群、反向代理、故障转移</p><p>7）健壮性：系统不会因为部分异常而整体崩溃方法：异常处理、进程监控（如 supervisor）</p><p>8）系统复杂度：整个系统易于理解，而不是说前人离职、后人无法接手方法：软件开发原则、设计模式、系统架构设计（如微服务）、开发规范、工作流</p><p>9）可维护性：使整个系统结构清晰、利于维护，出了问题也能够快速排查方法：软件开发原则、设计模式、系统架构设计（如微服务）、开发规范、工作流、抽象复用（组件化模块化）</p><p>10）可扩展性：使整个系统能够轻松应对未来新增的需求及业务增长，不会牵一发而动全身方法：设计模式、架构设计、集群、分库分表、技术选型</p><p>11）可观测性：能够随时观察了解系统 / 服务的运行状态、并能快速发现故障和定位异常方法：系统埋点上报、监控告警（prometheus）、ELK 日志收集、可视化分析（Grafana）</p><p>12）可伸缩性：系统根据负载情况动态增加或减少节点，从而能够应对流量高峰、并在空闲时节约成本方法：K8S+Docker 容器、云原生</p><p>13）用户体验：符合用户的使用习惯、提升用户对网站的满意度方法：网页性能优化、接口性能优化、懒加载、占位符、骨架屏、设备适配、浏览器兼容性、满意度调研（如 NPS）</p><p>14）安全性：保证机器、服务、数据库、网络等不被恶意侵入和污染，保证数据和用户隐私的安全方法：参数校验、常用安全措施（防 XSS、CSRF、SQL 注入等）、网络防护（反 DDOS）、反爬虫、限流、黑白名单、防火墙等</p>",11);function w(v,L){const d=l("router-link"),i=l("ExternalLinkIcon");return o(),s("div",null,[a("details",f,[x,a("nav",_,[a("ul",null,[a("li",null,[t(d,{to:"#🍀-项目信息"},{default:h(()=>[e("🍀 项目信息")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#项目介绍"},{default:h(()=>[e("项目介绍")]),_:1})]),a("li",null,[t(d,{to:"#项目背景"},{default:h(()=>[e("项目背景")]),_:1})]),a("li",null,[t(d,{to:"#项目意义"},{default:h(()=>[e("项目意义")]),_:1})]),a("li",null,[t(d,{to:"#核心亮点"},{default:h(()=>[e("核心亮点")]),_:1})]),a("li",null,[t(d,{to:"#调研"},{default:h(()=>[e("调研")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-需求信息表"},{default:h(()=>[e("🍀 需求信息表")]),_:1})]),a("li",null,[t(d,{to:"#🍀-团队协作信息"},{default:h(()=>[e("🍀 团队协作信息")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#团队成员"},{default:h(()=>[e("团队成员")]),_:1})]),a("li",null,[t(d,{to:"#沟通方式"},{default:h(()=>[e("沟通方式")]),_:1})]),a("li",null,[t(d,{to:"#文档沉淀方式"},{default:h(()=>[e("文档沉淀方式")]),_:1})]),a("li",null,[t(d,{to:"#代码协作方式"},{default:h(()=>[e("代码协作方式")]),_:1})]),a("li",null,[t(d,{to:"#成员分工详情"},{default:h(()=>[e("成员分工详情")]),_:1})]),a("li",null,[t(d,{to:"#开发规范"},{default:h(()=>[e("开发规范")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-团队资源"},{default:h(()=>[e("🍀 团队资源")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#服务器"},{default:h(()=>[e("服务器")]),_:1})]),a("li",null,[t(d,{to:"#数据库"},{default:h(()=>[e("数据库")]),_:1})]),a("li",null,[t(d,{to:"#监控统计"},{default:h(()=>[e("监控统计")]),_:1})]),a("li",null,[t(d,{to:"#其他资源"},{default:h(()=>[e("其他资源")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-实现方案"},{default:h(()=>[e("🍀 实现方案")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#项目整体实现方案"},{default:h(()=>[e("项目整体实现方案")]),_:1})]),a("li",null,[t(d,{to:"#xx-功能实现方案"},{default:h(()=>[e("xx 功能实现方案")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-工作周报"},{default:h(()=>[e("🍀 工作周报")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#本周重点"},{default:h(()=>[e("本周重点")]),_:1})]),a("li",null,[t(d,{to:"#下周计划"},{default:h(()=>[e("下周计划")]),_:1})]),a("li",null,[t(d,{to:"#思考"},{default:h(()=>[e("思考")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-会议记录"},{default:h(()=>[e("🍀 会议记录")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#会前材料"},{default:h(()=>[e("会前材料")]),_:1})]),a("li",null,[t(d,{to:"#会议议题"},{default:h(()=>[e("会议议题")]),_:1})]),a("li",null,[t(d,{to:"#会议结论"},{default:h(()=>[e("会议结论")]),_:1})]),a("li",null,[t(d,{to:"#执行计划"},{default:h(()=>[e("执行计划")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-团队知识库"},{default:h(()=>[e("🍀 团队知识库")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#如何做好技术选型"},{default:h(()=>[e("如何做好技术选型？")]),_:1})])])]),a("li",null,[t(d,{to:"#🍀-星球嘉宾王德福老师的回答"},{default:h(()=>[e("🍀 星球嘉宾王德福老师的回答")]),_:1}),a("ul",null,[a("li",null,[t(d,{to:"#如何优化项目"},{default:h(()=>[e("如何优化项目？")]),_:1})])])])])])]),k,a("p",null,[e("前端技术选型："),a("a",g,[e("https://openbase.com/"),t(i)])]),a("p",null,[e("技术雷达："),a("a",m,[e("https://www.thoughtworks.com/zh-cn/radar"),t(i)])]),a("p",null,[e("框架性能对比："),a("a",S,[e("https://www.techempower.com/benchmarks"),t(i)])]),y,a("p",null,[e("3）可用性：尽可能地提高系统对外提供服务的时长，即提高 SLA（3~5 个 9 的高可用）参考文章："),a("a",V,[e("https://blog.csdn.net/terrychinaz/article/details/112976266"),t(i)]),e(" 方法：集群、主备、自动故障恢复、监控告警、容灾")]),q])}const R=n(b,[["render",w],["__file","5.html.vue"]]);export{R as default};
