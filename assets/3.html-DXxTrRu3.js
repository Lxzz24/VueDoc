const t=JSON.parse('{"key":"v-7a7db75d","path":"/1-Java/10_%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/3.html","title":"异常测试","lang":"zh-CN","frontmatter":{"title":"异常测试","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 在 Java 程序中，异常处理是非常重要的。 我们自己编写的方法，也经常抛出各种异常。对于可能抛出的异常进行测试，本身就是测试的重要环节。 因此，在编写 JUnit 测试的时候，除了正常的输入输出，我们还要特别针对可能导致异常的情况进行测试。 我们仍然用 Factorial 举例： 上述奇怪的 -> 语法就是函数式接口的实现代码，...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/10_%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/3.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"异常测试"}],["meta",{"property":"og:description","content":"目录 [[toc]] 在 Java 程序中，异常处理是非常重要的。 我们自己编写的方法，也经常抛出各种异常。对于可能抛出的异常进行测试，本身就是测试的重要环节。 因此，在编写 JUnit 测试的时候，除了正常的输入输出，我们还要特别针对可能导致异常的情况进行测试。 我们仍然用 Factorial 举例： 上述奇怪的 -> 语法就是函数式接口的实现代码，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 练习","slug":"🍀-练习","link":"#🍀-练习","children":[]},{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"1-Java/10_单元测试/3.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
