import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as u,a as n,b as a,w as t,e as s,d as i}from"./app-CvlAI_tu.js";const d="/VueDoc/assets/l-20231221154625091-CmjCtvmc.png",r="/VueDoc/assets/l-20231221154624489-BbPS5C5x.png",v="/VueDoc/assets/l-20231221154624050-BooDriyF.png",k="/VueDoc/assets/l-20231221154624316-DvJhDtMq.png",m="/VueDoc/assets/l-20231221154623976-Dlvrw9Ln.png",b="/VueDoc/assets/l-20231221154624767-DR2-_4N4.png",g={},M={class:"hint-container details"},h=n("summary",null,"目录",-1),f={class:"table-of-contents"},S=n("p",null,"Spring 框架不仅提供了标准的 IoC 容器、AOP 支持、数据库访问以及 WebMVC 等标准功能，还可以非常方便地集成许多常用的第三方组件：",-1),_=n("ul",null,[n("li",null,"可以集成 JavaMail 发送邮件；"),n("li",null,"可以集成 JMS 消息服务；"),n("li",null,"可以集成 Quartz 实现定时任务；"),n("li",null,"可以集成 Redis 等服务。")],-1),x=n("p",null,"本章我们介绍如何在 Spring 中简单快捷地集成这些第三方组件。",-1),w=n("h2",{id:"🍀-集成-javamail",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🍀-集成-javamail","aria-hidden":"true"},"#"),s(" 🍀 集成 JavaMail")],-1),y={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1319099923693601",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1319099948859426",target:"_blank",rel:"noopener noreferrer"},C=i(`<p>因为在服务器端，主要以发送邮件为主，例如在注册成功、登录时、购物付款后通知用户，基本上不会遇到接收用户邮件的情况，所以本节我们只讨论如何在 Spring 中发送邮件。</p><p>在 Spring 中，发送邮件最终也是需要 JavaMail，Spring 只对 JavaMail 做了一点简单的封装，目的是简化代码。为了在 Spring 中集成 JavaMail，我们在 <code>pom.xml</code> 中添加以下依赖：</p><ul><li>org.springframework:spring-context-support:6.0.0</li><li>jakarta.mail:jakarta.mail-api:2.0.1</li><li>com.sun.mail:jakarta.mail:2.0.1</li></ul><p>以及其他 Web 相关依赖。</p><p>我们希望用户在注册成功后能收到注册邮件，为此，我们先定义一个 <code>JavaMailSender</code> 的 Bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">JavaMailSender</span> <span class="token function">createJavaMailSender</span><span class="token punctuation">(</span>
        <span class="token comment">// smtp.properties:</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.host}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.port}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.auth}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> auth<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.username}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.password}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.debug:true}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> debug<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> mailSender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaMailSenderImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailSender<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailSender<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailSender<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mailSender<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Properties</span> props <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">getJavaMailProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.transport.protocol&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;smtp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.auth&quot;</span><span class="token punctuation">,</span> auth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token number">587</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.starttls.enable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> <span class="token number">465</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.socketFactory.port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;465&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.smtp.socketFactory.class&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mail.debug&quot;</span><span class="token punctuation">,</span> debug<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mailSender<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>JavaMailSender</code> 接口的实现类是 <code>JavaMailSenderImpl</code>，初始化时，传入的参数与 JavaMail 是完全一致的。</p><p>另外注意到需要注入的属性是从 <code>smtp.properties</code> 中读取的，因此，<code>AppConfig</code> 导入的就不止一个 <code>.properties</code> 文件，可以导入多个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:/jdbc.properties&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/smtp.properties&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步是封装一个 <code>MailService</code>，并定义 <code>sendRegistrationMail()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${smtp.from}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> from<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRegistrationMail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome to Java course!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;Hi, %s,&lt;/p&gt;&lt;p&gt;Welcome to Java course!&lt;/p&gt;&lt;p&gt;Sent at %s&lt;/p&gt;&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述代码，<code>MimeMessage</code> 是 JavaMail 的邮件对象，而 <code>MimeMessageHelper</code> 是 Spring 提供的用于简化设置 MimeMessage 的类，比如我们设置 HTML 邮件就可以直接调用 <code>setText(String text, boolean html)</code> 方法，而不必再调用比较繁琐的 JavaMail 接口方法。</p><p>最后一步是调用 <code>JavaMailSender.send()</code> 方法把邮件发送出去。</p><p>在 MVC 的某个 Controller 方法中，当用户注册成功后，我们就启动一个新线程来异步发送邮件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user registered: {}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// send registration mail:</span>
<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    mailService<span class="token punctuation">.</span><span class="token function">sendRegistrationMail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为发送邮件是一种耗时的任务，从几秒到几分钟不等，因此，异步发送是保证页面能快速显示的必要措施。这里我们直接启动了一个新的线程，但实际上还有更优化的方法，我们在下一节讨论。</p><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>Spring 可以集成 JavaMail，通过简单的封装，能简化邮件发送代码。其核心是定义一个 <code>JavaMailSender</code> 的 Bean，然后调用其 <code>send()</code> 方法。</p><h2 id="🍀-集成-jms" tabindex="-1"><a class="header-anchor" href="#🍀-集成-jms" aria-hidden="true">#</a> 🍀 集成 JMS</h2><p>JMS 即 Java Message Service，是 JavaEE 的消息服务接口。JMS 主要有两个版本：1.1 和 2.0。2.0 和 1.1 相比，主要是简化了收发消息的代码。</p><p>所谓消息服务，就是两个进程之间，通过消息服务器传递消息：</p><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>
┌────────┐    ┌──────────────┐    ┌────────┐
│Producer│───&gt;│Message Server│───&gt;│Consumer│
└────────┘    └──────────────┘    └────────┘

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用消息服务，而不是直接调用对方的 API，它的好处是：</p><ul><li>双方各自无需知晓对方的存在，消息可以异步处理，因为消息服务器会在 Consumer 离线的时候自动缓存消息；</li><li>如果 Producer 发送的消息频率高于 Consumer 的处理能力，消息可以积压在消息服务器，不至于压垮 Consumer；</li><li>通过一个消息服务器，可以连接多个 Producer 和多个 Consumer。</li></ul>`,25),j={href:"https://activemq.apache.org/",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"现在问题来了：从官网下载 ActiveMQ 时，蹦出一个页面，让我们选择 ActiveMQ Classic 或者 ActiveMQ Artemis，这两个是什么关系，又有什么区别？",-1),B={href:"https://hornetq.jboss.org/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://activemq.apache.org/components/artemis/download/",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"ARTEMIS_HOME",-1),E=n("code",null,"C:\\Apps\\artemis",-1),P=n("code",null,"ARTEMIS_HOME/bin",-1),L=i(`<ul><li>Windows 下添加 <code>%ARTEMIS_HOME%\\bin</code> 到 Path 路径；</li><li>Mac 和 Linux 下添加 <code>$ARTEMIS_HOME/bin</code> 到 PATH 路径。</li></ul><p>Artemis 有个很好的设计，就是它把程序和数据完全分离了。我们解压后的 <code>ARTEMIS_HOME</code> 目录是程序目录，要启动一个 Artemis 服务，还需要创建一个数据目录。我们把数据目录直接设定在项目 <code>spring-integration-jms</code> 的 <code>jms-data</code> 目录下。执行命令 <code>artemis create jms-data</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">pwd</span>
/Users/liaoxuefeng/workspace/spring-integration-jms

$ artemis create jms-data
Creating ActiveMQ Artemis instance at: /Users/liaoxuefeng/workspace/spring-integration-jms/jms-data

--user: is a mandatory property<span class="token operator">!</span>
Please provide the default username:
admin

--password: is mandatory with this configuration:
Please provide the default password:
********

--allow-anonymous <span class="token operator">|</span> --require-login: is a mandatory property<span class="token operator">!</span>
Allow anonymous access?, valid values are Y,N,True,False
N

Auto tuning journal <span class="token punctuation">..</span>.
done<span class="token operator">!</span> Your system can <span class="token function">make</span> <span class="token number">0.09</span> writes per millisecond, your journal-buffer-timeout will be <span class="token number">11392000</span>

You can now start the broker by executing:

   <span class="token string">&quot;/Users/liaoxuefeng/workspace/spring-integration-jms/jms-data/bin/artemis&quot;</span> run

Or you can run the broker <span class="token keyword">in</span> the background using:

   <span class="token string">&quot;/Users/liaoxuefeng/workspace/spring-integration-jms/jms-data/bin/artemis-service&quot;</span> start

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建过程中，会要求输入连接用户和口令，这里我们设定 <code>admin</code> 和 <code>password</code>，以及是否允许匿名访问（这里选择 <code>N</code>）。</p><p>此数据目录 <code>jms-data</code> 不仅包含消息数据、日志，还自动创建了两个启动服务的命令 <code>bin/artemis</code> 和 <code>bin/artemis-service</code>，前者在前台启动运行，按 Ctrl+C 结束，后者会一直在后台运行。</p><p>我们把目录切换到 <code>jms-data/bin</code>，直接运行 <code>artemis run</code> 即可启动 Artemis 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./artemis run
     _        _               _
    / <span class="token punctuation">\\</span>  ____<span class="token operator">|</span> <span class="token operator">|</span>_  ___ __  __<span class="token punctuation">(</span>_<span class="token punctuation">)</span> _____
   / _ <span class="token punctuation">\\</span><span class="token operator">|</span>  _ <span class="token punctuation">\\</span> __<span class="token operator">|</span>/ _ <span class="token punctuation">\\</span>  <span class="token punctuation">\\</span>/  <span class="token operator">|</span> <span class="token operator">|</span>/  __/
  / ___ <span class="token punctuation">\\</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>/ <span class="token operator">|</span>_/  __/ <span class="token operator">|</span><span class="token punctuation">\\</span>/<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token punctuation">\\</span>___ <span class="token punctuation">\\</span>
 /_/   <span class="token punctuation">\\</span>_<span class="token punctuation">\\</span><span class="token operator">|</span>   <span class="token punctuation">\\</span>__<span class="token punctuation">\\</span>____<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>/___ /
 Apache ActiveMQ Artemis <span class="token number">2.13</span>.0

<span class="token punctuation">..</span>.

<span class="token number">2020</span>-06-02 07:50:21,718 INFO  <span class="token punctuation">[</span>org.apache.activemq.artemis<span class="token punctuation">]</span> AMQ241001: HTTP Server started at http://localhost:8161
<span class="token number">2020</span>-06-02 07:50:21,718 INFO  <span class="token punctuation">[</span>org.apache.activemq.artemis<span class="token punctuation">]</span> AMQ241002: Artemis Jolokia REST API available at http://localhost:8161/console/jolokia
<span class="token number">2020</span>-06-02 07:50:21,719 INFO  <span class="token punctuation">[</span>org.apache.activemq.artemis<span class="token punctuation">]</span> AMQ241004: Artemis Console available at http://localhost:8161/console

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后，Artemis 提示可以通过 URL<code>http://localhost:8161/console</code> 访问管理后台。注意 <em>不要关闭命令行窗口</em>。</p><p>如果 Artemis 启动时显示警告：<code>AMQ222212: Disk Full! ... Clients will report blocked.</code> 这是因为磁盘空间不够，可以在 <code>etc/broker.xml</code> 配置中找到 <code>&lt;max-disk-usage&gt;</code> 并改为 99。</p><p>在编写 JMS 代码之前，我们首先得理解 JMS 的消息模型。JMS 把生产消息的一方称为 Producer，处理消息的一方称为 Consumer。有两种类型的消息通道，一种是 Queue：</p><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>┌────────┐    ┌────────┐    ┌────────┐
│Producer│───&gt;│ Queue  │───&gt;│Consumer│
└────────┘    └────────┘    └────────┘

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种是 Topic：</p><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>                            ┌────────┐
                         ┌─&gt;│Consumer│
                         │  └────────┘
┌────────┐    ┌────────┐ │  ┌────────┐
│Producer│───&gt;│ Topic  │─┼─&gt;│Consumer│
└────────┘    └────────┘ │  └────────┘
                         │  ┌────────┐
                         └─&gt;│Consumer│
                            └────────┘

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的区别在于，Queue 是一种一对一的通道，如果 Consumer 离线无法处理消息时，Queue 会把消息存起来，等 Consumer 再次连接的时候发给它。设定了持久化机制的 Queue 不会丢失消息。如果有多个 Consumer 接入同一个 Queue，那么它们等效于以集群方式处理消息，例如，发送方发送的消息是 A，B，C，D，E，F，两个 Consumer 可能分别收到 A，C，E 和 B，D，F，即每个消息只会交给其中一个 Consumer 处理。</p><p>Topic 则是一种一对多通道。一个 Producer 发出的消息，会被多个 Consumer 同时收到，即每个 Consumer 都会收到一份完整的消息流。那么问题来了：如果某个 Consumer 暂时离线，过一段时间后又上线了，那么在它离线期间产生的消息还能不能收到呢？</p><p>这取决于消息服务器对 Topic 类型消息的持久化机制。如果消息服务器不存储 Topic 消息，那么离线的 Consumer 会丢失部分离线时期的消息，如果消息服务器存储了 Topic 消息，那么离线的 Consumer 可以收到自上次离线时刻开始后产生的所有消息。JMS 规范通过 Consumer 指定一个持久化订阅可以在上线后收取所有离线期间的消息，如果指定的是非持久化订阅，那么离线期间的消息会全部丢失。</p><p>细心的童鞋可以看出来，如果一个 Topic 的消息全部都持久化了，并且只有一个 Consumer，那么它和 Queue 其实是一样的。实际上，很多消息服务器内部都只有 Topic 类型的消息架构，Queue 可以通过 Topic“模拟” 出来。</p><p>无论是 Queue 还是 Topic，对 Producer 没有什么要求。多个 Producer 也可以写入同一个 Queue 或者 Topic，此时消息服务器内部会自动排序确保消息总是有序的。</p><p>以上是消息服务的基本模型。具体到某个消息服务器时，Producer 和 Consumer 通常是通过 TCP 连接消息服务器，在编写 JMS 程序时，又会遇到 <code>ConnectionFactory</code>、<code>Connection</code>、<code>Session</code> 等概念，其实这和 JDBC 连接是类似的：</p><ul><li>ConnectionFactory：代表一个到消息服务器的连接池，类似 JDBC 的 DataSource；</li><li>Connection：代表一个到消息服务器的连接，类似 JDBC 的 Connection；</li><li>Session：代表一个经过认证后的连接会话；</li><li>Message：代表一个消息对象。</li></ul><p>在 JMS 1.1 中，发送消息的典型代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建连接:</span>
        connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建会话:</span>
        <span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个 Producer 并关联到某个 Queue:</span>
        <span class="token class-name">MessageProducer</span> messageProducer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个文本消息:</span>
        <span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送消息:</span>
        messageProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>textMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关闭连接:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 JMS 异常</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMS 2.0 改进了一些 API 接口，发送消息变得更简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">JMSContext</span> context <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JMSContext</code> 实现了 <code>AutoCloseable</code> 接口，可以使用 <code>try(resource)</code> 语法，代码更简单。</p><p>有了以上预备知识，我们就可以开始开发 JMS 应用了。</p><p>首先，我们在 <code>pom.xml</code> 中添加如下依赖：</p><ul><li>org.springframework:spring-jms:6.0.0</li><li>org.apache.activemq:artemis-jakarta-client:2.27.0</li></ul><p>Artemis 的 Client 接口依赖了 <code>jakarta.jms:jakarta.jms-api</code>，因此不必再引入 JMS API 的依赖。</p><p>在 AppConfig 中，通过 <code>@EnableJms</code> 让 Spring 自动扫描 JMS 相关的 Bean，并加载 JMS 配置文件 <code>jms.properties</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Configuration
@ComponentScan
@EnableWebMvc
@EnableJms // 启用 JMS
@EnableTransactionManagement
@PropertySource({&quot;classpath:/jdbc.properties&quot;, &quot;classpath:/jms.properties&quot;})
public class AppConfig {
    ...
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先要创建的 Bean 是 <code>ConnectionFactory</code>，即连接消息服务器的连接池：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">ConnectionFactory</span> <span class="token function">createJMSConnectionFactory</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jms.uri:tcp://localhost:61616}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> uri<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jms.username:admin}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jms.password:password}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQJMSConnectionFactory</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们使用的消息服务器是 ActiveMQ Artemis，所以 <code>ConnectionFactory</code> 的实现类就是消息服务器提供的 <code>ActiveMQJMSConnectionFactory</code>，它需要的参数均由配置文件读取后传入，并设置了默认值。</p><p>我们再创建一个 <code>JmsTemplate</code>，它是 Spring 提供的一个工具类，和 <code>JdbcTemplate</code> 类似，可以简化发送消息的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">JmsTemplate</span> <span class="token function">createJmsTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JmsTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步要创建的是 <code>JmsListenerContainerFactory</code>，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;jmsListenerContainerFactory&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">DefaultJmsListenerContainerFactory</span> <span class="token function">createJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了必须指定 Bean 的名称为 <code>jmsListenerContainerFactory</code> 外，这个 Bean 的作用是处理和 Consumer 相关的 Bean。我们先跳过它的原理，继续编写 <code>MessagingService</code> 来发送消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessagingService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">JmsTemplate</span> jmsTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMailMessage</span><span class="token punctuation">(</span><span class="token class-name">MailMessage</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;jms/queue/mail&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMS 的消息类型支持以下几种：</p><ul><li>TextMessage：文本消息；</li><li>BytesMessage：二进制消息；</li><li>MapMessage：包含多个 Key-Value 对的消息；</li><li>ObjectMessage：直接序列化 Java 对象的消息；</li><li>StreamMessage：一个包含基本类型序列的消息。</li></ul><p>最常用的是发送基于 JSON 的文本消息，上述代码通过 <code>JmsTemplate</code> 创建一个 <code>TextMessage</code> 并发送到名称为 <code>jms/queue/mail</code> 的 Queue。</p><p>注意：Artemis 消息服务器默认配置下会自动创建 Queue，因此不必手动创建一个名为 <code>jms/queue/mail</code> 的 Queue，但不是所有的消息服务器都会自动创建 Queue，生产环境的消息服务器通常会关闭自动创建功能，需要手动创建 Queue。</p><p>再注意到 <code>MailMessage</code> 是我们自己定义的一个 JavaBean，真正的 JMS 消息是创建的 <code>TextMessage</code>，它的内容是 JSON。</p><p>当用户注册成功后，我们就调用 <code>MessagingService.sendMailMessage()</code> 发送一条 JMS 消息，此代码十分简单，这里不再贴出。</p><p>下面我们要详细讨论的是如何处理消息，即编写 Consumer。从理论上讲，可以创建另一个 Java 进程来处理消息，但对于我们这个简单的 Web 程序来说没有必要，直接在同一个 Web 应用中接收并处理消息即可。</p><p>处理消息的核心代码是编写一个 Bean，并在处理方法上标注 <code>@JmsListener</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailMessageListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MailService</span> mailService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;jms/queue/mail&quot;</span><span class="token punctuation">,</span> concurrency <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMailMessageReceived</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;received message:&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token keyword">instanceof</span> <span class="token class-name">TextMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MailMessage</span> mm <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token class-name">MailMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mailService<span class="token punctuation">.</span><span class="token function">sendRegistrationMail</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;unable to process non-text message!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到 <code>@JmsListener</code> 指定了 Queue 的名称，因此，凡是发到此 Queue 的消息都会被这个 <code>onMailMessageReceived()</code> 方法处理，方法参数是 JMS 的 <code>Message</code> 接口，我们通过强制转型为 <code>TextMessage</code> 并提取 JSON，反序列化后获得自定义的 JavaBean，也就获得了发送邮件所需的所有信息。</p><p>下面问题来了：Spring 处理 JMS 消息的流程是什么？</p><p>如果我们直接调用 JMS 的 API 来处理消息，那么编写的代码大致如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 JMS 连接:</span>
<span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建会话:</span>
<span class="token class-name">Session</span> session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token constant">AUTO_ACKNOWLEDGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建一个 Consumer:</span>
<span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 为 Consumer 指定一个消息处理器:</span>
consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在此处理消息...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 启动接收消息的循环:</span>
connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们自己编写的 <code>MailMessageListener.onMailMessageReceived()</code> 相当于消息处理器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mailMessageListener<span class="token punctuation">.</span><span class="token function">onMailMessageReceived</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，Spring 根据 <code>AppConfig</code> 的注解 <code>@EnableJms</code> 自动扫描带有 <code>@JmsListener</code> 的 Bean 方法，并为其创建一个 <code>MessageListener</code> 把它包装起来。</p><p>注意到前面我们还创建了一个 <code>JmsListenerContainerFactory</code> 的 Bean，它的作用就是为每个 <code>MessageListener</code> 创建 <code>MessageConsumer</code> 并启动消息接收循环。</p><p>再注意到 <code>@JmsListener</code> 还有一个 <code>concurrency</code> 参数，10 表示可以最多同时并发处理 10 个消息，<code>5-10</code> 表示并发处理的线程可以在 5~10 之间调整。</p><p>因此，Spring 在通过 <code>MessageListener</code> 接收到消息后，并不是直接调用 <code>mailMessageListener.onMailMessageReceived()</code>，而是用线程池调用，因此，要时刻牢记，<code>onMailMessageReceived()</code> 方法可能被多线程并发执行，一定要保证线程安全。</p><p>我们总结一下 Spring 接收消息的步骤：</p><p>通过 <code>JmsListenerContainerFactory</code> 配合 <code>@EnableJms</code> 扫描所有 <code>@JmsListener</code> 方法，自动创建 <code>MessageConsumer</code>、<code>MessageListener</code> 以及线程池，启动消息循环接收处理消息，最终由我们自己编写的 <code>@JmsListener</code> 方法处理消息，可能会由多线程同时并发处理。</p><p>要验证消息发送和处理，我们注册一个新用户，可以看到如下日志输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2020-06-02 08:04:27 INFO  c.i.learnjava.web.UserController - user registered: bob@example.com
2020-06-02 08:04:27 INFO  c.i.l.service.MailMessageListener - received message: ActiveMQMessage[ID:9fc5...]:PERSISTENT/ClientMessageImpl[messageID=983, durable=true, address=jms/queue/mail, ...]
2020-06-02 08:04:27 INFO  c.i.learnjava.service.MailService - [send mail] sending registration mail to bob@example.com...
2020-06-02 08:04:30 INFO  c.i.learnjava.service.MailService - [send mail] registration mail was sent to bob@example.com.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，消息被成功发送到 Artemis，然后在很短的时间内被接收处理了。</p><p>使用消息服务对发送 Email 进行改造的好处是，发送 Email 的能力通常是有限的，通过 JMS 消息服务，如果短时间内需要给大量用户发送 Email，可以先把消息堆积在 JMS 服务器上慢慢发送，对于批量发送邮件、短信等尤其有用。</p><h3 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1" aria-hidden="true">#</a> 练习</h3><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><p>JMS 是 Java 消息服务，可以通过 JMS 服务器实现消息的异步处理。</p><p>消息服务主要解决 Producer 和 Consumer 生产和处理速度不匹配的问题。</p><h2 id="🍀-使用-scheduler" tabindex="-1"><a class="header-anchor" href="#🍀-使用-scheduler" aria-hidden="true">#</a> 🍀 使用 Scheduler</h2><p>在很多应用程序中，经常需要执行定时任务。例如，每天或每月给用户发送账户汇总报表，定期检查并发送系统状态报告，等等。</p>`,71),D={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1306581130018849",target:"_blank",rel:"noopener noreferrer"},Q=i(`<p>我们还是以实际代码为例，建立工程 <code>spring-integration-schedule</code>，无需额外的依赖，我们可以直接在 <code>AppConfig</code> 中加上 <code>@EnableScheduling</code> 就开启了定时任务的支持：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:/jdbc.properties&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/task.properties&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们可以直接在一个 Bean 中编写一个 <code>public void</code> 无参数方法，然后加上 <code>@Scheduled</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span> <span class="token number">60_000</span><span class="token punctuation">,</span> fixedRate <span class="token operator">=</span> <span class="token number">60_000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkSystemStatusEveryMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Start check system status...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述注解指定了启动延迟 60 秒，并以 60 秒的间隔执行任务。现在，我们直接运行应用程序，就可以在控制台看到定时任务打印的日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2020</span>-06-03 <span class="token number">18</span>:47:32 INFO  <span class="token punctuation">[</span>pool-1-thread-1<span class="token punctuation">]</span> c.i.learnjava.service.TaskService - Start check system status<span class="token punctuation">..</span>.
<span class="token number">2020</span>-06-03 <span class="token number">18</span>:48:32 INFO  <span class="token punctuation">[</span>pool-1-thread-1<span class="token punctuation">]</span> c.i.learnjava.service.TaskService - Start check system status<span class="token punctuation">..</span>.
<span class="token number">2020</span>-06-03 <span class="token number">18</span>:49:32 INFO  <span class="token punctuation">[</span>pool-1-thread-1<span class="token punctuation">]</span> c.i.learnjava.service.TaskService - Start check system status<span class="token punctuation">..</span>.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有看到定时任务的日志，需要检查：</p><ul><li>是否忘记了在 <code>AppConfig</code> 中标注 <code>@EnableScheduling</code>；</li><li>是否忘记了在定时任务的方法所在的 class 标注 <code>@Component</code>。</li></ul>`,8),F=n("code",null,"fixedRate",-1),I=n("code",null,"fixedDelay",-1),O={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1306581130018849",target:"_blank",rel:"noopener noreferrer"},V=i(`<p>有的童鞋在实际开发中会遇到一个问题，因为 Java 的注解全部是常量，写死了 <code>fixedDelay=30000</code>，如果根据实际情况要改成 60 秒怎么办，只能重新编译？</p><p>我们可以把定时任务的配置放到配置文件中，例如 <code>task.properties</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>task.checkDiskSpace=30000

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以随时修改配置文件而无需动代码。但是在代码中，我们需要用 <code>fixedDelayString</code> 取代 <code>fixedDelay</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay <span class="token operator">=</span> <span class="token number">30_000</span><span class="token punctuation">,</span> fixedDelayString <span class="token operator">=</span> <span class="token string">&quot;\${task.checkDiskSpace:30000}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkDiskSpaceEveryMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Start check disk space...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到上述代码的注解参数 <code>fixedDelayString</code> 是一个属性占位符，并配有默认值 30000，Spring 在处理 <code>@Scheduled</code> 注解时，如果遇到 <code>String</code>，会根据占位符自动用配置项替换，这样就可以灵活地修改定时任务的配置。</p><p>此外，<code>fixedDelayString</code> 还可以使用更易读的 <code>Duration</code>，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Scheduled(initialDelay = 30_000, fixedDelayString = &quot;\${task.checkDiskSpace:PT2M30S}&quot;)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),X=n("code",null,"PT2M30S",-1),R=n("code",null,"Duration",-1),N={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1303871087444002",target:"_blank",rel:"noopener noreferrer"},H=i(`<p>多个 <code>@Scheduled</code> 方法完全可以放到一个 Bean 中，这样便于统一管理各类定时任务。</p><h3 id="使用-cron-任务" tabindex="-1"><a class="header-anchor" href="#使用-cron-任务" aria-hidden="true">#</a> 使用 Cron 任务</h3><p>还有一类定时任务，它不是简单的重复执行，而是按时间触发，我们把这类任务称为 Cron 任务，例如：</p><ul><li>每天凌晨 2:15 执行报表任务；</li><li>每个工作日 12:00 执行特定任务；</li><li>...</li></ul><p>Cron 源自 Unix/Linux 系统自带的 crond 守护进程，以一个简洁的表达式定义任务触发时间。在 Spring 中，也可以使用 Cron 表达式来执行 Cron 任务，在 Spring 中，它的格式是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>秒 分 小时 天 月份 星期 年

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>年是可以忽略的，通常不写。每天凌晨 2:15 执行的 Cron 表达式就是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 15 2 * * *

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个工作日 12:00 执行的 Cron 表达式就是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 0 12 * * MON-FRI

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个月 1 号，2 号，3 号和 10 号 12:00 执行的 Cron 表达式就是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 0 12 1-3,10 * *

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring 中，我们定义一个每天凌晨 2:15 执行的任务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;\${task.report:0 15 2 * * *}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cronDailyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Start daily report task...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cron 任务同样可以使用属性占位符，这样修改起来更加方便。</p><p>Cron 表达式还可以表达每 10 分钟执行，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 */10 * * * *

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在每个小时的 0:00，10:00，20:00，30:00，40:00，50:00 均会执行任务，实际上它可以取代 <code>fixedRate</code> 类型的定时任务。</p><h3 id="集成-quartz" tabindex="-1"><a class="header-anchor" href="#集成-quartz" aria-hidden="true">#</a> 集成 Quartz</h3><p>在 Spring 中使用定时任务和 Cron 任务都十分简单，但是要注意到，这些任务的调度都是在每个 JVM 进程中的。如果在本机启动两个进程，或者在多台机器上启动应用，这些进程的定时任务和 Cron 任务都是独立运行的，互不影响。</p>`,20),W={href:"https://www.quartz-scheduler.org/",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,"Quartz 可以配置一个 JDBC 数据源，以便存储所有的任务调度计划以及任务执行状态。也可以使用内存来调度任务，但这样配置就和使用 Spring 的调度没啥区别了，额外集成 Quartz 的意义就不大。",-1),$={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#scheduling-quartz",target:"_blank",rel:"noopener noreferrer"},U=i(`<p>思考：如果不使用 Quartz 的 JDBC 配置，多个 Spring 应用同时运行时，如何保证某个任务只在某一台机器执行？</p><h3 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2" aria-hidden="true">#</a> 练习</h3><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><p>Spring 内置定时任务和 Cron 任务的支持，编写调度任务十分方便。</p><h2 id="🍀-集成-jmx" tabindex="-1"><a class="header-anchor" href="#🍀-集成-jmx" aria-hidden="true">#</a> 🍀 集成 JMX</h2><p>在 Spring 中，可以方便地集成 JMX。</p><p>那么第一个问题来了：什么是 JMX？</p><p>JMX 是 Java Management Extensions，它是一个 Java 平台的管理和监控接口。为什么要搞 JMX 呢？因为在所有的应用程序中，对运行中的程序进行监控都是非常重要的，Java 应用程序也不例外。我们肯定希望知道 Java 应用程序当前的状态，例如，占用了多少内存，分配了多少内存，当前有多少活动线程，有多少休眠线程等等。如何获取这些信息呢？</p><p>为了标准化管理和监控，Java 平台使用 JMX 作为管理和监控的标准接口，任何程序，只要按 JMX 规范访问这个接口，就可以获取所有管理与监控信息。</p><p>实际上，常用的运维监控如 Zabbix、Nagios 等工具对 JVM 本身的监控都是通过 JMX 获取的信息。</p><p>因为 JMX 是一个标准接口，不但可以用于管理 JVM，还可以管理应用程序自身。下图是 JMX 的架构：</p><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>    ┌─────────┐  ┌─────────┐
    │jconsole │  │   Web   │
    └─────────┘  └─────────┘
         │            │
┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ─
 JVM     ▼            ▼        │
│   ┌─────────┐  ┌─────────┐
  ┌─┤Connector├──┤ Adaptor ├─┐ │
│ │ └─────────┘  └─────────┘ │
  │       MBeanServer        │ │
│ │ ┌──────┐┌──────┐┌──────┐ │
  └─┤MBean1├┤MBean2├┤MBean3├─┘ │
│   └──────┘└──────┘└──────┘
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMX 把所有被管理的资源都称为 MBean（Managed Bean），这些 MBean 全部由 MBeanServer 管理，如果要访问 MBean，可以通过 MBeanServer 对外提供的访问接口，例如通过 RMI 或 HTTP 访问。</p><p>注意到使用 JMX 不需要安装任何额外组件，也不需要第三方库，因为 MBeanServer 已经内置在 JavaSE 标准库中了。JavaSE 还提供了一个 <code>jconsole</code> 程序，用于通过 RMI 连接到 MBeanServer，这样就可以管理整个 Java 进程。</p><p>除了 JVM 会把自身的各种资源以 MBean 注册到 JMX 中，我们自己的配置、监控信息也可以作为 MBean 注册到 JMX，这样，管理程序就可以直接控制我们暴露的 MBean。因此，应用程序使用 JMX，只需要两步：</p><ol><li>编写 MBean 提供管理接口和监控数据；</li><li>注册 MBean。</li></ol><p>在 Spring 应用程序中，使用 JMX 只需要一步：</p><ol><li>编写 MBean 提供管理接口和监控数据。</li></ol><p>第二步注册的过程由 Spring 自动完成。我们以实际工程为例，首先在 <code>AppConfig</code> 中加上 <code>@EnableMBeanExport</code> 注解，告诉 Spring 自动注册 MBean：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Configuration
@ComponentScan
@EnableWebMvc
@EnableMBeanExport // 自动注册 MBean
@EnableTransactionManagement
@PropertySource({&quot;classpath:/jdbc.properties&quot;})
public class AppConfig {
    ...
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩下的全部工作就是编写 MBean。我们以实际问题为例，假设我们希望给应用程序添加一个 IP 黑名单功能，凡是在黑名单中的 IP 禁止访问，传统的做法是定义一个配置文件，启动的时候读取：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>## 🍀 blacklist.txt
1.2.3.4
5.6.7.8
2.2.3.4
...

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要修改黑名单怎么办？修改配置文件，然后重启应用程序。</p><p>但是每次都重启应用程序实在是太麻烦了，能不能不重启应用程序？可以自己写一个定时读取配置文件的功能，检测到文件改动时自动重新读取。</p><p>上述需求本质上是在应用程序运行期间对参数、配置等进行热更新并要求尽快生效。如果以 JMX 的方式实现，我们不必自己编写自动重新读取等任何代码，只需要提供一个符合 JMX 标准的 MBean 来存储配置即可。</p><p>还是以 IP 黑名单为例，JMX 的 MBean 通常以 MBean 结尾，因此我们遵循标准命名规范，首先编写一个 <code>BlacklistMBean</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class BlacklistMBean {
    private Set&lt;String&gt; ips = new HashSet&lt;&gt;();

    public String[] getBlacklist() {
        return ips.toArray(String[]::new);
    }

    public void addBlacklist(String ip) {
        ips.add(ip);
    }

    public void removeBlacklist(String ip) {
        ips.remove(ip);
    }

    public boolean shouldBlock(String ip) {
        return ips.contains(ip);
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 MBean 没什么特殊的，它的逻辑和普通 Java 类没有任何区别。</p><p>下一步，我们要使用 JMX 的客户端来实时热更新这个 MBean，所以要给它加上一些注解，让 Spring 能根据注解自动把相关方法注册到 MBeanServer 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ManagedResource</span><span class="token punctuation">(</span>objectName <span class="token operator">=</span> <span class="token string">&quot;sample:name=blacklist&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;Blacklist of IP addresses&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlacklistMBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManagedAttribute</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;Get IP addresses in blacklist&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBlacklist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ips<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ManagedOperation</span>
    <span class="token annotation punctuation">@ManagedOperationParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;Target IP address that will be added to blacklist&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBlacklist</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ips<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ManagedOperation</span>
    <span class="token annotation punctuation">@ManagedOperationParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;Target IP address that will be removed from blacklist&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBlacklist</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ips<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldBlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ips<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述代码，<code>BlacklistMBean</code> 首先是一个标准的 Spring 管理的 Bean，其次，添加了 <code>@ManagedResource</code> 表示这是一个 MBean，将要被注册到 JMX。objectName 指定了这个 MBean 的名字，通常以 <code>company:name=Xxx</code> 来分类 MBean。</p><p>对于属性，使用 <code>@ManagedAttribute</code> 注解标注。上述 MBean 只有 get 属性，没有 set 属性，说明这是一个只读属性。</p><p>对于操作，使用 <code>@ManagedOperation</code> 注解标准。上述 MBean 定义了两个操作：<code>addBlacklist()</code> 和 <code>removeBlacklist()</code>，其他方法如 <code>shouldBlock()</code> 不会被暴露给 JMX。</p><p>使用 MBean 和普通 Bean 是完全一样的。例如，我们在 <code>BlacklistInterceptor</code> 对 IP 进行黑名单拦截：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Order(1)
@Component
public class BlacklistInterceptor implements HandlerInterceptor {
    final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    BlacklistMBean blacklistMBean;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        String ip = request.getRemoteAddr();
        logger.info(&quot;check ip address {}...&quot;, ip);
        // 是否在黑名单中:
        if (blacklistMBean.shouldBlock(ip)) {
            logger.warn(&quot;will block ip {} for it is in blacklist.&quot;, ip);
            // 发送 403 错误响应:
            response.sendError(403);
            return false;
        }
        return true;
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步就是正常启动 Web 应用程序，不要关闭它，我们打开另一个命令行窗口，输入 <code>jconsole</code> 启动 JavaSE 自带的一个 JMX 客户端程序：</p><figure><img src="`+d+'" alt="jconsole" tabindex="0" loading="lazy"><figcaption>jconsole</figcaption></figure><p>通过 jconsole 连接到一个 Java 进程最简单的方法是直接在 Local Process 中找到正在运行的 <code>AppConfig</code>，点击 Connect 即可连接到我们当前正在运行的 Web 应用，在 jconsole 中可直接看到内存、CPU 等资源的监控。</p><p>我们点击 MBean，左侧按分类列出所有 MBean，可以在 <code>java.lang</code> 查看内存等信息：</p><figure><img src="'+r+'" alt="mbean" tabindex="0" loading="lazy"><figcaption>mbean</figcaption></figure><p>细心的童鞋可以看到 HikariCP 连接池也是通过 JMX 监控的。</p><p>在 <code>sample</code> 中可以看到我们自己的 MBean，点击可查看属性 <code>blacklist</code>：</p><figure><img src="'+v+'" alt="mbean-value" tabindex="0" loading="lazy"><figcaption>mbean-value</figcaption></figure><p>点击 <code>Operations</code>-<code>addBlacklist</code>，可以填入 <code>127.0.0.1</code> 并点击 <code>addBlacklist</code> 按钮，相当于 jconsole 通过 JMX 接口，调用了我们自己的 <code>BlacklistMBean</code> 的 <code>addBlacklist()</code> 方法，传入的参数就是填入的 <code>127.0.0.1</code>：</p><figure><img src="'+k+'" alt="mbean-invoke-ok" tabindex="0" loading="lazy"><figcaption>mbean-invoke-ok</figcaption></figure><p>再次查看属性 <code>blacklist</code>，可以看到结果已经更新了：</p><figure><img src="'+m+'" alt="mbean-modified" tabindex="0" loading="lazy"><figcaption>mbean-modified</figcaption></figure><p>我们可以在浏览器中测试一下黑名单功能是否已生效：</p><figure><img src="'+b+`" alt="403" tabindex="0" loading="lazy"><figcaption>403</figcaption></figure><p>可见，<code>127.0.0.1</code> 确实被添加到了黑名单，后台日志打印如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2020-06-06 20:22:12 INFO  c.i.l.web.BlacklistInterceptor - check ip address 127.0.0.1...
2020-06-06 20:22:12 WARN  c.i.l.web.BlacklistInterceptor - will block ip 127.0.0.1 for it is in blacklist.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果使用 IPv6，那么需要把 <code>0:0:0:0:0:0:0:1</code> 这个本机地址加到黑名单。</p><p>如果从 jconsole 中调用 <code>removeBlacklist</code> 移除 <code>127.0.0.1</code>，刷新浏览器可以看到又允许访问了。</p><p>使用 jconsole 直接通过 Local Process 连接 JVM 有个限制，就是 jconsole 和正在运行的 JVM 必须在同一台机器。如果要远程连接，首先要打开 JMX 端口。我们在启动 <code>AppConfig</code> 时，需要传入以下 JVM 启动参数：</p><ul><li>-Dcom.sun.management.jmxremote.port=19999</li><li>-Dcom.sun.management.jmxremote.authenticate=false</li><li>-Dcom.sun.management.jmxremote.ssl=false</li></ul>`,55),G={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/management/agent.html#gdeum",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"ip:19999",-1),Y=i(`<p>许多 JavaEE 服务器如 JBoss 的管理后台都是通过 JMX 提供管理接口，并由 Web 方式访问，对用户更加友好。</p><p>在实际项目中，通过 JMX 实现配置的实时更新其实并不常用，JMX 更多地用于收集 JVM 的运行状态和应用程序的性能数据，然后通过监控服务器汇总数据后实现监控与报警。一个典型的监控系统架构如下：</p><div class="language-ascii line-numbers-mode" data-ext="ascii"><pre class="language-ascii"><code>┌───────────────┐   ┌───────────────┐
│  Web Console  │◀──│Metrics Server │
└───────────────┘   └───────────────┘
                            │
                            │
   ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ┐
     ┌───────────────┐      │
   │ │      App      │      │    │
     ├─────────┬─────┤   ┌─────┐
   │ │         │ JMX │──▶│Agent│ │
     │         └─────┤   └─────┘
   │ │      JVM      │           │
     └───────────────┘
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Z={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://www.datadoghq.com/",target:"_blank",rel:"noopener noreferrer"},sn=i('<h3 id="练习-3" tabindex="-1"><a class="header-anchor" href="#练习-3" aria-hidden="true">#</a> 练习</h3><p>编写一个 MBean 统计当前注册用户数量，并在 jconsole 中查看：</p><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><p>在 Spring 中使用 JMX 需要：</p><ul><li>通过 <code>@EnableMBeanExport</code> 启用自动注册 MBean；</li><li>编写 MBean 并实现管理属性和管理操作。</li></ul>',5);function an(en,tn){const e=o("router-link"),p=o("ExternalLinkIcon");return l(),u("div",null,[n("details",M,[h,n("nav",f,[n("ul",null,[n("li",null,[a(e,{to:"#🍀-集成-javamail"},{default:t(()=>[s("🍀 集成 JavaMail")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#练习"},{default:t(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结"},{default:t(()=>[s("小结")]),_:1})])])]),n("li",null,[a(e,{to:"#🍀-集成-jms"},{default:t(()=>[s("🍀 集成 JMS")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#练习-1"},{default:t(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结-1"},{default:t(()=>[s("小结")]),_:1})])])]),n("li",null,[a(e,{to:"#🍀-使用-scheduler"},{default:t(()=>[s("🍀 使用 Scheduler")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#使用-cron-任务"},{default:t(()=>[s("使用 Cron 任务")]),_:1})]),n("li",null,[a(e,{to:"#集成-quartz"},{default:t(()=>[s("集成 Quartz")]),_:1})]),n("li",null,[a(e,{to:"#练习-2"},{default:t(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结-2"},{default:t(()=>[s("小结")]),_:1})])])]),n("li",null,[a(e,{to:"#🍀-集成-jmx"},{default:t(()=>[s("🍀 集成 JMX")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#练习-3"},{default:t(()=>[s("练习")]),_:1})]),n("li",null,[a(e,{to:"#小结-3"},{default:t(()=>[s("小结")]),_:1})])])])])])]),S,_,x,w,n("p",null,[s("我们在 "),n("a",y,[s("发送 Email"),a(p)]),s(" 和 "),n("a",J,[s("接收 Email"),a(p)]),s(" 中已经介绍了如何通过 JavaMail 来收发电子邮件。在 Spring 中，同样可以集成 JavaMail。")]),C,n("p",null,[s("因为消息服务在各类应用程序中非常有用，所以 JavaEE 专门定义了 JMS 规范。注意到 JMS 是一组接口定义，如果我们要使用 JMS，还需要选择一个具体的 JMS 产品。常用的 JMS 服务器有开源的 "),n("a",j,[s("ActiveMQ"),a(p)]),s("，商业服务器如 WebLogic、WebSphere 等也内置了 JMS 支持。这里我们选择开源的 ActiveMQ 作为 JMS 服务器，因此，在开发 JMS 之前我们必须首先安装 ActiveMQ。")]),q,n("p",null,[s("实际上 ActiveMQ Classic 原来就叫 ActiveMQ，是 Apache 开发的基于 JMS 1.1 的消息服务器，目前稳定版本号是 5.x，而 ActiveMQ Artemis 是由 RedHat 捐赠的 "),n("a",B,[s("HornetQ"),a(p)]),s(" 服务器代码的基础上开发的，目前稳定版本号是 2.x。和 ActiveMQ Classic 相比，Artemis 版的代码与 Classic 完全不同，并且，它支持 JMS 2.0，使用基于 Netty 的异步 IO，大大提升了性能。此外，Artemis 不仅提供了 JMS 接口，它还提供了 AMQP 接口，STOMP 接口和物联网使用的 MQTT 接口。选择 Artemis，相当于一鱼四吃。")]),n("p",null,[s("所以，我们这里直接选择 ActiveMQ Artemis。从官网 "),n("a",A,[s("下载"),a(p)]),s(" 最新的 2.x 版本，解压后设置环境变量 "),T,s("，指向 Artemis 根目录，例如 "),E,s("，然后，把 "),P,s(" 加入 PATH 环境变量：")]),L,n("p",null,[s("定时任务我们在 "),n("a",D,[s("使用线程池"),a(p)]),s(" 一节中已经讲到了，Java 标准库本身就提供了定时执行任务的功能。在 Spring 中，使用定时任务更简单，不需要手写线程池相关代码，只需要两个注解即可。")]),Q,n("p",null,[s("除了可以使用 "),F,s(" 外，还可以使用 "),I,s("，两者的区别我们已经在 "),n("a",O,[s("使用线程池"),a(p)]),s(" 一节中讲过，这里不再重复。")]),V,n("p",null,[s("以字符串 "),X,s(" 表示的 "),R,s(" 就是 2 分 30 秒，请参考 "),n("a",N,[s("LocalDateTime"),a(p)]),s(" 一节的 Duration 相关部分。")]),H,n("p",null,[s("如果一些定时任务要以集群的方式运行，例如每天 23:00 执行检查任务，只需要集群中的一台运行即可，这个时候，可以考虑使用 "),n("a",W,[s("Quartz"),a(p)]),s("。")]),z,n("p",null,[s("Quartz 的 JDBC 配置比较复杂，Spring 对其也有一定的支持。要详细了解 Quartz 的集成，请参考 "),n("a",$,[s("Spring 的文档"),a(p)]),s("。")]),U,n("p",null,[s("第一个参数表示在 19999 端口监听 JMX 连接，第二个和第三个参数表示无需验证，不使用 SSL 连接，在开发测试阶段比较方便，生产环境必须指定验证方式并启用 SSL。详细参数可参考 Oracle"),n("a",G,[s("官方文档"),a(p)]),s("。这样 jconsole 可以用 "),K,s(" 的远程方式连接 JMX。连接后的操作是完全一样的。")]),Y,n("p",null,[s("其中，App 自身和 JVM 的的统计数据都通过 JMX 收集并发送给本机的一个 Agent，Agent 再将数据发送至监控服务器，最后以可视化的形式将监控数据通过 Web 等形式展示给用户。常用的监控系统有开源的 "),n("a",Z,[s("Prometheus"),a(p)]),s(" 和以云服务方式提供的 "),n("a",nn,[s("DataDog"),a(p)]),s(" 等。")]),sn])}const cn=c(g,[["render",an],["__file","5.html.vue"]]);export{cn as default};
