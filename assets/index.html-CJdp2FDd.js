import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,a as n,b as a,w as e,d as l,e as c}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/202206092002504-C24gfKz7.png",d="/VueDoc/assets/202206092006994-C0cwWFbL.png",r="/VueDoc/assets/202206092152239-EN0ejKaQ.png",k="/VueDoc/assets/202206092154460-EPzSF19T.png",m="/VueDoc/assets/202206092157028-CpFeDR61.png",v={},b={class:"hint-container details"},g=n("summary",null,"目录",-1),h={class:"table-of-contents"},f=l('<h2 id="🍀-面向过程-pop-与面向对象-oop" tabindex="-1"><a class="header-anchor" href="#🍀-面向过程-pop-与面向对象-oop" aria-hidden="true">#</a> 🍀 面向过程 (POP) 与面向对象 (OOP)</h2><p>二者都是一种思想，面向对象是相对于面向过程而言的。</p><p>面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。</p><p>现实世界中，我们定义了 “人” 这种抽象概念，而具体的人则是 “小明”、“小红”、“小军” 等一个个具体的人。所以，“人”可以定义为一个类（<em>class</em>），而具体的人则是实例（<em>instance</em>）：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样的，“书” 也是一种抽象的概念，所以它是类，而《Java 核心技术》、《Java 编程思想》、《Java 学习笔记》则是实例：</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="🍀-人把大象装进冰箱" tabindex="-1"><a class="header-anchor" href="#🍀-人把大象装进冰箱" aria-hidden="true">#</a> 🍀 “人把大象装进冰箱”</h2><ol><li><p><strong><em>面向过程</em></strong> ，强调的是功能行为，以函数为最小单位，考虑 <strong><em>怎么做</em></strong> 。</p><p>① 打开冰箱 ② 把大象装进冰箱 ③ 把冰箱门关闭</p></li><li><p><strong><em>面向对象</em></strong> ，将功能封装进对象，强调具备了功能的对象，<em>以类 / 对象为最小单位</em>，考虑 <strong><em>谁来做</em></strong> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    人 <span class="token punctuation">{</span>
        打开 <span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>
            冰箱<span class="token punctuation">.</span> 开门 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        抬起 <span class="token punctuation">(</span>大象<span class="token punctuation">)</span><span class="token punctuation">{</span>
            大象<span class="token punctuation">.</span> 进入 <span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        关闭 <span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span>
            冰箱<span class="token punctuation">.</span> 关门 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    冰箱 <span class="token punctuation">{</span>
        开门 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        关门 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    大象 <span class="token punctuation">{</span>
        进入 <span class="token punctuation">(</span>冰箱<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等</p><h2 id="🍀-class-和-instance" tabindex="-1"><a class="header-anchor" href="#🍀-class-和-instance" aria-hidden="true">#</a> 🍀 class 和 instance</h2><p>所以，只要理解了 <code>class</code> 和 <code>instance</code> 的概念，基本上就明白了什么是面向对象编程。</p><p><code>class</code> 是一种对象模版，它定义了如何创建实例，因此，<code>class</code> 本身就是一种数据类型：</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而 instance 是对象实例，instance 是根据 class 创建的实例，可以创建多个 instance ，每个 instance 类型相同，但各自属性可能不相同：</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="🍀-定义-class" tabindex="-1"><a class="header-anchor" href="#🍀-定义-class" aria-hidden="true">#</a> 🍀 定义 class</h2><p>在 Java 中，创建一个类，例如，给这个类命名为 Person，就是定义一个 class：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 <code>class</code> 可以包含多个字段（<em>field</em>），字段用来描述一个类的特征。上面的 <code>Person</code> 类，我们定义了两个字段，一个是 <code>String</code> 类型的字段，命名为 <code>name</code>，一个是 <code>int</code> 类型的字段，命名为 <code>age</code> 。因此，通过 <code>class</code>，把一组数据汇集到一个对象上，实现了数据封装。</p><p><code>public</code> 是用来修饰字段的，它表示这个字段可以被外部访问。</p><p>我们再看另一个 Book 类的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> isbn<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请指出 <code>Book</code> 类的各个字段。</p><h2 id="🍀-创建实例" tabindex="-1"><a class="header-anchor" href="#🍀-创建实例" aria-hidden="true">#</a> 🍀 创建实例</h2><p>定义了 <code>class</code>，只是定义了对象模版，而要根据对象模版创建出真正的对象实例，必须用 <code>new</code> 操作符。</p><p><code>new</code> 操作符可以创建一个实例，然后，我们需要定义一个引用类型的变量来指向这个实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> ming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码创建了一个 <code>Person</code> 类型的实例，并通过变量 <code>ming</code> 指向它。</p><p>注意区分 <code>Person ming</code> 是定义 <code>Person</code> 类型的变量 <code>ming</code>，而 <code>new Person()</code> 是创建 <code>Person</code> 实例。</p><p>有了指向这个实例的变量，我们就可以通过这个变量来操作实例。访问实例变量可以用 <code>变量.字段</code>，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    ming<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xiao Ming&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 对字段 name 赋值</span>
    ming<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 对字段 age 赋值</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ming<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问字段 name</span>

    <span class="token class-name">Person</span> hong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hong<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xiao Hong&quot;</span><span class="token punctuation">;</span>
    hong<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两个变量分别指向两个不同的实例，它们在内存中的结构如下：</p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>两个 <code>instance</code> 拥有 <code>class</code> 定义的 <code>name</code> 和 <code>age</code> 字段，且各自都有一份独立的数据，互不干扰。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>一个 Java 源文件可以包含多个类的定义，但只能定义一个 <code>public</code> 类，且 <code>public</code> 类名必须与文件名一致。如果要定义多个 <code>public</code> 类，必须拆到多个 Java 源文件中。</p></div><h2 id="🍀-面向对象的思想概述" tabindex="-1"><a class="header-anchor" href="#🍀-面向对象的思想概述" aria-hidden="true">#</a> 🍀 面向对象的思想概述</h2><ul><li>程序员从面向过程的执行者转化成了面向对象的指挥者；</li><li>面向对象分析方法分析问题的思路和步骤： <ul><li>根据问题需要，选择问题所针对的现实世界中的 <strong>实体</strong>。</li><li>从实体中寻找解决问题相关的 <strong><em>属性</em></strong> 和 <strong><em>功能</em></strong> ，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。</li></ul></li></ul><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><p>请定义一个 <code>City</code> 类，该 <code>class</code> 具有如下字段:</p><ul><li><code>name</code> : 名称，<code>String</code> 类型</li><li><code>latitude</code> : 纬度，<code>double</code> 类型</li><li><code>longitude</code> : 经度，<code>double</code> 类型</li></ul><p>实例化几个 City 并赋值，然后打印。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">City</span> bj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">;</span>
        bj<span class="token punctuation">.</span>latitude <span class="token operator">=</span> <span class="token number">39.903</span><span class="token punctuation">;</span>
        bj<span class="token punctuation">.</span>longitude <span class="token operator">=</span> <span class="token number">116.401</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;location:&quot;</span> <span class="token operator">+</span> bj<span class="token punctuation">.</span>latitude <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> bj<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> latitude<span class="token punctuation">;</span> <span class="token comment">// 纬度</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> longitude<span class="token punctuation">;</span> <span class="token comment">// 经度</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li>在 <code>OOP</code> 中，<code>class</code> 和 <code>instance</code> 是 “模版” 和“实例”的关系；</li><li>定义 <code>class</code> 就是定义了一种数据类型，对应的 <code>instance</code> 是这种数据类型的实例；</li><li><code>class</code> 定义的 <code>field</code>，在每个 <code>instance</code> 都会拥有各自的 <code>field</code>，且互不干扰；</li><li>通过 <code>new</code> 操作符创建新的 <code>instance</code>，然后用变量指向它，即可通过变量来引用这个 <code>instance</code> ；</li><li>访问实例字段的方法是 <code>变量名.字段名</code> ；</li><li>❓ 指向 <code>instance</code> 的变量都是引用变量。 <blockquote><p>引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。例如上述代码 <code>City bj = new City()</code> 中的 <code>bj</code> 就是引用变量。</p></blockquote></li></ul>`,45);function _(y,w){const s=o("router-link");return p(),i("div",null,[n("details",b,[g,n("nav",h,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-面向过程-pop-与面向对象-oop"},{default:e(()=>[c("🍀 面向过程 (POP) 与面向对象 (OOP)")]),_:1})]),n("li",null,[a(s,{to:"#🍀-人把大象装进冰箱"},{default:e(()=>[c("🍀 “人把大象装进冰箱”")]),_:1})]),n("li",null,[a(s,{to:"#🍀-class-和-instance"},{default:e(()=>[c("🍀 class 和 instance")]),_:1})]),n("li",null,[a(s,{to:"#🍀-定义-class"},{default:e(()=>[c("🍀 定义 class")]),_:1})]),n("li",null,[a(s,{to:"#🍀-创建实例"},{default:e(()=>[c("🍀 创建实例")]),_:1})]),n("li",null,[a(s,{to:"#🍀-面向对象的思想概述"},{default:e(()=>[c("🍀 面向对象的思想概述")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#练习"},{default:e(()=>[c("练习")]),_:1})])])]),n("li",null,[a(s,{to:"#🍀-小结"},{default:e(()=>[c("🍀 小结")]),_:1})])])])]),f])}const P=t(v,[["render",_],["__file","index.html.vue"]]);export{P as default};
