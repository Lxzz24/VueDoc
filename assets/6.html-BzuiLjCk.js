const t=JSON.parse('{"key":"v-6ed8815f","path":"/1-Java/4_%E5%8F%8D%E5%B0%84/6.html","title":"动态代理**","lang":"zh-CN","frontmatter":{"title":"动态代理**","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 我们来比较 Java 的 class 和 interface 的区别： ==可以实例化== class （非 abstract ）; ==不能实例化== interface; 所有 interface 类型的变量总是通过某个实例向上转型并赋值给接口类型变量的： 有没有可能不编写实现类，直接在运行期创建某个 interface 的实...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/4_%E5%8F%8D%E5%B0%84/6.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"动态代理**"}],["meta",{"property":"og:description","content":"目录 [[toc]] 我们来比较 Java 的 class 和 interface 的区别： ==可以实例化== class （非 abstract ）; ==不能实例化== interface; 所有 interface 类型的变量总是通过某个实例向上转型并赋值给接口类型变量的： 有没有可能不编写实现类，直接在运行期创建某个 interface 的实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T08:53:47.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-06-04T08:53:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态代理**\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-04T08:53:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1717491227000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":4}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"1-Java/4_反射/6.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
