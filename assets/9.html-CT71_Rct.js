import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as l,a as e,b as s,w as t,d as i,e as a}from"./app-CvlAI_tu.js";const d={},r={class:"hint-container details"},u=e("summary",null,"目录",-1),v={class:"table-of-contents"},k=i(`<p>除了 Servlet 和 Filter 外，JavaEE 的 Servlet 规范还提供了第三种组件：Listener。</p><p>Listener 顾名思义就是监听器，有好几种 Listener，其中最常用的是 <code>ServletContextListener</code>，我们编写一个实现了 <code>ServletContextListener</code> 接口的类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在此初始化 WebApp, 例如打开数据库连接池等:</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WebApp initialized.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在此清理 WebApp, 例如关闭数据库连接池等:</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WebApp destroyed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何标注为 <code>@WebListener</code>，且实现了特定接口的类会被 Web 服务器自动初始化。上述 <code>AppListener</code> 实现了 <code>ServletContextListener</code> 接口，它会在整个 Web 应用程序初始化完成后，以及 Web 应用程序关闭后获得回调通知。我们可以把初始化数据库连接池等工作放到 <code>contextInitialized()</code> 回调方法中，把清理资源的工作放到 <code>contextDestroyed()</code> 回调方法中，因为 Web 服务器保证在 <code>contextInitialized()</code> 执行后，才会接受用户的 HTTP 请求。</p><p>很多第三方 Web 框架都会通过一个 <code>ServletContextListener</code> 接口初始化自己。</p><p>除了 <code>ServletContextListener</code> 外，还有几种 Listener：</p><ul><li>HttpSessionListener：监听 HttpSession 的创建和销毁事件；</li><li>ServletRequestListener：监听 ServletRequest 请求的创建和销毁事件；</li><li>ServletRequestAttributeListener：监听 ServletRequest 请求的属性变化事件（即调用 <code>ServletRequest.setAttribute()</code> 方法）；</li><li>ServletContextAttributeListener：监听 ServletContext 的属性变化事件（即调用 <code>ServletContext.setAttribute()</code> 方法）；</li></ul><h2 id="🍀-servletcontext" tabindex="-1"><a class="header-anchor" href="#🍀-servletcontext" aria-hidden="true">#</a> 🍀 ServletContext</h2><p>一个 Web 服务器可以运行一个或多个 WebApp，对于每个 WebApp，Web 服务器都会为其创建一个全局唯一的 <code>ServletContext</code> 实例，我们在 <code>AppListener</code> 里面编写的两个回调方法实际上对应的就是 <code>ServletContext</code> 实例的创建和销毁：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WebApp initialized: ServletContext =&quot;</span> <span class="token operator">+</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServletRequest</code>、<code>HttpSession</code> 等很多对象也提供 <code>getServletContext()</code> 方法获取到同一个 <code>ServletContext</code> 实例。<code>ServletContext</code> 实例最大的作用就是设置和共享全局信息。</p><p>此外，<code>ServletContext</code> 还提供了动态添加 Servlet、Filter、Listener 等功能，它允许应用程序在运行期间动态添加一个组件，虽然这个功能不是很常用。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Listener 监听 WebApp</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>通过 Listener 我们可以监听 Web 应用程序的生命周期，获取 <code>HttpSession</code> 等创建和销毁的事件；</p><p><code>ServletContext</code> 是一个 WebApp 运行期的全局唯一实例，可用于设置和共享配置信息。</p>`,17);function b(m,x){const n=c("router-link");return p(),l("div",null,[e("details",r,[u,e("nav",v,[e("ul",null,[e("li",null,[s(n,{to:"#🍀-servletcontext"},{default:t(()=>[a("🍀 ServletContext")]),_:1})]),e("li",null,[s(n,{to:"#🍀-练习"},{default:t(()=>[a("🍀 练习")]),_:1})]),e("li",null,[s(n,{to:"#🍀-小结"},{default:t(()=>[a("🍀 小结")]),_:1})])])])]),k])}const _=o(d,[["render",b],["__file","9.html.vue"]]);export{_ as default};
