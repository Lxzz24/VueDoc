import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as e,d as i,e as p}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/20220620094050-CrJiQuVu.png",k={},d={class:"hint-container details"},r=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=i(`<p>在 Java 中，我们可以通过 <code>static final</code> 来定义常量。例如，我们希望定义周一到周日这 7 个常量，可以用 7 个不同的 <code>int</code> 表示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SUN</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MON</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TUE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WED</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THU</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">FRI</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SAT</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用常量的时候，可以这么引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SAT</span> <span class="token operator">||</span> day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: work at home</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以把常量定义为字符串类型，例如，定义 3 种颜色的常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用常量的时候，可以这么引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO:</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论是 <code>int</code> 常量还是 <code>String</code> 常量，使用这些常量来表示一组枚举值的时候，有一个严重的问题就是，编译器无法检查每个值的合理性。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>weekday <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> weekday <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">MON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO:</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码编译和运行均不会报错，但存在两个问题：</p><ul><li>注意到 <code>Weekday</code> 定义的常量范围是 <code>0</code> ~ <code>6</code>，并不包含 <code>7</code>，编译器无法检查不在枚举中的 <code>int</code> 值；</li><li>定义的常量仍可与其他变量比较，但其用途并非是枚举星期值。</li></ul><h2 id="🍀-enum" tabindex="-1"><a class="header-anchor" href="#🍀-enum" aria-hidden="true">#</a> 🍀 enum</h2><p>为了让编译器能自动检查某个值在枚举的集合内，并且，不同用途的枚举需要不同的类型来标记，不能混用，我们可以使用 <code>enum</code> 来定义枚举类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// enum</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Weekday</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SAT</span> <span class="token operator">||</span> day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Work at home!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Work at office!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token constant">SUN</span><span class="token punctuation">,</span> <span class="token constant">MON</span><span class="token punctuation">,</span> <span class="token constant">TUE</span><span class="token punctuation">,</span> <span class="token constant">WED</span><span class="token punctuation">,</span> <span class="token constant">THU</span><span class="token punctuation">,</span> <span class="token constant">FRI</span><span class="token punctuation">,</span> <span class="token constant">SAT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到定义枚举类是通过关键字 <code>enum</code> 实现的，我们只需依次列出枚举的常量名。</p><p>和 <code>int</code> 定义的常量相比，使用 <code>enum</code> 定义枚举有如下好处：</p><p>首先，<strong><em><code>enum</code> 常量本身带有类型信息</em></strong> ，即 <code>Weekday.SUN</code> 类型是 <code>Weekday</code>，编译器会自动检查出类型错误。例如，下面的语句不可能编译通过：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Compile error: bad operand types for binary operator &#39;==&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其次，<strong><em>不可能引用到非枚举的值</em></strong> ，因为无法通过编译。</p><p>最后，<strong><em>不同类型的枚举不能互相比较或者赋值，因为类型不符。</em></strong> 例如，不能给一个 <code>Weekday</code> 枚举类型的变量赋值为 <code>Color</code> 枚举类型的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Weekday</span> x <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">;</span> <span class="token comment">// ok!</span>
<span class="token class-name">Weekday</span> y <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span> <span class="token comment">// Compile error: incompatible types</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就使得编译器可以在编译期自动检查出所有可能的潜在错误。</p><h2 id="🍀-enum-的比较" tabindex="-1"><a class="header-anchor" href="#🍀-enum-的比较" aria-hidden="true">#</a> 🍀 enum 的比较</h2><p>使用 <code>enum</code> 定义的枚举类是一种<em>引用类型</em>。前面我们讲到，引用类型比较，要使用 <code>equals()</code> 方法，如果使用 <code>==</code> 比较，它 <strong><em>比较的是两个引用类型的变量是否是同一个对象</em></strong> 。因此，引用类型比较，要始终使用 <code>equals()</code> 方法，<strong><em>但 <code>enum</code> 类型可以例外</em></strong> 。</p><p>这是因为 <code>enum</code> 类型的每个常量在 JVM 中只有一个唯一实例，所以可以直接用 <code>==</code> 比较：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">FRI</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ok!</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>day<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ok, but more code!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-enum-类型" tabindex="-1"><a class="header-anchor" href="#🍀-enum-类型" aria-hidden="true">#</a> 🍀 enum 类型</h2><div class="hint-container important"><p class="hint-container-title">重要</p><p>通过 <code>enum</code> 定义的枚举类，和其他的 <code>class</code> 有什么区别？</p></div><p>答案是没有任何区别。<code>enum</code> 定义的类型就是 <code>class</code>，只不过它有以下几个特点：</p><ul><li>定义的 <code>enum</code> 类型总是继承自 <code>java.lang.Enum</code>，且无法被继承；</li><li>只能定义出 <code>enum</code> 的实例，而无法通过 <code>new</code> 操作符创建 <code>enum</code> 的实例；</li><li>定义的每个实例都是引用类型的唯一实例；</li><li>可以将 <code>enum</code> 类型用于 <code>switch</code> 语句。</li></ul><p>例如，我们定义的 <code>Color</code> 枚举类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLUE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器编译出的 <code>class</code> 大概就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span> <span class="token punctuation">{</span> <span class="token comment">// 继承自 Enum，标记为 final class</span>
    <span class="token comment">// 每个实例均为全局唯一:</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// private 构造方法，确保外部无法调用 new 操作符:</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，编译后的 <code>enum</code> 类和普通 <code>class</code> 并没有任何区别。但是我们自己无法按定义普通 <code>class</code> 那样来定义 <code>enum</code>，必须使用 <code>enum</code> 关键字，这是 Java 语法规定的。</p><p>因为 <code>enum</code> 是一个 <code>class</code>，每个枚举的值都是 <code>class</code> 实例，因此，这些实例有一些方法：</p><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name()</h3><p>返回常量名，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;SUN&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ordinal" tabindex="-1"><a class="header-anchor" href="#ordinal" aria-hidden="true">#</a> ordinal()</h3><p>返回定义的常量的顺序，从 <code>0</code> 开始计数，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">MON</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改变枚举常量定义的顺序就会导致 <code>ordinal()</code> 返回值发生变化。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token constant">SUN</span><span class="token punctuation">,</span> <span class="token constant">MON</span><span class="token punctuation">,</span> <span class="token constant">TUE</span><span class="token punctuation">,</span> <span class="token constant">WED</span><span class="token punctuation">,</span> <span class="token constant">THU</span><span class="token punctuation">,</span> <span class="token constant">FRI</span><span class="token punctuation">,</span> <span class="token constant">SAT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token constant">MON</span><span class="token punctuation">,</span> <span class="token constant">TUE</span><span class="token punctuation">,</span> <span class="token constant">WED</span><span class="token punctuation">,</span> <span class="token constant">THU</span><span class="token punctuation">,</span> <span class="token constant">FRI</span><span class="token punctuation">,</span> <span class="token constant">SAT</span><span class="token punctuation">,</span> <span class="token constant">SUN</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的 <code>ordinal</code> 就是不同的。如果在代码中编写了类似 <code>if(x.ordinal()==1)</code> 这样的语句，就要保证 <code>enum</code> 的枚举顺序不能变。新增的常量必须放在最后。</p><p>有些童鞋会想，<code>Weekday</code> 的枚举常量如果要和 <code>int</code> 转换，使用 <code>ordinal()</code> 不是非常方便？比如这样写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> task <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">MON</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/ppt&quot;</span><span class="token punctuation">;</span>
<span class="token function">saveToFile</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果不小心修改了枚举的顺序，编译器是无法检查出这种逻辑错误的。要编写健壮的代码，就不要依靠 <code>ordinal()</code> 的返回值。因为 <code>enum</code> 本身是 <code>class</code>，所以我们可以定义 <code>private</code> 的构造方法，并且，给每个枚举常量添加字段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// enum</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Weekday</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>day<span class="token punctuation">.</span>dayValue <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> day<span class="token punctuation">.</span>dayValue <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Work at home!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Work at office!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token function">MON</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TUE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THU</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FRI</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SAT</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dayValue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span><span class="token keyword">int</span> dayValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dayValue <span class="token operator">=</span> dayValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就无需担心顺序的变化，新增枚举常量时，也需要指定一个 <code>int</code> 值。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>枚举类的字段也可以是非 <code>final</code> 类型，即可以在运行期修改，但是不推荐这样做！</p></div><p>默认情况下，对枚举常量调用 <code>toString()</code> 会返回和 <code>name()</code> 一样的字符串。但是，<code>toString()</code> 可以被重写，而 <code>name()</code> 则不行。我们可以给 <code>Weekday</code> 添加 <code>toString()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// enum</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Weekday</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>day<span class="token punctuation">.</span>dayValue <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> day<span class="token punctuation">.</span>dayValue <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Today is &quot;</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">&quot;. Work at home!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Today is &quot;</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">&quot;. Work at office!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token function">MON</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;星期一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TUE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;星期二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;星期三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">THU</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;星期四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FRI</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;星期五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SAT</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;星期六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;星期日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> dayValue<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> chinese<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span><span class="token keyword">int</span> dayValue<span class="token punctuation">,</span> <span class="token class-name">String</span> chinese<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dayValue <span class="token operator">=</span> dayValue<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chinese <span class="token operator">=</span> chinese<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chinese<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写 <code>toString()</code> 的目的是 <strong><em>在输出时更有可读性</em></strong> 。</p><blockquote><p>[!warning] &gt; <strong>判断枚举常量的名字</strong>，要始终使用 <code>name()</code> 方法，绝不能调用 <code>toString()</code>！</p></blockquote><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h3><p>最后，枚举类可以应用在 <code>switch</code> 语句中。因为枚举类天生具有类型信息和有限个枚举常量，所以比 <code>int</code>、<code>String</code> 类型更适合用在 <code>switch</code> 语句中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// switch</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Weekday</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token constant">SUN</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token constant">MON</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">TUE</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">WED</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">THU</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">FRI</span><span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Today is &quot;</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">&quot;. Work at office!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token constant">SAT</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token constant">SUN</span><span class="token operator">:</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Today is &quot;</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">&quot;. Work at home!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;cannot process&quot;</span> <span class="token operator">+</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token constant">MON</span><span class="token punctuation">,</span> <span class="token constant">TUE</span><span class="token punctuation">,</span> <span class="token constant">WED</span><span class="token punctuation">,</span> <span class="token constant">THU</span><span class="token punctuation">,</span> <span class="token constant">FRI</span><span class="token punctuation">,</span> <span class="token constant">SAT</span><span class="token punctuation">,</span> <span class="token constant">SUN</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上 <code>default</code> 语句，可以在漏写某个枚举常量时自动报错，从而及时发现错误。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li><p>Java 使用 <code>enum</code> 定义枚举类型，它被编译器编译为 <code>final class Xxx extends Enum {…}</code>；</p></li><li><p><strong><em>通过 <code>name()</code> 获取常量定义的字符串</em></strong> ，注意不要使用 <code>toString()</code>；</p></li><li><p>通过 <code>ordinal()</code> 返回常量定义的顺序（<em>无实质意义</em>）；</p></li><li><p>可以为 <code>enum</code> 编写构造方法、字段和方法</p></li><li><p><strong><em><code>enum</code> 的构造方法要声明为 <code>private</code>，字段强烈建议声明为 <code>final</code> ；</em></strong></p></li><li><p><code>enum</code> 适合用在 <code>switch</code> 语句中。</p></li></ul>`,65);function b(y,w){const s=o("router-link");return c(),l("div",null,[n("details",d,[r,n("nav",m,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-enum"},{default:e(()=>[p("🍀 enum")]),_:1})]),n("li",null,[a(s,{to:"#🍀-enum-的比较"},{default:e(()=>[p("🍀 enum 的比较")]),_:1})]),n("li",null,[a(s,{to:"#🍀-enum-类型"},{default:e(()=>[p("🍀 enum 类型")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#name"},{default:e(()=>[p("name()")]),_:1})]),n("li",null,[a(s,{to:"#ordinal"},{default:e(()=>[p("ordinal()")]),_:1})]),n("li",null,[a(s,{to:"#switch"},{default:e(()=>[p("switch")]),_:1})])])]),n("li",null,[a(s,{to:"#🍀-小结"},{default:e(()=>[p("🍀 小结")]),_:1})])])])]),v])}const h=t(k,[["render",b],["__file","6.html.vue"]]);export{h as default};
