import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as o,a as n,b as p,w as c,d as l,e as u}from"./app-CvlAI_tu.js";const i={},d={class:"hint-container details"},k=n("summary",null,"目录",-1),r={class:"table-of-contents"},m=l(`<p>在介绍非贪婪匹配前，我们先看一个简单的问题：</p><p>给定一个字符串表示的数字，判断该数字末尾 <code>0</code> 的个数。例如：</p><ul><li><code>&quot;123000&quot;</code>：3 个 <code>0</code></li><li><code>&quot;10100&quot;</code>：2 个 <code>0</code></li><li><code>&quot;1001&quot;</code>：0 个 <code>0</code></li></ul><p>可以很容易地写出该正则表达式：<code>(\\d+)(0*)</code>，Java 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\d+)(0*)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;1230000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group1=&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1230000&quot;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group2=&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而打印的第二个子串是空字符串 <code>&quot;&quot;</code>。</p><p>实际上，我们期望分组匹配结果是：</p><table><thead><tr><th style="text-align:left;">input</th><th style="text-align:left;"><code>\\d+</code></th><th style="text-align:left;"><code>0*</code></th></tr></thead><tbody><tr><td style="text-align:left;">123000</td><td style="text-align:left;">&quot;123&quot;</td><td style="text-align:left;">&quot;000&quot;</td></tr><tr><td style="text-align:left;">10100</td><td style="text-align:left;">&quot;101&quot;</td><td style="text-align:left;">&quot;00&quot;</td></tr><tr><td style="text-align:left;">1001</td><td style="text-align:left;">&quot;1001&quot;</td><td style="text-align:left;">&quot;&quot;</td></tr></tbody></table><p>但实际的分组匹配结果是这样的：</p><table><thead><tr><th style="text-align:left;">input</th><th style="text-align:left;"><code>\\d+</code></th><th style="text-align:left;"><code>0*</code></th></tr></thead><tbody><tr><td style="text-align:left;">123000</td><td style="text-align:left;">&quot;123000&quot;</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">10100</td><td style="text-align:left;">&quot;10100&quot;</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">1001</td><td style="text-align:left;">&quot;1001&quot;</td><td style="text-align:left;">&quot;&quot;</td></tr></tbody></table><p>仔细观察上述实际匹配结果，实际上它是完全合理的，因为 <code>\\d+</code> 确实可以匹配后面任意个 <code>0</code>。</p><p>这是因为正则表达式默认使用贪婪匹配：任何一个规则，它总是尽可能多地向后匹配，因此，<code>\\d+</code> 总是会把后面的 <code>0</code> 包含进来。</p><p>要让 <code>\\d+</code> 尽量少匹配，让 <code>0*</code> 尽量多匹配，我们就必须让 <code>\\d+</code> 使用非贪婪匹配。在规则 <code>\\d+</code> 后面加个 <code>?</code> 即可表示非贪婪匹配。我们改写正则表达式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\d+?)(0*)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;1230000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group1=&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group2=&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;0000&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，给定一个匹配规则，加上 <code>?</code> 后就变成了非贪婪匹配。</p><p>我们再来看这个正则表达式 <code>(\\d??)(9*)</code>，注意 <code>\\d?</code> 表示匹配 0 个或 1 个数字，后面第二个 <code>?</code> 表示非贪婪匹配，因此，给定字符串 <code>&quot;9999&quot;</code>，匹配到的两个子串分别是 <code>&quot;&quot;</code> 和 <code>&quot;9999&quot;</code>，因为对于 <code>\\d?</code> 来说，可以匹配 1 个 <code>9</code>，也可以匹配 0 个 <code>9</code>，但是因为后面的 <code>?</code> 表示非贪婪匹配，它就会尽可能少的匹配，结果是匹配了 0 个 <code>9</code>。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>正则表达式匹配默认使用贪婪匹配，可以使用 <code>?</code> 表示对某一规则进行非贪婪匹配。</p><p>注意区分 <code>?</code> 的含义：<code>\\d??</code>。</p>`,19);function v(q,g){const s=t("router-link");return e(),o("div",null,[n("details",d,[k,n("nav",r,[n("ul",null,[n("li",null,[p(s,{to:"#🍀-小结"},{default:c(()=>[u("🍀 小结")]),_:1})])])])]),m])}const y=a(i,[["render",v],["__file","5.html.vue"]]);export{y as default};
