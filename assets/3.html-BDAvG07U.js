import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as t,w as p,d as i,e as l}from"./app-CvlAI_tu.js";const d="/VueDoc/assets/20220627153559-CVHxkpYK.png",u={},r={class:"hint-container details"},k=n("summary",null,"目录",-1),m={class:"table-of-contents"},v=i('<p>在 Java 程序中，一个线程对象只能调用一次 <code>start()</code> 方法启动新线程，并在新线程中执行 <code>run()</code> 方法。一旦 <code>run()</code> 方法执行完毕，线程就结束了。因此，Java 线程的状态有以下几种：</p><ul><li>New：新创建的线程，尚未执行；</li><li>Runnable：运行中的线程，正在执行 <code>run()</code> 方法的 Java 代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中；</li><li>Timed Waiting：运行中的线程，因为执行 <code>sleep()</code> 方法正在计时等待；</li><li>Terminated：线程已终止，因为 <code>run()</code> 方法执行完毕。</li></ul><p>用一个状态转移图表示如下：</p><figure><img src="'+d+`" alt="20220627153559" tabindex="0" loading="lazy"><figcaption>20220627153559</figcaption></figure><p>当线程启动后，它可以在 <code>Runnable</code>、<code>Blocked</code>、<code>Waiting</code> 和 <code>Timed Waiting</code> 这几个状态之间切换，直到最后变成 <code>Terminated</code> 状态，线程终止。</p><p>线程终止的原因有：</p><ul><li>线程正常终止： <code>run()</code> 方法执行到 <code>return</code> 语句返回；</li><li>线程意外终止： <code>run()</code> 方法因为未捕获的异常导致线程终止；</li><li>对某个线程的 <code>Thread</code> 实例调用 <code>stop()</code> 方法强制终止（强烈不推荐使用）。</li></ul><p>一个线程还可以等待另一个线程直到其运行结束。例如，<code>main</code> 线程在启动 <code>t</code> 线程后，可以通过 <code>t.join()</code> 等待 <code>t</code> 线程结束后再继续运行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>main</code> 线程对线程对象 <code>t</code> 调用 <code>join()</code> 方法时，主线程将等待变量 <code>t</code> 表示的线程运行结束，即 <code>join</code> 就是指等待该线程结束，然后才继续往下执行自身线程。所以，上述代码打印顺序可以肯定是 <code>main</code> 线程先打印 <code>start</code>，<code>t</code> 线程再打印 <code>hello</code>，<code>main</code> 线程最后再打印 <code>end</code> 。</p><p>如果 <code>t</code> 线程已经结束，对实例 <code>t</code> 调用 <code>join()</code> 会立刻返回。此外，<code>join(long)</code> 的重载方法也可以指定一个等待时间，超过等待时间后就不再继续等待。</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><ul><li>Java 线程对象 <code>Thread</code> 的状态包括： <code>New</code>、<code>Runnable</code>、<code>Blocked</code>、<code>Waiting</code>、<code>Timed Waiting</code> 和 <code>Terminated</code> ；</li><li>通过对另一个线程对象调用 <code>join()</code> 方法可以等待其执行结束；</li><li>可以指定等待时间，超过等待时间线程仍然没有结束就不再等待；</li><li>对已经运行结束的线程调用 <code>join()</code> 方法会立刻返回。</li></ul>`,13);function _(g,h){const s=e("router-link");return o(),c("div",null,[n("details",r,[k,n("nav",m,[n("ul",null,[n("li",null,[t(s,{to:"#🍀-小结"},{default:p(()=>[l("🍀 小结")]),_:1})])])])]),v])}const w=a(u,[["render",_],["__file","3.html.vue"]]);export{w as default};
