const t=JSON.parse('{"key":"v-5654770a","path":"/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/13.html","title":"使用 StampedLock","lang":"zh-CN","frontmatter":{"title":"使用 StampedLock","category":"Java 教程","tag":"Java","headerDepth":1,"description":"目录 [[toc]] 前面介绍的 ReadWriteLock 可以解决多线程同时读，但只有一个线程能写的问题。 如果我们深入分析 ReadWriteLock，会发现它有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。 要进一步提升并发执行效率，Java 8 引入了新的读写锁：Stamp...","head":[["meta",{"property":"og:url","content":"https://www.gxmnzl.cn/VueDoc/1-Java/13_%E5%A4%9A%E7%BA%BF%E7%A8%8B/13.html"}],["meta",{"property":"og:site_name","content":"BLOG"}],["meta",{"property":"og:title","content":"使用 StampedLock"}],["meta",{"property":"og:description","content":"目录 [[toc]] 前面介绍的 ReadWriteLock 可以解决多线程同时读，但只有一个线程能写的问题。 如果我们深入分析 ReadWriteLock，会发现它有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种悲观的读锁。 要进一步提升并发执行效率，Java 8 引入了新的读写锁：Stamp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-16T12:34:11.000Z"}],["meta",{"property":"article:author","content":"Lxzz24"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-16T12:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 StampedLock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-16T12:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lxzz24\\"}]}"]]},"headers":[{"level":2,"title":"🍀 小结","slug":"🍀-小结","link":"#🍀-小结","children":[]}],"git":{"createdTime":1704354222000,"updatedTime":1715862851000,"contributors":[{"name":"Lxzz24","email":"lxzz108@gmail.com","commits":2}]},"readingTime":{"minutes":2.92,"words":877},"filePathRelative":"1-Java/13_多线程/13.md","localizedDate":"2024年1月4日","autoDesc":true}');export{t as data};
