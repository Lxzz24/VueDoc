import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,d as r}from"./app-CvlAI_tu.js";const h={},d=r('<h2 id="🍀-分治算法" tabindex="-1"><a class="header-anchor" href="#🍀-分治算法" aria-hidden="true">#</a> 🍀 分治算法</h2><ul><li>分治算法的基本思想是将一个规模为 N 的问题分解为 K 个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解</li></ul><h2 id="🍀-动态规划算法" tabindex="-1"><a class="header-anchor" href="#🍀-动态规划算法" aria-hidden="true">#</a> 🍀 动态规划算法</h2><ul><li>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</li></ul><h2 id="🍀-贪心算法" tabindex="-1"><a class="header-anchor" href="#🍀-贪心算法" aria-hidden="true">#</a> 🍀 贪心算法</h2><ul><li>本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的</li></ul><h2 id="🍀-二分法" tabindex="-1"><a class="header-anchor" href="#🍀-二分法" aria-hidden="true">#</a> 🍀 二分法</h2><ul><li>本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</li></ul><h2 id="🍀-搜索算法" tabindex="-1"><a class="header-anchor" href="#🍀-搜索算法" aria-hidden="true">#</a> 🍀 搜索算法</h2><ul><li>本文主要介绍算法中搜索算法的思想，主要包含 BFS，DFS</li></ul><h2 id="🍀-回溯算法" tabindex="-1"><a class="header-anchor" href="#🍀-回溯算法" aria-hidden="true">#</a> 🍀 回溯算法</h2><ul><li>Backtracking(回溯)属于 DFS, 本文主要介绍算法中 Backtracking 算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</li></ul>',12),l=[d];function n(t,c){return e(),i("div",null,l)}const u=a(h,[["render",n],["__file","index.html.vue"]]);export{u as default};
