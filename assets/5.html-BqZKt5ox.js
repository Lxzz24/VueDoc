import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,w as e,d as i,e as p}from"./app-CvlAI_tu.js";const u={},r={class:"hint-container details"},d=n("summary",null,"目录",-1),k={class:"table-of-contents"},v=i(`<p>前面我们讨论了 XML 这种数据格式。XML 的特点是功能全面，但标签繁琐，格式复杂。在 Web 上使用 XML 现在越来越少，取而代之的是 JSON 这种数据结构。</p><p>JSON 是 JavaScript Object Notation 的缩写，它去除了所有 JavaScript 执行代码，只保留 JavaScript 的对象格式。一个典型的 JSON 如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Abc&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Xyz&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Network&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSON 作为数据传输的格式，有几个显著的优点：</p><ul><li>JSON 只允许使用 UTF-8 编码，不存在编码问题；</li><li>JSON 只允许使用双引号作为 key，特殊字符用 <code>\\</code> 转义，格式简单；</li><li>浏览器内置 JSON 支持，如果把数据用 JSON 发送给浏览器，可以用 JavaScript 直接处理。</li></ul><p>因此，JSON 适合表示层次结构，因为它格式简单，仅支持以下几种数据类型：</p><ul><li>键值对：<code>{&quot;key&quot;: value}</code></li><li>数组：<code>[1, 2, 3]</code></li><li>字符串：<code>&quot;abc&quot;</code></li><li>数值（整数和浮点数）：<code>12.34</code></li><li>布尔值：<code>true</code> 或 <code>false</code></li><li>空值：<code>null</code></li></ul><p>浏览器直接支持使用 JavaScript 对 JSON 进行读写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSON string to JavaScript object:</span>
jsObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript object to JSON string:</span>
jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，开发 Web 应用的时候，使用 JSON 作为数据传输，在浏览器端非常方便。因为 JSON 天生适合 JavaScript 处理，所以，绝大多数 REST API 都选择 JSON 作为数据传输格式。</p><p>现在问题来了：使用 Java 如何对 JSON 进行读写？</p><p>在 Java 中，针对 JSON 也有标准的 JSR 353 API，但是我们在前面讲 XML 的时候发现，如果能直接在 XML 和 JavaBean 之间互相转换是最好的。类似的，如果能直接在 JSON 和 JavaBean 之间转换，那么用起来就简单多了。</p><p>常用的用于解析 JSON 的第三方库有：</p><ul><li>Jackson</li><li>Gson</li><li>Fastjson</li><li>...</li></ul><p>注意到上一节提到的那个可以解析 XML 的浓眉大眼的 Jackson 也可以解析 JSON！因此我们只需要引入以下 Maven 依赖：</p><ul><li>com.fasterxml.jackson.core:jackson-databind:2.12.0</li></ul><p>就可以使用下面的代码解析一个 JSON 文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/book.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 反序列化时忽略不存在的 JavaBean 属性:</span>
mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Book</span> book <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心代码是创建一个 <code>ObjectMapper</code> 对象。关闭 <code>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</code> 功能使得解析时如果 JavaBean 不存在该属性时解析不会报错。</p><p>把 JSON 解析为 JavaBean 的过程称为反序列化。如果把 JavaBean 变为 JSON，那就是序列化。要实现 JavaBean 到 JSON 的序列化，只需要一行代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要把 JSON 的某些值解析为特定的 Java 对象，例如 <code>LocalDate</code>，也是完全可以的。例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;pubDate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2016-09-01&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要解析为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> pubDate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要引入标准的 JSR 310 关于 JavaTime 的数据格式定义至 Maven：</p><ul><li>com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.0</li></ul><p>然后，在创建 <code>ObjectMapper</code> 时，注册一个新的 <code>JavaTimeModule</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有些时候，内置的解析规则和扩展的解析规则如果都不满足我们的需求，还可以自定义解析。</p><p>举个例子，假设 <code>Book</code> 类的 <code>isbn</code> 是一个 <code>BigInteger</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> isbn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 JSON 数据并不是标准的整形格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;978-7-111-54742-6&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接解析，肯定报错。这时，我们需要自定义一个 <code>IsbnDeserializer</code>，用于解析含有非数字的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IsbnDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> p<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取原始的 JSON 字符串内容:</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getValueAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JsonParseException</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在 <code>Book</code> 类中使用注解标注：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 表示反序列化 isbn 时使用自定义的 IsbnDeserializer:</span>
    <span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">IsbnDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BigInteger</span> isbn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的，自定义序列化时我们需要自定义一个 <code>IsbnSerializer</code>，然后在 <code>Book</code> 类中标注 <code>@JsonSerialize(using = ...)</code> 即可。</p><h2 id="🍀-反序列化" tabindex="-1"><a class="header-anchor" href="#🍀-反序列化" aria-hidden="true">#</a> 🍀 反序列化</h2><p>在反序列化时，Jackson 要求 Java 类需要一个默认的无参数构造方法，否则，无法直接实例化此类。存在带参数构造方法的类，如果要反序列化，注意再提供一个无参数构造方法。</p><p>对于 <code>enum</code> 字段，Jackson 按 String 类型处理，即：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">DayOfWeek</span> start <span class="token operator">=</span> <span class="token constant">MONDAY</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MONDAY&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>record</code> 类型，Jackson 会自动找出它的带参数构造方法，并根据 JSON 的 key 进行匹配，可直接反序列化。对 <code>record</code> 类型的支持需要版本 <code>2.12.0</code> 以上。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Jackson 解析 JSON</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>JSON 是轻量级的数据表示方式，常用于 Web 应用；</p><p>Jackson 可以实现 JavaBean 和 JSON 之间的转换；</p><p>可以通过 Module 扩展 Jackson 能处理的数据类型；</p><p>可以自定义 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> 来定制序列化和反序列化。</p>`,53);function m(b,g){const s=o("router-link");return c(),l("div",null,[n("details",r,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-反序列化"},{default:e(()=>[p("🍀 反序列化")]),_:1})]),n("li",null,[a(s,{to:"#🍀-练习"},{default:e(()=>[p("🍀 练习")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:e(()=>[p("🍀 小结")]),_:1})])])])]),v])}const S=t(u,[["render",m],["__file","5.html.vue"]]);export{S as default};
