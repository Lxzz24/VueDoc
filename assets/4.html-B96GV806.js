import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as a,w as t,d as l,e}from"./app-CvlAI_tu.js";const u="/VueDoc/assets/20221124101545-C7GnBIr5.png",d={},k={class:"hint-container details"},r=n("summary",null,"目录",-1),v={class:"table-of-contents"},m=l(`<p>在运行测试的时候，有些时候，我们需要排出某些 @Test 方法，不要让它运行，这时，我们就可以给它标记一个 @Disabled：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Disabled</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testBug101</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个测试不会运行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么我们不直接注释掉 @Test，而是要加一个 @Disabled？这是因为注释掉 @Test，JUnit 就不知道这是个测试方法，而加上 @Disabled，JUnit 仍然识别出这是个测试方法，只是暂时不运行。它会在测试结果中显示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Tests run: 68, Failures: 2, Errors: 0, Skipped: 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似 @Disabled 这种注解就称为条件测试，JUnit 根据不同的条件注解，决定是否运行当前的 @Test 方法。</p><p>我们来看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> os <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;win&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;C:\\\\&quot;</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;mac&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;linux&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;unix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;/usr/local/&quot;</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想要测试 getConfigFile() 这个方法，但是在 Windows 上跑，和在 Linux 上跑的代码路径不同，因此，针对两个系统的测试方法，其中一个只能在 Windows 上跑，另一个只能在 Mac/Linux 上跑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\test.ini&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token string">&quot;test.ini&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testLinuxAndMac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;/usr/local/test.cfg&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token string">&quot;test.cfg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们给上述两个测试方法分别加上条件如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">WINDOWS</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\test.ini&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token string">&quot;test.ini&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledOnOs</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">LINUX</span><span class="token punctuation">,</span> <span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">MAC</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testLinuxAndMac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;/usr/local/test.cfg&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token string">&quot;test.cfg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@EnableOnOs 就是一个条件测试判断。</p><p>我们来看一些常用的条件测试：</p><p>不在 Windows 平台执行的测试，可以加上 @DisabledOnOs(OS.WINDOWS)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisabledOnOs</span><span class="token punctuation">(</span><span class="token constant">OS</span><span class="token punctuation">.</span><span class="token constant">WINDOWS</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testOnNonWindowsOs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: this test is disabled on windows</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只能在 Java 9 或更高版本执行的测试，可以加上 @DisabledOnJre(JRE.JAVA_8)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisabledOnJre</span><span class="token punctuation">(</span><span class="token constant">JRE</span><span class="token punctuation">.</span><span class="token constant">JAVA_8</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testOnJava9OrAbove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: this test is disabled on java 8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只能在 64 位操作系统上执行的测试，可以用 @EnabledIfSystemProperty 判断：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledIfSystemProperty</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;os.arch&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;.*64.*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testOnlyOn64bitSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: this test is only run on 64 bit system</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要传入环境变量 DEBUG=true 才能执行的测试，可以用 @EnabledIfEnvironmentVariable：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@EnabledIfEnvironmentVariable</span><span class="token punctuation">(</span>named <span class="token operator">=</span> <span class="token string">&quot;DEBUG&quot;</span><span class="token punctuation">,</span> matches <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testOnlyOnDebugMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: this test is only run on DEBUG=true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在 JUnit 中运行所有测试的时候，JUnit 会给出执行的结果。在 IDE 中，我们能很容易地看到没有执行的测试：</p><figure><img src="`+u+'" alt="20221124101545" tabindex="0" loading="lazy"><figcaption>20221124101545</figcaption></figure><p>带有 ⊘ 标记的测试方法表示没有执行。</p><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>条件测试是根据某些注解在运行期让 JUnit 自动忽略某些测试。</p>',27);function b(g,f){const s=o("router-link");return c(),i("div",null,[n("details",k,[r,n("nav",v,[n("ul",null,[n("li",null,[a(s,{to:"#🍀-练习"},{default:t(()=>[e("🍀 练习")]),_:1})]),n("li",null,[a(s,{to:"#🍀-小结"},{default:t(()=>[e("🍀 小结")]),_:1})])])])]),m])}const O=p(d,[["render",b],["__file","4.html.vue"]]);export{O as default};
