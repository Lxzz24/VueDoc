import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-CvlAI_tu.js";const p={},e=t(`<blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><p>生成器模式（Builder）是使用多个 “小型” 工厂来最终创建出一个完整对象。</p><p>当我们使用 Builder 的时候，一般来说，是因为创建这个对象的步骤比较多，每个步骤都需要一个零部件，最终组合成一个完整的对象。</p><p>我们仍然以 Markdown 转 HTML 为例，因为直接编写一个完整的转换器比较困难，但如果针对类似下面的一行文本：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">##</span> 🍀 this is a headi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转换成 HTML 就很简单：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>this is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，我们把 Markdown 转 HTML 看作一行一行的转换，每一行根据语法，使用不同的转换器：</p><ul><li>如果以 <code>#</code> 开头，使用 <code>HeadingBuilder</code> 转换；</li><li>如果以 <code>&gt;</code> 开头，使用 <code>QuoteBuilder</code> 转换；</li><li>如果以 <code>---</code> 开头，使用 <code>HrBuilder</code> 转换；</li><li>其余使用 <code>ParagraphBuilder</code> 转换。</li></ul><p>这个 <code>HtmlBuilder</code> 写出来如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HtmlBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HeadingBuilder</span> headingBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeadingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">HrBuilder</span> hrBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HrBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ParagraphBuilder</span> paragraphBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParagraphBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">QuoteBuilder</span> quoteBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuoteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token class-name">String</span> markdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        markdown<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>headingBuilder<span class="token punctuation">.</span><span class="token function">buildHeading</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>quoteBuilder<span class="token punctuation">.</span><span class="token function">buildQuote</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hrBuilder<span class="token punctuation">.</span><span class="token function">buildHr</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paragraphBuilder<span class="token punctuation">.</span><span class="token function">buildParagraph</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意观察上述代码，<code>HtmlBuilder</code> 并不是一次性把整个 Markdown 转换为 HTML，而是一行一行转换，并且，它自己并不会将某一行转换为特定的 HTML，而是根据特性把每一行都 “委托” 给一个 <code>XxxBuilder</code> 去转换，最后，把所有转换的结果组合起来，返回给客户端。</p><p>这样一来，我们只需要针对每一种类型编写不同的 Builder。例如，针对以 <code>#</code> 开头的行，需要 <code>HeadingBuilder</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeadingBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">buildHeading</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h%d&gt;%s&lt;/h%d&gt;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：实际解析 Markdown 是带有状态的，即下一行的语义可能与上一行相关。这里我们简化了语法，把每一行视为可以独立转换。</p></div><p>可见，使用 Builder 模式时，适用于创建的对象比较复杂，最好一步一步创建出 “零件”，最后再装配起来。</p><p>JavaMail 的 <code>MimeMessage</code> 就可以看作是一个 Builder 模式，只不过 Builder 和最终产品合二为一，都是 <code>MimeMessage</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Multipart</span> multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 text:</span>
<span class="token class-name">BodyPart</span> textpart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
textpart<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>textpart<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加 image:</span>
<span class="token class-name">BodyPart</span> imagepart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
imagepart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayDataSource</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>imagepart<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置发送方地址:</span>
message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">&quot;me@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置接收方地址:</span>
message<span class="token punctuation">.</span><span class="token function">setRecipient</span><span class="token punctuation">(</span><span class="token class-name">Message<span class="token punctuation">.</span>RecipientType</span><span class="token punctuation">.</span><span class="token constant">TO</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming@somewhere.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置邮件主题:</span>
message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置邮件内容为 multipart:</span>
message<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>multipart<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很多时候，我们可以简化 Builder 模式，以链式调用的方式来创建对象。例如，我们经常编写这样的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>secure <span class="token operator">?</span> <span class="token string">&quot;https://&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;http://&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;www.liaoxuefeng.com&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;?t=0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> url <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们经常需要构造 URL 字符串，可以使用 Builder 模式编写一个 URLBuilder，调用方式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">URLBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建 Builder</span>
        <span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token string">&quot;www.liaoxuefeng.com&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 设置 domain</span>
        <span class="token punctuation">.</span><span class="token function">setScheme</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 设置 scheme</span>
        <span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 设置路径</span>
        <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;K&amp;R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置 query</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 完成 build</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🍀-练习" tabindex="-1"><a class="header-anchor" href="#🍀-练习" aria-hidden="true">#</a> 🍀 练习</h2><p>使用 Builder 模式实现一个 URLBuilder</p><h2 id="🍀-小结" tabindex="-1"><a class="header-anchor" href="#🍀-小结" aria-hidden="true">#</a> 🍀 小结</h2><p>Builder 模式是为了创建一个复杂的对象，需要多个步骤完成创建，或者需要多个零件组装的场景，且创建过程中可以灵活调用不同的步骤或组件。</p>`,26),o=[e];function c(l,u){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","1_3.html.vue"]]);export{d as default};
